{"cells":[{"cell_type":"markdown","metadata":{"id":"8Lk_kb_xtPu0"},"source":["##GRNN 베이스 코드"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ok3_BmoJkEsz","outputId":"903ee1ec-aa03-4614-c853-f0a1cd725299"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.18.0+cu121)\n","Requirement already satisfied: torchaudio in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n"]}],"source":["# PyTorch와 PyTorch Geometric을 설치합니다.\n","!pip install torch torchvision torchaudio torch-geometric"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vGPyfH7EkK4X"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_geometric.data import Data, DataLoader\n","from torch_geometric.nn import GCNConv, global_mean_pool"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pWOco2FQkMej"},"outputs":[],"source":["# 예시 노드 특징과 엣지 인덱스 데이터\n","node_features = torch.tensor([[1, 2], [2, 3], [3, 4]], dtype=torch.float)\n","edge_index = torch.tensor([[0, 1, 2], [1, 2, 0]], dtype=torch.long)\n","\n","# Data 객체로 변환\n","data = Data(x=node_features, edge_index=edge_index)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RwOmEnIAkORS"},"outputs":[],"source":["class GRNN(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim):\n","        super(GRNN, self).__init__()\n","        self.conv1 = GCNConv(input_dim, hidden_dim)\n","        self.conv2 = GCNConv(hidden_dim, hidden_dim)\n","        self.fc = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, data):\n","        x, edge_index = data.x, data.edge_index\n","        x = self.conv1(x, edge_index)\n","        x = torch.relu(x)\n","        x = self.conv2(x, edge_index)\n","        x = torch.relu(x)\n","        x = global_mean_pool(x, data.batch)  # 그래프 레벨의 대표 벡터를 얻기 위해 Global Pooling 사용\n","        x = self.fc(x)\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":215},"executionInfo":{"elapsed":9,"status":"error","timestamp":1717241482455,"user":{"displayName":"장경빈","userId":"09746380719001299806"},"user_tz":-540},"id":"J_Vu0TMokP5T","outputId":"77eebd8c-4e2d-45e6-867e-5adcea1f1eae"},"outputs":[{"ename":"NameError","evalue":"name 'node_features' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-e5376fedf942>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 하이퍼파라미터 설정\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0minput_dim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnode_features\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mhidden_dim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0moutput_dim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m  \u001b[0;31m# 이진 분류 (취약점 존재 여부)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'node_features' is not defined"]}],"source":["# 하이퍼파라미터 설정\n","input_dim = node_features.shape[1]\n","hidden_dim = 64\n","output_dim = 1  # 이진 분류 (취약점 존재 여부)\n","\n","model = GRNN(input_dim, hidden_dim, output_dim)\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","criterion = nn.BCEWithLogitsLoss()  # 이진 분류를 위한 손실 함수\n","\n","# 데이터 로더 준비\n","loader = DataLoader([data], batch_size=1, shuffle=True)\n","\n","# 학습 루프\n","num_epochs = 100\n","\n","for epoch in range(num_epochs):\n","    model.train()\n","    for batch in loader:\n","        optimizer.zero_grad()\n","        out = model(batch)\n","        loss = criterion(out, batch.y)  # 실제 라벨 y를 데이터에 포함시켜야 함\n","        loss.backward()\n","        optimizer.step()\n","\n","    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8mj427HzkSdc"},"outputs":[],"source":["model.eval()\n","correct = 0\n","total = 0\n","\n","with torch.no_grad():\n","    for batch in loader:\n","        out = model(batch)\n","        predicted = (torch.sigmoid(out) > 0.5).float()\n","        total += batch.y.size(0)\n","        correct += (predicted == batch.y).sum().item()\n","\n","accuracy = correct / total\n","print(f'Accuracy: {accuracy:.4f}')"]},{"cell_type":"markdown","metadata":{"id":"9cpy15xptJej"},"source":["##메시지 패싱이용한 GRNN"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":15014,"status":"ok","timestamp":1717241544602,"user":{"displayName":"장경빈","userId":"09746380719001299806"},"user_tz":-540},"id":"vYw4GRIORELB","outputId":"f456f6aa-3437-48b8-96b9-1a5cfcc6f76f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting torch_geometric\n","  Using cached torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (4.66.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.11.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (2023.6.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (3.1.4)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (3.9.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (3.1.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (5.9.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch_geometric) (4.0.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch_geometric) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (2024.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch_geometric) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch_geometric) (3.5.0)\n","Installing collected packages: torch_geometric\n","Successfully installed torch_geometric-2.5.3\n"]}],"source":["!pip install torch_geometric"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VQF5wdP8tMe4"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_geometric.data import Data, DataLoader\n","from torch_geometric.nn import MessagePassing, global_mean_pool\n","from torch_geometric.utils import add_self_loops\n","from torch_geometric.utils import from_networkx\n","import torch.nn.functional as F\n","import pickle\n","import pandas as pd\n","import networkx as nx\n","import base64\n","from sklearn.preprocessing import LabelEncoder\n","from torch.utils.data.dataset import random_split\n","\n","class GRNNLayer(MessagePassing):\n","    def __init__(self, in_channels, out_channels):\n","        super(GRNNLayer, self).__init__(aggr='add')  # 'add'는 메시지를 더하는 방식\n","        self.lin = nn.Linear(in_channels, out_channels)\n","        self.gru = nn.GRU(out_channels, out_channels)\n","\n","    def forward(self, x, edge_index):\n","        if edge_index is not None:\n","            edge_index, _ = add_self_loops(edge_index, num_nodes=x.size(0))\n","        x = self.lin(x)  # Linear transformation to match the input size of GRU\n","        out = self.propagate(edge_index, x=x)\n","        out, _ = self.gru(out.unsqueeze(0), x.unsqueeze(0))\n","        return out.squeeze(0)\n","\n","    def message(self, x_j):\n","        return x_j\n","\n","    def update(self, aggr_out):\n","        return aggr_out\n","\n","class GRNNForSmartContract(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim, num_layers=4):\n","        super(GRNNForSmartContract, self).__init__()\n","        self.layers = nn.ModuleList()\n","        self.layers.append(GRNNLayer(input_dim, hidden_dim))\n","        for _ in range(num_layers - 2):\n","            self.layers.append(GRNNLayer(hidden_dim, hidden_dim))\n","        self.layers.append(GRNNLayer(hidden_dim, hidden_dim))\n","        self.fc = nn.Linear(hidden_dim, output_dim)\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        for layer in self.layers:\n","            x = torch.relu(layer(x, edge_index))\n","        x = global_mean_pool(x, batch)  # 그래프 레벨의 대표 벡터를 얻기 위해 Global Pooling 사용\n","        x = self.fc(x)\n","        return F.log_softmax(x, dim=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8bcVPZ1tTDqD"},"outputs":[],"source":["# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jcG4EqgAUD6c"},"outputs":[],"source":["# 라벨 인코더 설정\n","label_encoder = LabelEncoder()\n","df['Vul'] = label_encoder.fit_transform(df['Vul'])\n","\n","# 클래스 수 확인\n","num_classes = len(label_encoder.classes_)\n","\n","# 각 그래프 데이터를 PyTorch Geometric Data 객체로 변환\n","input_dim = 10  # 노드 특징 차원 예시\n","graph_list = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph in graph_list:\n","    # PyTorch Geometric의 Data 객체 생성\n","    data = from_networkx(graph)\n","    graph_data_list.append(data)\n","\n","\n","# 하이퍼파라미터 설정\n","hidden_dim = 64\n","output_dim = num_classes  # 클래스 수에 맞춤\n","num_layers = 4\n","\n","model = GRNNForSmartContract(input_dim, hidden_dim, output_dim, num_layers)\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","criterion = nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"igqBcp3ASzVd","executionInfo":{"status":"error","timestamp":1717246698757,"user_tz":-540,"elapsed":406,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"72f5d00d-083c-45b6-ca20-b67c4f452681"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n","  warnings.warn(out)\n"]},{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'size'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-81b359ede649>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-caf47f9c4ff1>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m     47\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medge_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0medge_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m             \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medge_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mglobal_mean_pool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 그래프 레벨의 대표 벡터를 얻기 위해 Global Pooling 사용\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-caf47f9c4ff1>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, edge_index)\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medge_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0medge_index\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m             \u001b[0medge_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madd_self_loops\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medge_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_nodes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Linear transformation to match the input size of GRU\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpropagate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medge_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'size'"]}],"source":["# 데이터를 학습 및 테스트 세트로 분할\n","train_size = int(0.8 * len(graph_data_list))\n","test_size = len(graph_data_list) - train_size\n","train_dataset, test_dataset = random_split(graph_data_list, [train_size, test_size])\n","\n","# 학습 데이터 로더\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, drop_last=True)\n","\n","# 테스트 데이터 로더\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False, drop_last=True)\n","\n","# 학습 루프\n","num_epochs = 100\n","for epoch in range(num_epochs):\n","    model.train()\n","    total_loss = 0\n","    for batch in train_loader:\n","        optimizer.zero_grad()\n","        out = model(batch)\n","        loss = criterion(out, batch.y)\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item()\n","\n","    print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {total_loss / len(train_loader)}')\n","\n","# 평가\n","model.eval()\n","correct = 0\n","total = 0\n","\n","with torch.no_grad():\n","    for batch in test_loader:\n","        out = model(batch)\n","        _, predicted = torch.max(out, 1)\n","        total += batch.y.size(0)\n","        correct += (predicted == batch.y).sum().item()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')"]},{"cell_type":"markdown","source":["##GRU 이용한 GRNN"],"metadata":{"id":"p8G39odb7E-h"}},{"cell_type":"code","source":["# 필요한 라이브러리 설치\n","!pip install torch torch-geometric networkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oV22qMrr7NIp","executionInfo":{"status":"ok","timestamp":1717373584684,"user_tz":-540,"elapsed":77943,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"226e8343-27bd-4d80-89ff-5f1ae9c20a5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m13.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.3.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch)\n","  Downloading nvidia_nvjitlink_cu12-12.5.40-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m64.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.11.4)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.9.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (4.0.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2024.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.5.0)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, torch-geometric, nvidia-cusolver-cu12\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.40 nvidia-nvtx-cu12-12.1.105 torch-geometric-2.5.3\n"]}]},{"cell_type":"code","source":["import base64\n","import pickle\n","import networkx as nx\n","from torch_geometric.data import Data\n","from torch_geometric.utils import from_networkx\n","import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import MessagePassing, global_mean_pool\n","import torch.nn as nn\n","from torch_geometric.loader import DataLoader\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder"],"metadata":{"id":"DRAGAgyzAe72"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 라벨 인코더 초기화 및 라벨 인코딩\n","label_encoder = LabelEncoder()\n","df['Vul'] = label_encoder.fit_transform(df['Vul'].apply(lambda x: x[0]))\n","\n","graph_list = []\n","labels = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","    labels.append(row['Vul'])  # 라벨 추가\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    # PyTorch Geometric의 Data 객체 생성\n","    data = from_networkx(graph)\n","    data.x = torch.ones((data.num_nodes, 1))  # 노드 특징 행렬 설정\n","    data.y = torch.tensor([label], dtype=torch.long)  # 라벨 설정\n","    graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, test_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)"],"metadata":{"id":"npotDqVdCXr-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GRNN(MessagePassing):\n","    def __init__(self, in_channels, out_channels):\n","        super(GRNN, self).__init__(aggr='add')  # 'add', 'mean', 'max' 등 선택 가능\n","        self.lin = torch.nn.Linear(in_channels, out_channels)\n","        self.gru = nn.GRU(out_channels, out_channels)\n","\n","    def forward(self, x, edge_index, batch):\n","        # 메시지 패싱을 위한 초기화\n","        x = self.lin(x)\n","        return self.propagate(edge_index, x=x, batch=batch)\n","\n","    def message(self, x_j):\n","        # 각 이웃 노드의 메시지를 정의\n","        return x_j\n","\n","    def update(self, aggr_out, x):\n","        # 메시지를 모아서 업데이트\n","        aggr_out = aggr_out.unsqueeze(0)  # GRU의 입력 형식에 맞게 변환\n","        x = x.unsqueeze(0)\n","        out, _ = self.gru(aggr_out, x)  # GRU 업데이트\n","        return out.squeeze(0)\n","\n","# 모델 초기화\n","in_channels = 1  # 노드 특징 행렬의 차원\n","out_channels = 128  # 임의로 설정, 조정 가능\n","model = GRNN(in_channels=in_channels, out_channels=out_channels)"],"metadata":{"id":"ON7VEnXdAmkQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GRNNClassifier(nn.Module):\n","    def __init__(self, in_channels, hidden_channels, num_classes):\n","        super(GRNNClassifier, self).__init__()\n","        self.grnn = GRNN(in_channels, hidden_channels)\n","        self.classifier = nn.Linear(hidden_channels, num_classes)\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        x = self.grnn(x, edge_index, batch)\n","        x = global_mean_pool(x, batch)  # 각 그래프에 대한 고정된 크기의 출력 생성\n","        x = F.relu(x)\n","        x = F.dropout(x, training=self.training)\n","        x = self.classifier(x)\n","        return F.log_softmax(x, dim=1)\n","\n","num_classes = 6\n","model = GRNNClassifier(in_channels=in_channels, hidden_channels=out_channels, num_classes=num_classes)"],"metadata":{"id":"89wDdQx7AoEs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 하이퍼파라미터 설정\n","learning_rate = 0.01\n","epochs = 10\n","batch_size = 32\n","\n","# 데이터 로더 생성\n","train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=False)\n","\n","# 옵티마이저 및 손실 함수 설정\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","loss_fn = torch.nn.CrossEntropyLoss()\n","\n","# 훈련 루프\n","for epoch in range(epochs):\n","    model.train()\n","    total_loss = 0\n","    for data in train_loader:\n","        optimizer.zero_grad()\n","        out = model(data)\n","        loss = loss_fn(out, data.y.view(-1))\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item()\n","\n","    avg_loss = total_loss / len(train_loader)\n","    print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}')\n","\n","# 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in test_loader:\n","        out = model(data)\n","        pred = out.argmax(dim=1)\n","        correct += pred.eq(data.y).sum().item()\n","        total += data.y.size(0)\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gEx3_6pWAp5G","executionInfo":{"status":"ok","timestamp":1717263322577,"user_tz":-540,"elapsed":395734,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"d0b722a0-ad0e-4f3e-f8e7-2b767e191fa4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Loss: 0.1324\n","Epoch 2/10, Loss: 0.0005\n","Epoch 3/10, Loss: 0.0004\n","Epoch 4/10, Loss: 0.0002\n","Epoch 5/10, Loss: 0.0003\n","Epoch 6/10, Loss: 0.0003\n","Epoch 7/10, Loss: 0.0003\n","Epoch 8/10, Loss: 0.0002\n","Epoch 9/10, Loss: 0.0001\n","Epoch 10/10, Loss: 0.0002\n","Test Accuracy: 1.0000\n"]}]},{"cell_type":"markdown","source":["##멀티 라벨링 GRNN모델"],"metadata":{"id":"zpSP5u973vQ2"}},{"cell_type":"code","source":["# 필요한 라이브러리 설치\n","!pip install torch torch-geometric networkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WjCGG7_3lt0g","executionInfo":{"status":"ok","timestamp":1717341649605,"user_tz":-540,"elapsed":90292,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"b580fddf-c725-4804-ce2e-7ba2f4412559"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.3.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch)\n","  Downloading nvidia_nvjitlink_cu12-12.5.40-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m51.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.11.4)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.9.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (4.0.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2024.2.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.5.0)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, torch-geometric, nvidia-cusolver-cu12\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.40 nvidia-nvtx-cu12-12.1.105 torch-geometric-2.5.3\n"]}]},{"cell_type":"code","source":["import base64\n","import pickle\n","import networkx as nx\n","from torch_geometric.data import Data\n","from torch_geometric.utils import from_networkx\n","import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import MessagePassing, global_mean_pool\n","import torch.nn as nn\n","from torch_geometric.loader import DataLoader\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MultiLabelBinarizer"],"metadata":{"id":"kPY2ah49lMiO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 멀티라벨 바이너리 인코더 초기화 및 라벨 인코딩\n","mlb = MultiLabelBinarizer()\n","df['Vul'] = df['Vul'].apply(lambda x: x if isinstance(x, list) else [x])  # 리스트 형태로 변환\n","labels = mlb.fit_transform(df['Vul'])\n","\n","graph_list = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    # PyTorch Geometric의 Data 객체 생성\n","    data = from_networkx(graph)\n","    data.x = torch.ones((data.num_nodes, 1))  # 노드 특징 행렬 설정\n","    data.y = torch.tensor(label, dtype=torch.float32).unsqueeze(0)  # 멀티라벨 설정, 배치 차원 추가\n","    graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, test_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)"],"metadata":{"id":"w6OwEXt4lS2M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GRNN(MessagePassing):\n","    def __init__(self, in_channels, out_channels):\n","        super(GRNN, self).__init__(aggr='add')  # 'add', 'mean', 'max' 등 선택 가능\n","        self.lin = torch.nn.Linear(in_channels, out_channels)\n","        self.gru = nn.GRU(out_channels, out_channels)\n","\n","    def forward(self, x, edge_index):\n","        # 메시지 패싱을 위한 초기화\n","        x = self.lin(x)\n","        return self.propagate(edge_index, x=x)\n","\n","    def message(self, x_j):\n","        # 각 이웃 노드의 메시지를 정의\n","        return x_j\n","\n","    def update(self, aggr_out, x):\n","        # 메시지를 모아서 업데이트\n","        aggr_out = aggr_out.unsqueeze(0)  # GRU의 입력 형식에 맞게 변환\n","        x = x.unsqueeze(0)\n","        out, _ = self.gru(aggr_out, x)  # GRU 업데이트\n","        return out.squeeze(0)\n","\n","# 모델 초기화\n","in_channels = 1  # 노드 특징 행렬의 차원\n","out_channels = 128  # 임의로 설정, 조정 가능"],"metadata":{"id":"u3M27ktRlbkG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class GRNNClassifier(nn.Module):\n","    def __init__(self, in_channels, hidden_channels, num_classes):\n","        super(GRNNClassifier, self).__init__()\n","        self.grnn = GRNN(in_channels, hidden_channels)\n","        self.classifier = nn.Linear(hidden_channels, num_classes)\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        x = self.grnn(x, edge_index)\n","        x = global_mean_pool(x, batch)  # 각 그래프에 대한 고정된 크기의 출력 생성\n","        x = F.relu(x)\n","        x = F.dropout(x, training=self.training)\n","        x = self.classifier(x)\n","        return x  # torch.sigmoid(x)를 사용하지 않고, loss_fn에서 sigmoid 적용\n","\n","num_classes = len(mlb.classes_)\n","model = GRNNClassifier(in_channels=in_channels, hidden_channels=out_channels, num_classes=num_classes)"],"metadata":{"id":"VC5ulD1olesS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(num_classes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"njTUQoJRlx0s","executionInfo":{"status":"ok","timestamp":1717309072011,"user_tz":-540,"elapsed":7,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"19a6f4ea-509e-4098-c97f-e265e752bacf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n"]}]},{"cell_type":"code","source":["print(mlb.classes_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sgStDFzRmeIj","executionInfo":{"status":"ok","timestamp":1717309182140,"user_tz":-540,"elapsed":6,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"22edb4e0-e6cc-45d8-db5a-64912721bf4c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[\"['BN', 'SE', 'OF', 'RE', 'TP', 'UC']\" \"['BN', 'TP']\" \"['BN']\" \"['OF']\"\n"," \"['RE', 'UC']\" \"['SE']\" \"['TP']\"]\n"]}]},{"cell_type":"code","source":["# 하이퍼파라미터 설정\n","learning_rate = 0.01\n","epochs = 10\n","batch_size = 32\n","\n","# 데이터 로더 생성\n","train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=False)\n","\n","# 옵티마이저 및 손실 함수 설정\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","loss_fn = torch.nn.BCEWithLogitsLoss()  # 멀티라벨 분류용 손실 함수\n","\n","# 훈련 루프\n","for epoch in range(epochs):\n","    model.train()\n","    total_loss = 0\n","    for data in train_loader:\n","        optimizer.zero_grad()\n","        out = model(data)\n","        loss = loss_fn(out, data.y.squeeze(1))  # 멀티라벨 손실 계산\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item()\n","\n","    avg_loss = total_loss / len(train_loader)\n","    print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}')\n","\n","# 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in test_loader:\n","        out = model(data)\n","        pred = torch.round(torch.sigmoid(out))  # 예측을 0 또는 1로 반올림\n","        correct += (pred == data.y.squeeze(1)).sum().item()\n","        total += data.y.numel()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')\n","\n","# 각 클래스에 대한 취약점 확률 예측\n","model.eval()\n","with torch.no_grad():\n","    for data in test_loader:\n","        out = model(data)\n","        probabilities = torch.sigmoid(out).cpu().numpy()  # 확률 값 출력\n","        print(f'Predicted probabilities for each class: {probabilities}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZPXfbuiJ3vCz","executionInfo":{"status":"ok","timestamp":1717265506024,"user_tz":-540,"elapsed":537917,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"0773d642-9cad-4cd2-8b2b-da62b6e11c77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Loss: 0.3997\n","Epoch 2/10, Loss: 0.3675\n","Epoch 3/10, Loss: 0.3684\n","Epoch 4/10, Loss: 0.3669\n","Epoch 5/10, Loss: 0.3638\n","Epoch 6/10, Loss: 0.3656\n","Epoch 7/10, Loss: 0.3627\n","Epoch 8/10, Loss: 0.3644\n","Epoch 9/10, Loss: 0.3679\n","Epoch 10/10, Loss: 0.3641\n","Test Accuracy: 0.8571\n","Predicted probabilities for each class: [[1.24795959e-04 1.15025844e-02 2.07139298e-01 2.64985174e-01\n","  3.18069279e-01 1.12337090e-01 7.32068196e-02]\n"," [1.24797036e-04 1.15026282e-02 2.07139730e-01 2.64985859e-01\n","  3.18068832e-01 1.12337843e-01 7.32068792e-02]\n"," [1.24784303e-04 1.15022054e-02 2.07135245e-01 2.64978409e-01\n","  3.18074018e-01 1.12329729e-01 7.32062832e-02]\n"," [1.24796090e-04 1.15025844e-02 2.07139343e-01 2.64985234e-01\n","  3.18069249e-01 1.12337165e-01 7.32068196e-02]\n"," [1.24782629e-04 1.15021504e-02 2.07134679e-01 2.64977515e-01\n","  3.18074673e-01 1.12328708e-01 7.32062012e-02]\n"," [1.24797036e-04 1.15026282e-02 2.07139730e-01 2.64985859e-01\n","  3.18068832e-01 1.12337843e-01 7.32068792e-02]\n"," [1.24786806e-04 1.15022920e-02 2.07136124e-01 2.64979810e-01\n","  3.18073064e-01 1.12331271e-01 7.32064247e-02]\n"," [1.24801794e-04 1.15027372e-02 2.07141340e-01 2.64987558e-01\n","  3.18068564e-01 1.12340525e-01 7.32073337e-02]\n"," [1.24785845e-04 1.15022594e-02 2.07135826e-01 2.64979303e-01\n","  3.18073422e-01 1.12330705e-01 7.32063577e-02]\n"," [1.24800732e-04 1.15026617e-02 2.07141399e-01 2.64987648e-01\n","  3.18067610e-01 1.12340823e-01 7.32070953e-02]\n"," [1.24796439e-04 1.15025956e-02 2.07139462e-01 2.64985412e-01\n","  3.18069130e-01 1.12337381e-01 7.32068196e-02]\n"," [1.24796090e-04 1.15025844e-02 2.07139343e-01 2.64985234e-01\n","  3.18069249e-01 1.12337165e-01 7.32068196e-02]\n"," [1.24780025e-04 1.15020759e-02 2.07133800e-01 2.64976084e-01\n","  3.18075687e-01 1.12327129e-01 7.32060745e-02]\n"," [1.24778715e-04 1.15020219e-02 2.07133308e-01 2.64975339e-01\n","  3.18076223e-01 1.12326309e-01 7.32060075e-02]\n"," [1.24805723e-04 1.15029095e-02 2.07141146e-01 2.64989316e-01\n","  3.18068832e-01 1.12341352e-01 7.32083172e-02]\n"," [1.24803933e-04 1.15028340e-02 2.07141221e-01 2.64988273e-01\n","  3.18068922e-01 1.12340726e-01 7.32079372e-02]\n"," [1.24803933e-04 1.15028676e-02 2.07140356e-01 2.64988422e-01\n","  3.18069518e-01 1.12340428e-01 7.32083172e-02]\n"," [1.24797269e-04 1.15026282e-02 2.07139790e-01 2.64985949e-01\n","  3.18068743e-01 1.12337962e-01 7.32068792e-02]\n"," [1.24793456e-04 1.15024224e-02 2.07138896e-01 2.64984041e-01\n","  3.18069756e-01 1.12336457e-01 7.32066184e-02]\n"," [1.24789411e-04 1.15023786e-02 2.07137093e-01 2.64981359e-01\n","  3.18071991e-01 1.12333000e-01 7.32065737e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139641e-01 2.64985740e-01\n","  3.18068892e-01 1.12337694e-01 7.32068643e-02]\n"," [1.24794184e-04 1.15025202e-02 2.07138702e-01 2.64984280e-01\n","  3.18069905e-01 1.12336181e-01 7.32067525e-02]\n"," [1.24798709e-04 1.15025956e-02 2.07140684e-01 2.64986664e-01\n","  3.18068117e-01 1.12339593e-01 7.32069314e-02]\n"," [1.24798229e-04 1.15026617e-02 2.07140118e-01 2.64986426e-01\n","  3.18068415e-01 1.12338476e-01 7.32069463e-02]\n"," [1.24796788e-04 1.15026068e-02 2.07139567e-01 2.64985621e-01\n","  3.18069011e-01 1.12337574e-01 7.32068643e-02]\n"," [1.24796788e-04 1.15026170e-02 2.07139626e-01 2.64985681e-01\n","  3.18068922e-01 1.12337671e-01 7.32068494e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139671e-01 2.64985710e-01\n","  3.18068892e-01 1.12337716e-01 7.32068643e-02]\n"," [1.24797269e-04 1.15025844e-02 2.07139835e-01 2.64985353e-01\n","  3.18069756e-01 1.12338081e-01 7.32070282e-02]\n"," [1.24797400e-04 1.15025528e-02 2.07140237e-01 2.64986038e-01\n","  3.18068504e-01 1.12338766e-01 7.32068345e-02]\n"," [1.24814658e-04 1.15037132e-02 2.07146108e-01 2.64991701e-01\n","  3.18067878e-01 1.12346984e-01 7.32093081e-02]\n"," [1.24786326e-04 1.15022706e-02 2.07135960e-01 2.64979541e-01\n","  3.18073243e-01 1.12330966e-01 7.32063949e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139671e-01 2.64985740e-01\n","  3.18068892e-01 1.12337746e-01 7.32068643e-02]]\n","Predicted probabilities for each class: [[1.24796090e-04 1.15025844e-02 2.07139343e-01 2.64985293e-01\n","  3.18069249e-01 1.12337187e-01 7.32068196e-02]\n"," [1.24780141e-04 1.15020759e-02 2.07133815e-01 2.64976144e-01\n","  3.18075627e-01 1.12327203e-01 7.32060820e-02]\n"," [1.24814178e-04 1.15036806e-02 2.07145914e-01 2.64991820e-01\n","  3.18067759e-01 1.12346746e-01 7.32091293e-02]\n"," [1.24800368e-04 1.15026617e-02 2.07141310e-01 2.64987469e-01\n","  3.18067729e-01 1.12340622e-01 7.32070580e-02]\n"," [1.24799655e-04 1.15026506e-02 2.07140774e-01 2.64987379e-01\n","  3.18067461e-01 1.12339906e-01 7.32069761e-02]\n"," [1.24800368e-04 1.15027148e-02 2.07140893e-01 2.64987558e-01\n","  3.18067491e-01 1.12340100e-01 7.32070953e-02]\n"," [1.24803933e-04 1.15028014e-02 2.07142249e-01 2.64989674e-01\n","  3.18065852e-01 1.12342499e-01 7.32072368e-02]\n"," [1.24803817e-04 1.15028452e-02 2.07140669e-01 2.64988363e-01\n","  3.18069369e-01 1.12340257e-01 7.32081607e-02]\n"," [1.24795377e-04 1.15025640e-02 2.07139060e-01 2.64984846e-01\n","  3.18069518e-01 1.12336747e-01 7.32067972e-02]\n"," [1.24799175e-04 1.15026832e-02 2.07140401e-01 2.64986962e-01\n","  3.18068057e-01 1.12339064e-01 7.32069761e-02]\n"," [1.24775848e-04 1.15019344e-02 2.07132325e-01 2.64973760e-01\n","  3.18077296e-01 1.12324528e-01 7.32058585e-02]\n"," [1.24797269e-04 1.15026282e-02 2.07139730e-01 2.64985919e-01\n","  3.18068802e-01 1.12337887e-01 7.32068792e-02]\n"," [1.24786093e-04 1.15022706e-02 2.07135886e-01 2.64979422e-01\n","  3.18073332e-01 1.12330846e-01 7.32063949e-02]\n"," [1.24788698e-04 1.15023470e-02 2.07136810e-01 2.64980882e-01\n","  3.18072319e-01 1.12332471e-01 7.32065216e-02]\n"," [1.24799888e-04 1.15026934e-02 2.07140028e-01 2.64986217e-01\n","  3.18070203e-01 1.12338550e-01 7.32076392e-02]\n"," [1.24805723e-04 1.15029095e-02 2.07141310e-01 2.64989227e-01\n","  3.18068743e-01 1.12341307e-01 7.32082427e-02]\n"," [1.24796090e-04 1.15025844e-02 2.07139343e-01 2.64985234e-01\n","  3.18069249e-01 1.12337165e-01 7.32068196e-02]\n"," [1.24797632e-04 1.15026282e-02 2.07139909e-01 2.64986068e-01\n","  3.18068594e-01 1.12338379e-01 7.32069761e-02]\n"," [1.24798229e-04 1.15026617e-02 2.07140028e-01 2.64986396e-01\n","  3.18068475e-01 1.12338431e-01 7.32069165e-02]\n"," [1.24794897e-04 1.15025528e-02 2.07138926e-01 2.64984578e-01\n","  3.18069756e-01 1.12336405e-01 7.32067525e-02]\n"," [1.24800601e-04 1.15026617e-02 2.07141370e-01 2.64987618e-01\n","  3.18067610e-01 1.12340756e-01 7.32070804e-02]\n"," [1.24794897e-04 1.15024662e-02 2.07139298e-01 2.64984906e-01\n","  3.18069041e-01 1.12337187e-01 7.32066855e-02]\n"," [1.24798942e-04 1.15026720e-02 2.07140326e-01 2.64986724e-01\n","  3.18068147e-01 1.12339117e-01 7.32070580e-02]\n"," [1.24799422e-04 1.15026506e-02 2.07140669e-01 2.64986575e-01\n","  3.18068802e-01 1.12339504e-01 7.32071251e-02]\n"," [1.24785613e-04 1.15022594e-02 2.07135737e-01 2.64979213e-01\n","  3.18073481e-01 1.12330608e-01 7.32063577e-02]\n"," [1.24789658e-04 1.15023786e-02 2.07137123e-01 2.64981419e-01\n","  3.18071932e-01 1.12333074e-01 7.32065886e-02]\n"," [1.24798942e-04 1.15026282e-02 2.07140595e-01 2.64986455e-01\n","  3.18068773e-01 1.12339377e-01 7.32070804e-02]\n"," [1.24795843e-04 1.15025844e-02 2.07139298e-01 2.64985144e-01\n","  3.18069309e-01 1.12337068e-01 7.32068196e-02]\n"," [1.24814658e-04 1.15037346e-02 2.07146302e-01 2.64991194e-01\n","  3.18068087e-01 1.12347230e-01 7.32095167e-02]\n"," [1.24796687e-04 1.15026068e-02 2.07139522e-01 2.64985591e-01\n","  3.18069041e-01 1.12337530e-01 7.32068494e-02]\n"," [1.24793223e-04 1.15024559e-02 2.07138523e-01 2.64983743e-01\n","  3.18070024e-01 1.12335868e-01 7.32066855e-02]\n"," [1.24791797e-04 1.15024447e-02 2.07137853e-01 2.64982551e-01\n","  3.18071157e-01 1.12334348e-01 7.32066855e-02]]\n","Predicted probabilities for each class: [[4.36664641e-01 4.22765225e-01 4.58146632e-01 4.77859139e-01\n","  4.79940921e-01 4.43838358e-01 4.19065386e-01]\n"," [1.24793456e-04 1.15024978e-02 2.07138479e-01 2.64983743e-01\n","  3.18070292e-01 1.12335525e-01 7.32067153e-02]\n"," [1.24802027e-04 1.15027372e-02 2.07141504e-01 2.64987886e-01\n","  3.18067998e-01 1.12340972e-01 7.32072741e-02]\n"," [1.24779894e-04 1.15020648e-02 2.07133740e-01 2.64975995e-01\n","  3.18075716e-01 1.12327069e-01 7.32060745e-02]\n"," [1.24798942e-04 1.15025956e-02 2.07140774e-01 2.64986932e-01\n","  3.18067819e-01 1.12339742e-01 7.32069016e-02]\n"," [1.24795479e-04 1.15024876e-02 2.07139567e-01 2.64985144e-01\n","  3.18068951e-01 1.12337671e-01 7.32067004e-02]\n"," [1.24796556e-04 1.15026068e-02 2.07139522e-01 2.64985532e-01\n","  3.18069071e-01 1.12337478e-01 7.32068494e-02]\n"," [1.24796323e-04 1.15025956e-02 2.07139462e-01 2.64985412e-01\n","  3.18069130e-01 1.12337336e-01 7.32068345e-02]\n"," [1.24780854e-04 1.15020974e-02 2.07134083e-01 2.64976561e-01\n","  3.18075329e-01 1.12327658e-01 7.32061043e-02]\n"," [1.24796323e-04 1.15025956e-02 2.07139388e-01 2.64985353e-01\n","  3.18069190e-01 1.12337261e-01 7.32068196e-02]\n"," [1.24796323e-04 1.15025956e-02 2.07139462e-01 2.64985412e-01\n","  3.18069130e-01 1.12337336e-01 7.32068345e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139701e-01 2.64985770e-01\n","  3.18068862e-01 1.12337962e-01 7.32069314e-02]\n"," [1.24803933e-04 1.15028340e-02 2.07141384e-01 2.64988422e-01\n","  3.18068802e-01 1.12340972e-01 7.32079148e-02]\n"," [1.24782629e-04 1.15021504e-02 2.07134679e-01 2.64977515e-01\n","  3.18074673e-01 1.12328708e-01 7.32062012e-02]\n"," [1.24791331e-04 1.15024336e-02 2.07137704e-01 2.64982551e-01\n","  3.18071127e-01 1.12334207e-01 7.32065886e-02]\n"," [1.24805360e-04 1.15028890e-02 2.07141429e-01 2.64989078e-01\n","  3.18068683e-01 1.12341307e-01 7.32081383e-02]\n"," [1.24788698e-04 1.15023470e-02 2.07136810e-01 2.64980882e-01\n","  3.18072319e-01 1.12332471e-01 7.32065216e-02]\n"," [1.24794533e-04 1.15025304e-02 2.07138821e-01 2.64984429e-01\n","  3.18069816e-01 1.12336278e-01 7.32067525e-02]\n"," [1.24806320e-04 1.15029318e-02 2.07141310e-01 2.64989614e-01\n","  3.18068624e-01 1.12341739e-01 7.32083693e-02]\n"," [1.24785845e-04 1.15022594e-02 2.07135826e-01 2.64979303e-01\n","  3.18073422e-01 1.12330705e-01 7.32063577e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139671e-01 2.64985740e-01\n","  3.18068892e-01 1.12337746e-01 7.32068643e-02]\n"," [1.24782280e-04 1.15021411e-02 2.07134515e-01 2.64977247e-01\n","  3.18074852e-01 1.12328403e-01 7.32061863e-02]\n"," [1.24803701e-04 1.15028452e-02 2.07140595e-01 2.64988363e-01\n","  3.18069339e-01 1.12340234e-01 7.32081607e-02]\n"," [1.24799291e-04 1.15026832e-02 2.07140461e-01 2.64986992e-01\n","  3.18067968e-01 1.12339377e-01 7.32070804e-02]\n"," [1.24784186e-04 1.15022054e-02 2.07135201e-01 2.64978379e-01\n","  3.18074077e-01 1.12329654e-01 7.32062832e-02]\n"," [1.24784419e-04 1.15022054e-02 2.07135290e-01 2.64978468e-01\n","  3.18073988e-01 1.12329803e-01 7.32062981e-02]\n"," [1.24779428e-04 1.15020424e-02 2.07133532e-01 2.64975667e-01\n","  3.18075955e-01 1.12326659e-01 7.32060373e-02]\n"," [1.24798942e-04 1.15026720e-02 2.07140326e-01 2.64986724e-01\n","  3.18068177e-01 1.12339042e-01 7.32070282e-02]\n"," [1.24798942e-04 1.15026506e-02 2.07140401e-01 2.64986217e-01\n","  3.18069279e-01 1.12339020e-01 7.32071400e-02]\n"," [1.24786806e-04 1.15022818e-02 2.07136109e-01 2.64979780e-01\n","  3.18073064e-01 1.12331219e-01 7.32064247e-02]\n"," [1.24797269e-04 1.15025528e-02 2.07140192e-01 2.64985949e-01\n","  3.18068594e-01 1.12338744e-01 7.32068494e-02]\n"," [1.24782760e-04 1.15021616e-02 2.07134753e-01 2.64977634e-01\n","  3.18074584e-01 1.12328872e-01 7.32062161e-02]]\n","Predicted probabilities for each class: [[1.24795130e-04 1.15025640e-02 2.07139060e-01 2.64984727e-01\n","  3.18069637e-01 1.12336576e-01 7.32068196e-02]\n"," [1.24794897e-04 1.15024764e-02 2.07139343e-01 2.64984459e-01\n","  3.18069756e-01 1.12337217e-01 7.32067972e-02]\n"," [1.24782993e-04 1.15021616e-02 2.07134873e-01 2.64977783e-01\n","  3.18074465e-01 1.12329021e-01 7.32062310e-02]\n"," [1.24804414e-04 1.15028676e-02 2.07140729e-01 2.64988631e-01\n","  3.18069220e-01 1.12340569e-01 7.32082203e-02]\n"," [1.24805243e-04 1.15031600e-02 2.07143068e-01 2.64991313e-01\n","  3.18066746e-01 1.12342522e-01 7.32068643e-02]\n"," [1.24780738e-04 1.15020974e-02 2.07134023e-01 2.64976472e-01\n","  3.18075389e-01 1.12327561e-01 7.32061341e-02]\n"," [1.24805127e-04 1.15029002e-02 2.07140774e-01 2.64989048e-01\n","  3.18069071e-01 1.12341136e-01 7.32083544e-02]\n"," [1.24799888e-04 1.15026506e-02 2.07141057e-01 2.64987111e-01\n","  3.18068087e-01 1.12340197e-01 7.32070804e-02]\n"," [1.24793456e-04 1.15025090e-02 2.07138479e-01 2.64983594e-01\n","  3.18070441e-01 1.12335503e-01 7.32067823e-02]\n"," [1.24789309e-04 1.15023684e-02 2.07137033e-01 2.64981240e-01\n","  3.18072051e-01 1.12332873e-01 7.32065737e-02]\n"," [1.24796919e-04 1.15025751e-02 2.07139835e-01 2.64985830e-01\n","  3.18068534e-01 1.12338223e-01 7.32068792e-02]\n"," [1.24788348e-04 1.15023358e-02 2.07136676e-01 2.64980674e-01\n","  3.18072468e-01 1.12332232e-01 7.32065067e-02]\n"," [1.24782993e-04 1.15021616e-02 2.07134873e-01 2.64977783e-01\n","  3.18074465e-01 1.12329021e-01 7.32062310e-02]\n"," [1.24800601e-04 1.15026617e-02 2.07141370e-01 2.64987618e-01\n","  3.18067610e-01 1.12340756e-01 7.32070804e-02]\n"," [1.24812868e-04 1.15031702e-02 2.07143068e-01 2.64993399e-01\n","  3.18065971e-01 1.12345979e-01 7.32085109e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139671e-01 2.64985740e-01\n","  3.18068892e-01 1.12337746e-01 7.32068643e-02]\n"," [1.24786093e-04 1.15022706e-02 2.07135886e-01 2.64979422e-01\n","  3.18073332e-01 1.12330846e-01 7.32063949e-02]\n"," [1.24798709e-04 1.15026720e-02 2.07140237e-01 2.64986724e-01\n","  3.18068236e-01 1.12338804e-01 7.32069612e-02]\n"," [1.24795959e-04 1.15025844e-02 2.07139298e-01 2.64985234e-01\n","  3.18069279e-01 1.12337120e-01 7.32068196e-02]\n"," [1.24805607e-04 1.15029095e-02 2.07141146e-01 2.64989287e-01\n","  3.18068832e-01 1.12341329e-01 7.32083023e-02]\n"," [1.24798709e-04 1.15026720e-02 2.07140237e-01 2.64986575e-01\n","  3.18068326e-01 1.12338744e-01 7.32069761e-02]\n"," [1.24765618e-04 1.15015991e-02 2.07128763e-01 2.64968067e-01\n","  3.18081290e-01 1.12318181e-01 7.32053444e-02]\n"," [1.24800368e-04 1.15026506e-02 2.07141221e-01 2.64987409e-01\n","  3.18067670e-01 1.12340525e-01 7.32070431e-02]\n"," [1.24779661e-04 1.15020536e-02 2.07133636e-01 2.64975876e-01\n","  3.18075836e-01 1.12326853e-01 7.32060745e-02]\n"," [1.24795843e-04 1.15025844e-02 2.07139298e-01 2.64985144e-01\n","  3.18069309e-01 1.12337068e-01 7.32068196e-02]\n"," [1.24799655e-04 1.15026282e-02 2.07141012e-01 2.64987200e-01\n","  3.18067759e-01 1.12340175e-01 7.32069761e-02]\n"," [1.24799291e-04 1.15026282e-02 2.07140729e-01 2.64987260e-01\n","  3.18067491e-01 1.12339765e-01 7.32069612e-02]\n"," [1.24800368e-04 1.15026720e-02 2.07141057e-01 2.64987171e-01\n","  3.18068236e-01 1.12340219e-01 7.32071400e-02]\n"," [1.24782629e-04 1.15021504e-02 2.07134679e-01 2.64977515e-01\n","  3.18074673e-01 1.12328708e-01 7.32062012e-02]\n"," [1.24799059e-04 1.15026068e-02 2.07140818e-01 2.64987022e-01\n","  3.18067789e-01 1.12339839e-01 7.32069016e-02]\n"," [1.24785613e-04 1.15022482e-02 2.07135692e-01 2.64979154e-01\n","  3.18073541e-01 1.12330534e-01 7.32063577e-02]\n"," [1.24806800e-04 1.15029644e-02 2.07140982e-01 2.64989972e-01\n","  3.18068385e-01 1.12342209e-01 7.32083321e-02]]\n","Predicted probabilities for each class: [[1.24784419e-04 1.15022054e-02 2.07135335e-01 2.64978528e-01\n","  3.18073958e-01 1.12329848e-01 7.32062981e-02]\n"," [1.24796439e-04 1.15025956e-02 2.07139418e-01 2.64985412e-01\n","  3.18069130e-01 1.12337358e-01 7.32068345e-02]\n"," [1.24797400e-04 1.15025528e-02 2.07140237e-01 2.64986008e-01\n","  3.18068504e-01 1.12338766e-01 7.32068494e-02]\n"," [1.24790618e-04 1.15024112e-02 2.07137451e-01 2.64981925e-01\n","  3.18071574e-01 1.12333655e-01 7.32066408e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139686e-01 2.64985830e-01\n","  3.18068862e-01 1.12337813e-01 7.32068792e-02]\n"," [1.24787519e-04 1.15023144e-02 2.07136348e-01 2.64980197e-01\n","  3.18072796e-01 1.12331726e-01 7.32064620e-02]\n"," [1.24781087e-04 1.15021085e-02 2.07134143e-01 2.64976650e-01\n","  3.18075269e-01 1.12327754e-01 7.32061341e-02]\n"," [1.24783473e-04 1.15021840e-02 2.07135022e-01 2.64978051e-01\n","  3.18074316e-01 1.12329297e-01 7.32062459e-02]\n"," [1.24795843e-04 1.15025751e-02 2.07139283e-01 2.64985114e-01\n","  3.18069309e-01 1.12337045e-01 7.32068196e-02]\n"," [1.24799655e-04 1.15026617e-02 2.07140684e-01 2.64986634e-01\n","  3.18068892e-01 1.12339549e-01 7.32071549e-02]\n"," [1.24786326e-04 1.15022706e-02 2.07135960e-01 2.64979541e-01\n","  3.18073243e-01 1.12330966e-01 7.32063949e-02]\n"," [1.24803584e-04 1.15028238e-02 2.07141146e-01 2.64988184e-01\n","  3.18069041e-01 1.12340599e-01 7.32079372e-02]\n"," [1.24782528e-04 1.15021504e-02 2.07134649e-01 2.64977485e-01\n","  3.18074703e-01 1.12328678e-01 7.32062012e-02]\n"," [1.24796788e-04 1.15026068e-02 2.07139581e-01 2.64985561e-01\n","  3.18069011e-01 1.12337530e-01 7.32068792e-02]\n"," [1.24799772e-04 1.15026934e-02 2.07140028e-01 2.64986247e-01\n","  3.18070203e-01 1.12338550e-01 7.32076392e-02]\n"," [1.24781684e-04 1.15021188e-02 2.07134306e-01 2.64976948e-01\n","  3.18075061e-01 1.12328090e-01 7.32061490e-02]\n"," [1.24799175e-04 1.15026282e-02 2.07140684e-01 2.64986575e-01\n","  3.18068594e-01 1.12339549e-01 7.32070580e-02]\n"," [1.24785380e-04 1.15022380e-02 2.07135662e-01 2.64979035e-01\n","  3.18073601e-01 1.12330429e-01 7.32063279e-02]\n"," [1.24799175e-04 1.15026068e-02 2.07140818e-01 2.64987022e-01\n","  3.18067759e-01 1.12339817e-01 7.32069016e-02]\n"," [1.24796439e-04 1.15025956e-02 2.07139462e-01 2.64985442e-01\n","  3.18069130e-01 1.12337381e-01 7.32068345e-02]\n"," [1.24801678e-04 1.15027586e-02 2.07141340e-01 2.64988273e-01\n","  3.18067014e-01 1.12340897e-01 7.32071772e-02]\n"," [1.24794184e-04 1.15025304e-02 2.07138702e-01 2.64984220e-01\n","  3.18069965e-01 1.12336010e-01 7.32067376e-02]\n"," [1.24797865e-04 1.15025640e-02 2.07140326e-01 2.64986575e-01\n","  3.18067878e-01 1.12339064e-01 7.32068196e-02]\n"," [1.24794664e-04 1.15024764e-02 2.07139134e-01 2.64984757e-01\n","  3.18069190e-01 1.12337001e-01 7.32067153e-02]\n"," [1.24802391e-04 1.15027810e-02 2.07140774e-01 2.64987528e-01\n","  3.18069398e-01 1.12339959e-01 7.32078329e-02]\n"," [1.24770973e-04 1.15017723e-02 2.07130611e-01 2.64971018e-01\n","  3.18079203e-01 1.12321474e-01 7.32056201e-02]\n"," [1.24800965e-04 1.15026617e-02 2.07141444e-01 2.64987975e-01\n","  3.18067133e-01 1.12340994e-01 7.32070282e-02]\n"," [1.24804777e-04 1.15029095e-02 2.07140431e-01 2.64989376e-01\n","  3.18068415e-01 1.12341285e-01 7.32079446e-02]\n"," [1.24795610e-04 1.15025751e-02 2.07139239e-01 2.64985055e-01\n","  3.18069398e-01 1.12336949e-01 7.32067972e-02]\n"," [1.24797152e-04 1.15026170e-02 2.07139686e-01 2.64985740e-01\n","  3.18068862e-01 1.12337939e-01 7.32069314e-02]\n"," [1.24797749e-04 1.15026170e-02 2.07139835e-01 2.64985234e-01\n","  3.18070263e-01 1.12337910e-01 7.32072219e-02]\n"," [1.24794897e-04 1.15025528e-02 2.07138926e-01 2.64984578e-01\n","  3.18069696e-01 1.12336434e-01 7.32067674e-02]]\n","Predicted probabilities for each class: [[1.24799655e-04 1.15026282e-02 2.07140982e-01 2.64987469e-01\n","  3.18067312e-01 1.12340175e-01 7.32069165e-02]\n"," [1.24804181e-04 1.15028126e-02 2.07142308e-01 2.64989763e-01\n","  3.18065792e-01 1.12342618e-01 7.32072517e-02]\n"," [1.24780854e-04 1.15020974e-02 2.07134083e-01 2.64976561e-01\n","  3.18075329e-01 1.12327658e-01 7.32061043e-02]\n"," [1.24794897e-04 1.15025528e-02 2.07138926e-01 2.64984578e-01\n","  3.18069696e-01 1.12336405e-01 7.32067972e-02]\n"," [1.24782629e-04 1.15021504e-02 2.07134679e-01 2.64977515e-01\n","  3.18074673e-01 1.12328708e-01 7.32062012e-02]\n"," [1.24796090e-04 1.15025844e-02 2.07139298e-01 2.64985234e-01\n","  3.18069249e-01 1.12337165e-01 7.32068196e-02]\n"," [1.24800834e-04 1.15027372e-02 2.07140982e-01 2.64987767e-01\n","  3.18067431e-01 1.12340257e-01 7.32071400e-02]\n"," [1.24794766e-04 1.15024662e-02 2.07139254e-01 2.64984936e-01\n","  3.18069011e-01 1.12337142e-01 7.32066557e-02]\n"," [1.24797632e-04 1.15026170e-02 2.07139999e-01 2.64986128e-01\n","  3.18068445e-01 1.12338528e-01 7.32069314e-02]\n"," [1.24790851e-04 1.15024112e-02 2.07137540e-01 2.64982224e-01\n","  3.18071336e-01 1.12333916e-01 7.32066035e-02]\n"," [1.24797036e-04 1.15026282e-02 2.07139730e-01 2.64985830e-01\n","  3.18068862e-01 1.12337813e-01 7.32068792e-02]\n"," [1.24805360e-04 1.15029002e-02 2.07140997e-01 2.64989167e-01\n","  3.18068922e-01 1.12341233e-01 7.32083172e-02]\n"," [1.24802027e-04 1.15027586e-02 2.07141340e-01 2.64987528e-01\n","  3.18068743e-01 1.12340502e-01 7.32074678e-02]\n"," [1.24802755e-04 1.15027912e-02 2.07140997e-01 2.64987797e-01\n","  3.18069190e-01 1.12340257e-01 7.32078552e-02]\n"," [1.24799888e-04 1.15026720e-02 2.07140729e-01 2.64986724e-01\n","  3.18068892e-01 1.12339593e-01 7.32071772e-02]\n"," [1.24800368e-04 1.15026506e-02 2.07141221e-01 2.64987439e-01\n","  3.18067670e-01 1.12340569e-01 7.32070431e-02]\n"," [1.24797269e-04 1.15026282e-02 2.07139730e-01 2.64985919e-01\n","  3.18068802e-01 1.12337887e-01 7.32068792e-02]\n"," [1.24795479e-04 1.15025640e-02 2.07139179e-01 2.64984965e-01\n","  3.18069458e-01 1.12336844e-01 7.32067972e-02]\n"," [1.24791331e-04 1.15024112e-02 2.07137719e-01 2.64982641e-01\n","  3.18070978e-01 1.12334527e-01 7.32066408e-02]\n"," [1.24784186e-04 1.15021951e-02 2.07135201e-01 2.64978379e-01\n","  3.18074077e-01 1.12329654e-01 7.32062832e-02]\n"," [1.24784070e-04 1.15021951e-02 2.07135186e-01 2.64978290e-01\n","  3.18074137e-01 1.12329587e-01 7.32062832e-02]\n"," [1.24797036e-04 1.15026170e-02 2.07139701e-01 2.64985830e-01\n","  3.18068862e-01 1.12337813e-01 7.32068792e-02]\n"," [1.24800732e-04 1.15027484e-02 2.07139507e-01 2.64986724e-01\n","  3.18070531e-01 1.12338431e-01 7.32080489e-02]\n"," [1.24795130e-04 1.15024876e-02 2.07139418e-01 2.64984578e-01\n","  3.18069726e-01 1.12337336e-01 7.32067972e-02]\n"," [1.24781567e-04 1.15021188e-02 2.07134306e-01 2.64976948e-01\n","  3.18075061e-01 1.12328090e-01 7.32061490e-02]\n"," [1.24800834e-04 1.15027148e-02 2.07140952e-01 2.64986992e-01\n","  3.18069011e-01 1.12339884e-01 7.32073039e-02]\n"," [1.24782280e-04 1.15021411e-02 2.07134515e-01 2.64977247e-01\n","  3.18074852e-01 1.12328403e-01 7.32061863e-02]\n"," [1.24799539e-04 1.15026506e-02 2.07140684e-01 2.64986634e-01\n","  3.18068743e-01 1.12339571e-01 7.32071251e-02]\n"," [1.24789309e-04 1.15023684e-02 2.07137033e-01 2.64981240e-01\n","  3.18072051e-01 1.12332873e-01 7.32065737e-02]\n"," [1.24813465e-04 1.15036368e-02 2.07145676e-01 2.64991969e-01\n","  3.18067640e-01 1.12346470e-01 7.32089505e-02]\n"," [1.24806320e-04 1.15029318e-02 2.07141638e-01 2.64989614e-01\n","  3.18068445e-01 1.12341836e-01 7.32082427e-02]\n"," [1.24799655e-04 1.15026934e-02 2.07140610e-01 2.64987171e-01\n","  3.18067819e-01 1.12339623e-01 7.32070953e-02]]\n","Predicted probabilities for each class: [[1.24788348e-04 1.15023358e-02 2.07136676e-01 2.64980674e-01\n","  3.18072468e-01 1.12332232e-01 7.32065067e-02]\n"," [1.24794766e-04 1.15025416e-02 2.07138896e-01 2.64984578e-01\n","  3.18069756e-01 1.12336405e-01 7.32067674e-02]\n"," [1.24782629e-04 1.15021504e-02 2.07134679e-01 2.64977515e-01\n","  3.18074673e-01 1.12328708e-01 7.32062012e-02]\n"," [1.24785380e-04 1.15022380e-02 2.07135662e-01 2.64979035e-01\n","  3.18073601e-01 1.12330429e-01 7.32063279e-02]\n"," [1.24800135e-04 1.15026394e-02 2.07141176e-01 2.64987618e-01\n","  3.18067372e-01 1.12340525e-01 7.32069761e-02]\n"," [1.24792045e-04 1.15024559e-02 2.07137987e-01 2.64982849e-01\n","  3.18070918e-01 1.12334676e-01 7.32066855e-02]\n"," [1.24796439e-04 1.15026068e-02 2.07139462e-01 2.64985383e-01\n","  3.18069130e-01 1.12337336e-01 7.32068643e-02]\n"," [1.24800368e-04 1.15026394e-02 2.07141221e-01 2.64987618e-01\n","  3.18067342e-01 1.12340525e-01 7.32069761e-02]\n"," [1.24796556e-04 1.15026068e-02 2.07139537e-01 2.64985591e-01\n","  3.18069011e-01 1.12337552e-01 7.32068494e-02]\n"," [1.24806917e-04 1.15029644e-02 2.07141176e-01 2.64989972e-01\n","  3.18068534e-01 1.12342231e-01 7.32084960e-02]\n"," [1.24796687e-04 1.15026068e-02 2.07139567e-01 2.64985621e-01\n","  3.18069011e-01 1.12337552e-01 7.32068643e-02]\n"," [1.24796323e-04 1.15025956e-02 2.07139418e-01 2.64985353e-01\n","  3.18069190e-01 1.12337261e-01 7.32068196e-02]\n"," [1.24796556e-04 1.15025202e-02 2.07139954e-01 2.64985830e-01\n","  3.18068415e-01 1.12338312e-01 7.32067674e-02]\n"," [1.24794664e-04 1.15025528e-02 2.07138896e-01 2.64984518e-01\n","  3.18069756e-01 1.12336345e-01 7.32067674e-02]\n"," [1.24801081e-04 1.15026934e-02 2.07141340e-01 2.64987558e-01\n","  3.18067998e-01 1.12340644e-01 7.32071772e-02]\n"," [1.24795130e-04 1.15025528e-02 2.07139015e-01 2.64984757e-01\n","  3.18069607e-01 1.12336598e-01 7.32067674e-02]\n"," [1.24796323e-04 1.15025956e-02 2.07139462e-01 2.64985293e-01\n","  3.18069190e-01 1.12337336e-01 7.32068792e-02]\n"," [1.24785249e-04 1.15022380e-02 2.07135618e-01 2.64979005e-01\n","  3.18073630e-01 1.12330377e-01 7.32063279e-02]]\n"]}]},{"cell_type":"markdown","source":["##GRNN 프로토 완성"],"metadata":{"id":"Q-oenkAqk9BL"}},{"cell_type":"code","source":["import base64\n","import pickle\n","import networkx as nx\n","import pandas as pd\n","from torch_geometric.data import Data\n","from torch_geometric.utils import from_networkx\n","import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import MessagePassing, global_mean_pool\n","import torch.nn as nn\n","from torch_geometric.loader import DataLoader\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MultiLabelBinarizer\n","\n","# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 취약점 컬럼을 리스트로 변환\n","df['Vul'] = df['Vul'].apply(eval)\n","\n","# 멀티라벨 바이너리 인코딩\n","mlb = MultiLabelBinarizer()\n","labels = mlb.fit_transform(df['Vul'])\n","\n","# 각 취약점 클래스 확인\n","print(mlb.classes_)\n","\n","graph_list = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    # PyTorch Geometric의 Data 객체 생성\n","    data = from_networkx(graph)\n","    data.x = torch.ones((data.num_nodes, 1))  # 노드 특징 행렬 설정\n","    data.y = torch.tensor(label, dtype=torch.float32)  # 멀티라벨 설정\n","    graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, test_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)\n","\n","class GRNN(MessagePassing):\n","    def __init__(self, in_channels, out_channels):\n","        super(GRNN, self).__init__(aggr='add')  # 'add', 'mean', 'max' 등 선택 가능\n","        self.lin = torch.nn.Linear(in_channels, out_channels)\n","        self.gru = nn.GRU(out_channels, out_channels)\n","\n","    def forward(self, x, edge_index):\n","        # 메시지 패싱을 위한 초기화\n","        x = self.lin(x)\n","        return self.propagate(edge_index, x=x)\n","\n","    def message(self, x_j):\n","        # 각 이웃 노드의 메시지를 정의\n","        return x_j\n","\n","    def update(self, aggr_out, x):\n","        # 메시지를 모아서 업데이트\n","        aggr_out = aggr_out.unsqueeze(0)  # GRU의 입력 형식에 맞게 변환\n","        x = x.unsqueeze(0)\n","        out, _ = self.gru(aggr_out, x)  # GRU 업데이트\n","        return out.squeeze(0)\n","\n","# 모델 초기화\n","in_channels = 1  # 노드 특징 행렬의 차원\n","out_channels = 128  # 임의로 설정, 조정 가능\n","\n","class GRNNClassifier(nn.Module):\n","    def __init__(self, in_channels, hidden_channels, num_classes):\n","        super(GRNNClassifier, self).__init__()\n","        self.grnn = GRNN(in_channels, hidden_channels)\n","        self.classifier = nn.Linear(hidden_channels, num_classes)\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        x = self.grnn(x, edge_index)\n","        x = global_mean_pool(x, batch)  # 각 그래프에 대한 고정된 크기의 출력 생성\n","        x = F.relu(x)\n","        x = F.dropout(x, training=self.training)\n","        x = self.classifier(x)\n","        return x\n","\n","num_classes = len(mlb.classes_)\n","model = GRNNClassifier(in_channels=in_channels, hidden_channels=out_channels, num_classes=num_classes)\n","\n","# 하이퍼파라미터 설정\n","learning_rate = 0.01\n","epochs = 10\n","batch_size = 32\n","\n","# 데이터 로더 생성\n","train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=False)\n","\n","# 옵티마이저 및 손실 함수 설정\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","loss_fn = torch.nn.BCEWithLogitsLoss()  # 멀티라벨 분류용 손실 함수\n","\n","# 훈련 루프\n","for epoch in range(epochs):\n","    model.train()\n","    total_loss = 0\n","    for data in train_loader:\n","        optimizer.zero_grad()\n","        out = model(data)\n","        if out.shape != data.y.shape:\n","            data.y = data.y.view(out.shape)\n","        loss = loss_fn(out, data.y)  # 멀티라벨 손실 계산\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item()\n","\n","    avg_loss = total_loss / len(train_loader)\n","    print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}')\n","\n","# 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in test_loader:\n","        out = model(data)\n","        if out.shape != data.y.shape:\n","            data.y = data.y.view(out.shape)\n","        pred = (torch.sigmoid(out) > 0.5).float()\n","        correct += (pred == data.y).sum().item()\n","        total += data.y.numel()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')\n","\n","# 각 클래스에 대한 취약점 확률 예측\n","model.eval()\n","with torch.no_grad():\n","    for data in test_loader:\n","        out = model(data)\n","        probabilities = torch.sigmoid(out).cpu().numpy()  # 각 클래스에 대한 확률 값 출력\n","        print(f'Predicted probabilities for each class: {probabilities}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PZtyBDsyn-g9","executionInfo":{"status":"ok","timestamp":1717343315758,"user_tz":-540,"elapsed":553253,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"166308ec-3d5b-4790-f36d-7fac95884558"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['BN' 'OF' 'RE' 'SE' 'TP' 'UC']\n","Epoch 1/10, Loss: 0.5392\n","Epoch 2/10, Loss: 0.5179\n","Epoch 3/10, Loss: 0.5185\n","Epoch 4/10, Loss: 0.5183\n","Epoch 5/10, Loss: 0.5151\n","Epoch 6/10, Loss: 0.5211\n","Epoch 7/10, Loss: 0.5160\n","Epoch 8/10, Loss: 0.5139\n","Epoch 9/10, Loss: 0.5141\n","Epoch 10/10, Loss: 0.5201\n","Test Accuracy: 0.7968\n","Predicted probabilities for each class: [[0.23147187 0.32905424 0.31315023 0.12056649 0.09136944 0.31086758]\n"," [0.23146993 0.3290541  0.31315023 0.12056439 0.09136512 0.31086773]\n"," [0.23149139 0.32905567 0.31315002 0.12058794 0.09141293 0.3108662 ]\n"," [0.23147172 0.32905424 0.31315023 0.1205663  0.09136903 0.3108676 ]\n"," [0.231494   0.32905585 0.31314996 0.12059079 0.09141874 0.31086603]\n"," [0.23146993 0.3290541  0.31315023 0.12056439 0.09136512 0.31086773]\n"," [0.23148732 0.32905537 0.31315005 0.12058347 0.09140383 0.3108665 ]\n"," [0.23146418 0.32905298 0.31315067 0.12055805 0.09135251 0.3108684 ]\n"," [0.23148885 0.3290555  0.31315005 0.12058514 0.09140725 0.31086642]\n"," [0.23146203 0.32905304 0.31315032 0.12055583 0.09134796 0.3108682 ]\n"," [0.23147118 0.32905418 0.31315023 0.12056573 0.09136783 0.31086764]\n"," [0.23147172 0.32905424 0.31315023 0.12056629 0.09136903 0.3108676 ]\n"," [0.23149814 0.3290561  0.31314993 0.12059528 0.09142786 0.31086576]\n"," [0.23150036 0.3290563  0.3131499  0.12059773 0.09143285 0.31086558]\n"," [0.23146504 0.3290528  0.31315112 0.12055928 0.09135465 0.31086898]\n"," [0.23146555 0.3290529  0.31315103 0.1205596  0.09135542 0.31086874]\n"," [0.23146786 0.32905322 0.3131511  0.12056242 0.09136084 0.31086883]\n"," [0.23146965 0.32905406 0.31315026 0.12056406 0.09136445 0.31086773]\n"," [0.23147266 0.32905412 0.31315    0.12056763 0.09137175 0.31086728]\n"," [0.23148283 0.32905504 0.3131501  0.12057859 0.09139386 0.3108668 ]\n"," [0.23147029 0.32905412 0.31315023 0.12056478 0.0913659  0.31086767]\n"," [0.23147424 0.32905453 0.31315005 0.1205691  0.09137472 0.31086725]\n"," [0.23146486 0.32905337 0.31315014 0.12055898 0.09135433 0.31086785]\n"," [0.23146833 0.32905397 0.31315026 0.12056264 0.09136159 0.31086782]\n"," [0.23147066 0.32905415 0.31315023 0.12056517 0.0913667  0.31086767]\n"," [0.23147036 0.32905412 0.31315023 0.12056486 0.0913661  0.31086767]\n"," [0.23147036 0.32905415 0.31315023 0.12056488 0.0913661  0.3108677 ]\n"," [0.2314699  0.32905346 0.31315044 0.12056436 0.09136536 0.31086785]\n"," [0.23146686 0.32905358 0.31315008 0.12056123 0.09135886 0.31086767]\n"," [0.23146257 0.32905224 0.313152   0.12055787 0.09134841 0.31087017]\n"," [0.2314881  0.3290554  0.31315005 0.12058435 0.09140562 0.31086645]\n"," [0.23147015 0.32905412 0.31315023 0.12056464 0.09136565 0.3108677 ]]\n","Predicted probabilities for each class: [[0.23147158 0.32905418 0.31315023 0.1205662  0.09136882 0.3108676 ]\n"," [0.23149797 0.3290561  0.31314993 0.12059514 0.09142756 0.31086576]\n"," [0.23146231 0.32905224 0.3131519  0.12055755 0.09134782 0.3108701 ]\n"," [0.23146254 0.32905307 0.3131503  0.12055638 0.09134911 0.31086814]\n"," [0.23146418 0.32905385 0.3131501  0.12055826 0.09135249 0.3108679 ]\n"," [0.2314642  0.32905406 0.31315002 0.12055815 0.0913523  0.31086782]\n"," [0.23145764 0.32905355 0.31315017 0.1205511  0.09133788 0.31086838]\n"," [0.23146755 0.32905293 0.31315106 0.12056195 0.09136017 0.31086868]\n"," [0.23147276 0.32905436 0.3131501  0.12056744 0.09137138 0.31086743]\n"," [0.23146668 0.3290539  0.31315017 0.12056088 0.09135795 0.31086788]\n"," [0.2315049  0.3290566  0.31314984 0.12060267 0.09144294 0.31086528]\n"," [0.2314698  0.3290541  0.31315023 0.12056428 0.09136486 0.31086773]\n"," [0.2314885  0.32905546 0.31315005 0.12058472 0.09140644 0.31086642]\n"," [0.23148431 0.32905513 0.31315008 0.12058014 0.09139711 0.3108667 ]\n"," [0.23147087 0.32905337 0.31315085 0.12056539 0.09136727 0.31086823]\n"," [0.23146492 0.32905275 0.31315112 0.12055904 0.09135424 0.31086892]\n"," [0.23147172 0.32905424 0.31315023 0.1205663  0.09136903 0.3108676 ]\n"," [0.23146869 0.32905436 0.31314996 0.12056303 0.09136229 0.3108675 ]\n"," [0.23146833 0.32905397 0.31315026 0.12056267 0.09136159 0.31086782]\n"," [0.23147362 0.32905436 0.31315017 0.12056844 0.09137338 0.31086743]\n"," [0.2314621  0.32905304 0.3131503  0.12055591 0.09134814 0.31086817]\n"," [0.23147069 0.3290541  0.31315002 0.12056546 0.09136726 0.31086743]\n"," [0.2314668  0.3290542  0.31315    0.12056093 0.09135806 0.31086764]\n"," [0.23146608 0.3290532  0.3131504  0.12056021 0.09135694 0.31086808]\n"," [0.2314891  0.3290555  0.31315005 0.12058541 0.0914078  0.3108664 ]\n"," [0.23148265 0.32905504 0.3131501  0.12057838 0.09139347 0.3108668 ]\n"," [0.23146622 0.32905322 0.31315038 0.12056037 0.09135726 0.31086802]\n"," [0.2314719  0.32905424 0.31315017 0.12056655 0.09136955 0.31086758]\n"," [0.23146282 0.32905242 0.31315222 0.12055831 0.09134897 0.31087047]\n"," [0.23147075 0.32905415 0.31315023 0.12056528 0.09136692 0.31086767]\n"," [0.23147486 0.32905474 0.31315    0.12056992 0.09137622 0.31086713]\n"," [0.2314794  0.32905477 0.31315014 0.12057482 0.09138621 0.31086704]]\n","Predicted probabilities for each class: [[0.4334595  0.45701146 0.4531461  0.43378127 0.45221293 0.43876538]\n"," [0.23147613 0.32905456 0.31315017 0.1205712  0.09137889 0.31086728]\n"," [0.23146246 0.32905293 0.31315053 0.12055621 0.09134881 0.31086838]\n"," [0.23149836 0.32905617 0.31314993 0.12059554 0.0914284  0.31086573]\n"," [0.23146428 0.32905343 0.31315008 0.12055845 0.09135313 0.31086785]\n"," [0.23146954 0.32905385 0.31315002 0.1205642  0.0913648  0.3108675 ]\n"," [0.23147087 0.32905415 0.31315023 0.12056539 0.0913672  0.31086764]\n"," [0.23147129 0.32905418 0.31315023 0.12056586 0.09136813 0.3108676 ]\n"," [0.23149675 0.32905602 0.31314993 0.12059376 0.09142479 0.31086582]\n"," [0.23147143 0.3290542  0.31315023 0.12056601 0.09136844 0.3108676 ]\n"," [0.23147123 0.32905418 0.31315023 0.1205658  0.09136801 0.31086764]\n"," [0.23146969 0.32905436 0.31314996 0.12056409 0.09136453 0.31086746]\n"," [0.23146486 0.3290528  0.313151   0.12055882 0.09135392 0.31086874]\n"," [0.231494   0.32905585 0.31314996 0.12059079 0.09141874 0.31086603]\n"," [0.23147956 0.32905474 0.31315014 0.1205749  0.0913865  0.310867  ]\n"," [0.23146453 0.32905272 0.31315106 0.12055852 0.09135323 0.31086883]\n"," [0.23148431 0.32905513 0.31315008 0.12058014 0.09139711 0.3108667 ]\n"," [0.23147398 0.32905442 0.3131501  0.1205688  0.09137414 0.31086734]\n"," [0.2314642  0.32905278 0.31315118 0.12055835 0.09135269 0.31086904]\n"," [0.23148885 0.3290555  0.31315005 0.12058514 0.09140725 0.31086642]\n"," [0.23147021 0.32905412 0.31315023 0.1205647  0.09136573 0.3108677 ]\n"," [0.23149483 0.3290559  0.31314996 0.12059165 0.09142051 0.310866  ]\n"," [0.23146757 0.32905295 0.31315103 0.12056199 0.0913602  0.31086868]\n"," [0.23146611 0.32905415 0.31315    0.12056019 0.09135649 0.3108677 ]\n"," [0.23149157 0.32905567 0.31315002 0.1205881  0.09141325 0.3108662 ]\n"," [0.23149121 0.32905564 0.31315002 0.12058771 0.09141247 0.31086624]\n"," [0.23149933 0.32905623 0.31314993 0.12059662 0.09143058 0.31086567]\n"," [0.2314669  0.32905415 0.31315002 0.12056106 0.09135831 0.31086767]\n"," [0.23146765 0.32905328 0.3131505  0.1205619  0.09136035 0.31086805]\n"," [0.23148742 0.32905537 0.31315005 0.12058358 0.09140408 0.3108665 ]\n"," [0.23146698 0.32905358 0.31315008 0.12056137 0.09135914 0.3108677 ]\n"," [0.2314936  0.32905582 0.31315    0.12059034 0.09141784 0.31086606]]\n","Predicted probabilities for each class: [[0.23147334 0.32905436 0.3131502  0.12056816 0.09137277 0.31086746]\n"," [0.23147129 0.32905376 0.31315026 0.120566   0.09136862 0.31086758]\n"," [0.23149325 0.3290558  0.31315    0.12058993 0.09141699 0.3108661 ]\n"," [0.23146689 0.32905293 0.3131511  0.12056123 0.09135868 0.3108688 ]\n"," [0.23146369 0.32905248 0.31315145 0.12055793 0.09135014 0.31086975]\n"," [0.23149703 0.32905605 0.31314993 0.12059411 0.09142545 0.31086582]\n"," [0.23146601 0.32905304 0.31315115 0.12056037 0.09135675 0.31086895]\n"," [0.23146379 0.32905313 0.31315032 0.12055774 0.09135186 0.3108681 ]\n"," [0.23147638 0.3290546  0.31315017 0.12057152 0.09137951 0.31086728]\n"," [0.23148319 0.32905507 0.31315008 0.12057895 0.09139462 0.3108668 ]\n"," [0.23146877 0.3290543  0.31315005 0.12056325 0.09136263 0.3108676 ]\n"," [0.23148488 0.3290552  0.31315008 0.12058081 0.0913984  0.31086668]\n"," [0.23149325 0.3290558  0.31315    0.12058993 0.09141699 0.3108661 ]\n"," [0.2314621  0.32905304 0.31315032 0.12055594 0.09134816 0.31086817]\n"," [0.23145406 0.32905293 0.31315157 0.12054718 0.09132894 0.31087032]\n"," [0.23147021 0.32905412 0.31315023 0.1205647  0.09136573 0.3108677 ]\n"," [0.2314885  0.32905546 0.31315005 0.12058472 0.09140644 0.31086642]\n"," [0.2314674  0.32905394 0.31315023 0.12056164 0.09135953 0.31086785]\n"," [0.23147173 0.32905424 0.31315014 0.12056636 0.09136918 0.31086752]\n"," [0.2314651  0.3290528  0.31315112 0.12055928 0.09135471 0.31086898]\n"," [0.23146786 0.32905397 0.31315026 0.12056214 0.09136049 0.31086785]\n"," [0.23152141 0.3290578  0.31314966 0.12062076 0.09147973 0.31086412]\n"," [0.23146264 0.32905316 0.31315026 0.12055655 0.09134937 0.3108681 ]\n"," [0.23149882 0.32905617 0.31314993 0.12059606 0.09142949 0.3108657 ]\n"," [0.2314719  0.32905424 0.31315017 0.12056655 0.09136955 0.31086758]\n"," [0.23146336 0.32905325 0.31315014 0.12055738 0.09135101 0.31086797]\n"," [0.23146439 0.32905376 0.3131501  0.12055849 0.09135303 0.31086788]\n"," [0.2314641  0.32905304 0.31315038 0.120558   0.09135247 0.31086817]\n"," [0.231494   0.32905585 0.31314996 0.12059079 0.09141874 0.31086603]\n"," [0.23146404 0.32905337 0.31315008 0.12055818 0.09135263 0.31086785]\n"," [0.23148929 0.32905552 0.31315002 0.12058561 0.09140818 0.3108664 ]\n"," [0.23146367 0.32905337 0.3131513  0.12055776 0.09135091 0.3108694 ]]\n","Predicted probabilities for each class: [[0.23149106 0.32905567 0.31315002 0.12058754 0.09141216 0.31086624]\n"," [0.23147118 0.32905415 0.31315023 0.12056573 0.09136785 0.31086764]\n"," [0.23146689 0.3290536  0.31315005 0.12056129 0.09135892 0.31086767]\n"," [0.23148116 0.32905492 0.31315014 0.12057675 0.09139016 0.31086695]\n"," [0.23147005 0.3290541  0.31315023 0.12056453 0.0913654  0.31086773]\n"," [0.23148625 0.32905528 0.31315005 0.12058228 0.09140139 0.3108666 ]\n"," [0.23149653 0.32905602 0.31314993 0.12059353 0.09142432 0.31086585]\n"," [0.23149249 0.32905573 0.31315    0.1205891  0.09141532 0.31086615]\n"," [0.23147207 0.32905427 0.31315023 0.1205667  0.09136987 0.31086755]\n"," [0.23146611 0.32905313 0.31315047 0.12056024 0.09135699 0.3108681 ]\n"," [0.23148814 0.32905543 0.31315005 0.12058434 0.09140562 0.31086645]\n"," [0.2314659  0.3290529  0.31315097 0.12056003 0.09135633 0.31086865]\n"," [0.23149411 0.32905585 0.31315    0.1205909  0.09141897 0.31086603]\n"," [0.23147084 0.32905415 0.31315023 0.12056539 0.09136718 0.31086764]\n"," [0.23147084 0.32905337 0.31315085 0.12056536 0.09136726 0.31086823]\n"," [0.23149565 0.32905596 0.31314996 0.12059259 0.09142242 0.3108659 ]\n"," [0.23146561 0.3290532  0.31315032 0.12055972 0.09135593 0.31086802]\n"," [0.23148957 0.32905552 0.31315002 0.12058596 0.09140891 0.31086636]\n"," [0.23146407 0.3290534  0.31315008 0.12055824 0.09135269 0.31086785]\n"," [0.23147112 0.32905418 0.31315023 0.1205657  0.09136773 0.31086764]\n"," [0.23146214 0.32905394 0.31315005 0.12055591 0.0913477  0.31086794]\n"," [0.23147486 0.32905445 0.31315017 0.12056978 0.09137608 0.31086737]\n"," [0.23146582 0.3290537  0.31315005 0.12056009 0.09135641 0.31086776]\n"," [0.23147154 0.32905433 0.31315002 0.12056635 0.09136896 0.31086737]\n"," [0.2314675  0.329053   0.31315094 0.12056173 0.09135982 0.31086853]\n"," [0.23151283 0.3290572  0.31314975 0.12061135 0.09146061 0.3108647 ]\n"," [0.23146117 0.3290532  0.3131501  0.12055502 0.09134616 0.31086808]\n"," [0.2314655  0.32905388 0.31315133 0.12055971 0.09135441 0.31086946]\n"," [0.23147225 0.32905427 0.31315023 0.12056694 0.09137028 0.31086755]\n"," [0.23146975 0.32905436 0.31315    0.12056417 0.09136467 0.31086746]\n"," [0.23147129 0.3290535  0.31315058 0.12056586 0.09136833 0.31086794]\n"," [0.23147365 0.32905436 0.31315017 0.12056847 0.09137341 0.31086743]]\n","Predicted probabilities for each class: [[0.23146304 0.3290534  0.31315008 0.12055705 0.09135022 0.31086794]\n"," [0.23145738 0.32905352 0.31315017 0.12055081 0.09133727 0.31086838]\n"," [0.23149675 0.32905602 0.31314993 0.12059376 0.09142479 0.31086582]\n"," [0.23147373 0.32905436 0.31315017 0.12056855 0.09137363 0.31086743]\n"," [0.231494   0.32905585 0.31314996 0.12059079 0.09141874 0.31086603]\n"," [0.23147166 0.32905424 0.31315014 0.12056628 0.09136896 0.31086752]\n"," [0.23146379 0.329054   0.31315002 0.12055768 0.0913514  0.31086782]\n"," [0.23147082 0.32905403 0.31315002 0.12056553 0.09136751 0.31086743]\n"," [0.23146823 0.32905433 0.31315005 0.12056261 0.09136136 0.3108676 ]\n"," [0.23148042 0.32905486 0.3131501  0.1205759  0.09138847 0.31086695]\n"," [0.23146997 0.3290541  0.31315023 0.12056442 0.0913652  0.31086773]\n"," [0.2314655  0.3290529  0.31315118 0.12055979 0.0913556  0.31086898]\n"," [0.23146464 0.32905298 0.31315073 0.12055858 0.09135356 0.31086844]\n"," [0.23146658 0.32905298 0.31315094 0.12056068 0.09135772 0.3108686 ]\n"," [0.23146608 0.3290532  0.31315055 0.12056021 0.09135693 0.31086817]\n"," [0.23146254 0.32905313 0.31315026 0.12055641 0.09134912 0.3108681 ]\n"," [0.2314698  0.3290541  0.31315023 0.12056428 0.09136486 0.31086773]\n"," [0.23147258 0.3290543  0.3131502  0.12056729 0.09137101 0.31086752]\n"," [0.23147866 0.32905507 0.31314984 0.12057396 0.0913845  0.31086677]\n"," [0.23149157 0.32905567 0.31315002 0.1205881  0.09141325 0.3108662 ]\n"," [0.23149174 0.3290557  0.31315002 0.12058832 0.09141371 0.3108662 ]\n"," [0.23147    0.3290541  0.31315023 0.12056448 0.0913653  0.31086773]\n"," [0.23147236 0.32905334 0.313151   0.1205673  0.09137101 0.31086838]\n"," [0.23147097 0.32905376 0.31315026 0.12056567 0.09136795 0.3108676 ]\n"," [0.23149565 0.32905594 0.31314996 0.12059259 0.09142239 0.3108659 ]\n"," [0.2314659  0.3290531  0.31315064 0.12056    0.09135645 0.3108683 ]\n"," [0.23149483 0.3290559  0.31314996 0.12059165 0.09142051 0.310866  ]\n"," [0.23146586 0.32905316 0.3131504  0.12055998 0.09135645 0.31086808]\n"," [0.23148319 0.32905507 0.31315008 0.12057895 0.09139462 0.3108668 ]\n"," [0.23146214 0.3290522  0.3131519  0.12055724 0.09134731 0.31087005]\n"," [0.23146349 0.32905263 0.31315115 0.12055741 0.09135095 0.310869  ]\n"," [0.23146546 0.32905415 0.31315002 0.12055948 0.09135505 0.31086773]]\n","Predicted probabilities for each class: [[0.23148488 0.3290552  0.31315008 0.12058081 0.0913984  0.31086668]\n"," [0.23147362 0.32905436 0.31315014 0.12056847 0.09137339 0.31086743]\n"," [0.231494   0.32905585 0.31314996 0.12059079 0.09141874 0.31086603]\n"," [0.23148957 0.32905552 0.31315002 0.12058596 0.09140891 0.31086636]\n"," [0.23146228 0.32905328 0.3131501  0.12055629 0.09134873 0.310868  ]\n"," [0.23147848 0.32905474 0.31315014 0.12057379 0.09138416 0.31086713]\n"," [0.23147137 0.3290542  0.31315023 0.120566   0.09136844 0.3108676 ]\n"," [0.23146224 0.3290533  0.31315008 0.12055621 0.09134857 0.31086802]\n"," [0.23147069 0.32905415 0.31315023 0.12056522 0.09136683 0.31086767]\n"," [0.23146357 0.32905313 0.3131512  0.12055768 0.09135119 0.31086925]\n"," [0.23147066 0.32905415 0.3131502  0.12056521 0.09136678 0.31086767]\n"," [0.23147143 0.3290542  0.31315023 0.12056601 0.09136844 0.3108676 ]\n"," [0.23146772 0.32905376 0.31315005 0.12056223 0.09136069 0.31086764]\n"," [0.23147394 0.3290544  0.31315017 0.12056877 0.09137405 0.31086743]\n"," [0.2314629  0.32905298 0.31315038 0.12055673 0.09134988 0.31086823]\n"," [0.23147309 0.32905436 0.31315014 0.12056783 0.09137216 0.31086743]\n"," [0.23147148 0.32905424 0.31315026 0.12056614 0.09136859 0.31086764]\n"," [0.23148973 0.32905552 0.31315005 0.12058612 0.09140919 0.31086633]]\n"]}]},{"cell_type":"code","source":["test = test_data[70]\n","print(test.y)\n","with torch.no_grad():\n","  out = model(test)\n","  probabilities = torch.sigmoid(out).cpu().numpy()  # 각 클래스에 대한 확률 값 출력\n","  print(f'Predicted probabilities for each class: {probabilities}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6B4uj8cml8E4","executionInfo":{"status":"ok","timestamp":1717343826687,"user_tz":-540,"elapsed":2,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"a8effe39-6b96-4ca7-ce2d-dc94be653529"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0., 1., 0., 0., 0., 0.])\n","Predicted probabilities for each class: [[0.23147087 0.32905424 0.31315026 0.12056553 0.09136727 0.31086767]]\n"]}]},{"cell_type":"code","source":["# 필요한 라이브러리 설치\n","!pip install torch torch-geometric networkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycKB2yTQgonr","outputId":"a1fe00c3-fdb9-44cd-fb26-1e0b57139b05","executionInfo":{"status":"ok","timestamp":1718071603658,"user_tz":-540,"elapsed":102190,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"collapsed":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.1)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.3.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch)\n","  Downloading nvidia_nvjitlink_cu12-12.5.40-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m49.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.11.4)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.9.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (4.0.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2024.6.2)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.5.0)\n","Requirement already satisfied: mpmath<1.4.0,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, torch-geometric, nvidia-cusolver-cu12\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.40 nvidia-nvtx-cu12-12.1.105 torch-geometric-2.5.3\n"]}]},{"cell_type":"markdown","source":["## Conv & GRU(최종 코드)"],"metadata":{"id":"vIGOBPslHyJp"}},{"cell_type":"code","source":["!pip install pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3YrS7aDhhdnL","executionInfo":{"status":"ok","timestamp":1718012486899,"user_tz":-540,"elapsed":16425,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"ef6b5653-5e09-4a73-8409-55efdc72b522"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"]}]},{"cell_type":"code","source":["import base64\n","import pickle\n","import networkx as nx\n","import pandas as pd\n","import numpy as np\n","from torch_geometric.data import Data\n","from torch_geometric.utils import from_networkx\n","import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import GCNConv, global_mean_pool\n","import torch.nn as nn\n","from torch_geometric.loader import DataLoader\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MultiLabelBinarizer\n","import matplotlib.pyplot as plt\n","\n","# Focal Loss 정의\n","class FocalLoss(nn.Module):\n","    def __init__(self, alpha=1, gamma=2, reduction='mean'):\n","        super(FocalLoss, self).__init__()\n","        self.alpha = alpha\n","        self.gamma = gamma\n","        self.reduction = reduction\n","\n","    def forward(self, inputs, targets):\n","        BCE_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduction='none')\n","        pt = torch.exp(-BCE_loss)\n","        F_loss = self.alpha * (1 - pt) ** self.gamma * BCE_loss\n","\n","        if self.reduction == 'mean':\n","            return F_loss.mean()\n","        elif self.reduction == 'sum':\n","            return F_loss.sum()\n","        else:\n","            return F_loss\n","\n","# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pd.read_pickle(f)\n","    return df\n","\n","def create_pyg_data(graph_nx, label):\n","\n","    # Remove the last node in the graph\n","    if len(graph_nx.nodes) > 0:\n","        last_node = list(graph_nx.nodes)[-1]\n","        graph_nx.remove_node(last_node)\n","\n","\n","    #Remove nodes without 'feature'\n","    nodes_to_remove = [node for node in graph_nx.nodes if 'feature' not in graph_nx.nodes[node]]\n","    #print(len(graph_nx.nodes),nodes_to_remove)\n","    graph_nx.remove_nodes_from(nodes_to_remove)\n","\n","    node_features = [graph_nx.nodes[node]['feature'] for node in graph_nx.nodes if 'feature' in graph_nx.nodes[node]]\n","\n","    # Ensure node_features is not empty\n","    if not node_features:\n","        return None\n","\n","    node_features = np.array(node_features)\n","\n","    pyg_data = from_networkx(graph_nx)\n","    pyg_data.x = torch.tensor(node_features, dtype=torch.float).view(-1, 1)  # Ensure correct shape\n","    pyg_data.y = torch.tensor([label], dtype=torch.float)  # Graph-level label\n","    return pyg_data\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data_total_with_features.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 취약점 컬럼을 리스트로 변환\n","df['Vul'] = df['Vul'].apply(eval)\n","\n","# 멀티라벨 바이너리 인코딩\n","mlb = MultiLabelBinarizer()\n","labels = mlb.fit_transform(df['Vul'])\n","\n","# 각 취약점 클래스 확인\n","print(mlb.classes_)\n","\n","graph_list = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    # PyTorch Geometric의 Data 객체 생성\n","    data = create_pyg_data(graph, label)\n","    if data is not None:  # None이 아닌 경우에만 추가\n","        graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, val_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)\n","\n","class GRNN(nn.Module):\n","    def __init__(self, in_channels, hidden_channels):\n","        super(GRNN, self).__init__()\n","        self.conv1 = GCNConv(in_channels, hidden_channels)\n","        self.conv2 = GCNConv(hidden_channels, hidden_channels)\n","        self.batch_norm1 = nn.BatchNorm1d(hidden_channels)\n","        self.batch_norm2 = nn.BatchNorm1d(hidden_channels)\n","        self.gru1 = nn.GRU(hidden_channels, hidden_channels, batch_first=True)\n","        self.gru2 = nn.GRU(hidden_channels, hidden_channels, batch_first=True)\n","        self.gru3 = nn.GRU(hidden_channels, hidden_channels, batch_first=True)\n","        self.dropout = nn.Dropout(0.3)\n","\n","    def forward(self, x, edge_index, batch):\n","        x = F.relu(self.conv1(x, edge_index))\n","        x = self.batch_norm1(x)\n","        x = F.relu(self.conv2(x, edge_index))\n","        x = self.batch_norm2(x)\n","\n","        x = global_mean_pool(x, batch)\n","\n","        x = x.unsqueeze(1)\n","        x, _ = self.gru1(x)\n","        x, _ = self.gru2(x)\n","        x, _ = self.gru3(x)\n","        x = x.squeeze(1)\n","\n","        x = self.dropout(x)\n","        return x\n","\n","class GRNNClassifier(nn.Module):\n","    def __init__(self, in_channels, hidden_channels, out_channels, num_classes):\n","        super(GRNNClassifier, self).__init__()\n","        self.grnn = GRNN(in_channels, hidden_channels)\n","        self.fc1 = nn.Linear(hidden_channels, num_classes)\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        x = self.grnn(x, edge_index, batch)\n","        x = self.fc1(x)\n","        return x\n","\n","# 하이퍼파라미터 설정\n","in_channels = 1  # 노드 특징 행렬의 차원\n","hidden_channels = 64  # 은닉층의 차원\n","out_channels = 32  # 첫 번째 완전 연결 층의 차원\n","num_classes = len(mlb.classes_)\n","learning_rate = 0.0005\n","epochs = 50\n","batch_size = 32\n","\n","# 데이터 로더 생성\n","train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=False)\n","\n","# 모델 초기화\n","model = GRNNClassifier(in_channels, hidden_channels, out_channels, num_classes)\n","\n","# 옵티마이저 및 손실 함수 설정\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","loss_fn = FocalLoss()  # Focal Loss 사용\n","\n","# 학습률 스케줄러 설정\n","scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)\n","\n","# 손실 기록을 위한 리스트 초기화\n","train_losses = []\n","val_losses = []\n","\n","# 훈련 루프\n","for epoch in range(epochs):\n","    model.train()\n","    total_loss = 0\n","    for data in train_loader:\n","        optimizer.zero_grad()\n","        out = model(data)\n","        if out.shape != data.y.shape:\n","            data.y = data.y.view(out.shape)\n","        loss = loss_fn(out, data.y)  # Focal Loss로 손실 계산\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item()\n","\n","    avg_loss = total_loss / len(train_loader)\n","    train_losses.append(avg_loss)\n","    print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}')\n","\n","    # 검증 세트에서 평가\n","    model.eval()\n","    val_loss = 0\n","    with torch.no_grad():\n","        for data in val_loader:\n","            out = model(data)\n","            if out.shape != data.y.shape:\n","                data.y = data.y.view(out.shape)\n","            loss = loss_fn(out, data.y)\n","            val_loss += loss.item()\n","\n","    avg_val_loss = val_loss / len(val_loader)\n","    val_losses.append(avg_val_loss)\n","    print(f'Validation Loss: {avg_val_loss:.4f}')\n","\n","    # 스케줄러 업데이트\n","    scheduler.step()\n","\n","# 학습 곡선 시각화\n","plt.figure(figsize=(10, 5))\n","plt.plot(range(1, epochs + 1), train_losses, label='Training Loss')\n","plt.plot(range(1, epochs + 1), val_losses, label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss')\n","plt.legend()\n","plt.show()\n","\n","# 평가\n","model.eval()\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in val_loader:\n","        out = model(data)\n","        if out.shape != data.y.shape:\n","            data.y = data.y.view(out.shape)\n","        pred = (torch.sigmoid(out) > 0.5).float()\n","        correct += (pred == data.y).sum().item()\n","        total += data.y.numel()\n","\n","accuracy = correct / total\n","print(f'Test Accuracy: {accuracy:.4f}')\n","\n","# 각 클래스에 대한 취약점 확률 예측\n","model.eval()\n","class_names = mlb.classes_\n","with torch.no_grad():\n","    for data in train_loader:\n","        out = model(data)\n","        probabilities = torch.sigmoid(out).cpu().numpy()  # 각 클래스에 대한 확률 값 출력\n","        for sample_probs in probabilities:\n","            class_probabilities = dict(zip(class_names, sample_probs))\n","            print(f'Predicted probabilities for each class: {class_probabilities}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"OR1eiFqUb6da","executionInfo":{"status":"ok","timestamp":1718087019138,"user_tz":-540,"elapsed":796961,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"4c9c33f4-acc5-440d-a501-470624301a4e","collapsed":true},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["['BN' 'OF' 'RE' 'SE' 'TP' 'UC']\n","Epoch 1/50, Loss: 0.1679\n","Validation Loss: 0.1579\n","Epoch 2/50, Loss: 0.1418\n","Validation Loss: 0.1532\n","Epoch 3/50, Loss: 0.1323\n","Validation Loss: 0.1267\n","Epoch 4/50, Loss: 0.1252\n","Validation Loss: 0.1223\n","Epoch 5/50, Loss: 0.1214\n","Validation Loss: 0.1248\n","Epoch 6/50, Loss: 0.1214\n","Validation Loss: 0.1201\n","Epoch 7/50, Loss: 0.1212\n","Validation Loss: 0.1199\n","Epoch 8/50, Loss: 0.1219\n","Validation Loss: 0.1199\n","Epoch 9/50, Loss: 0.1196\n","Validation Loss: 0.1200\n","Epoch 10/50, Loss: 0.1207\n","Validation Loss: 0.1200\n","Epoch 11/50, Loss: 0.1202\n","Validation Loss: 0.1198\n","Epoch 12/50, Loss: 0.1212\n","Validation Loss: 0.1198\n","Epoch 13/50, Loss: 0.1194\n","Validation Loss: 0.1198\n","Epoch 14/50, Loss: 0.1221\n","Validation Loss: 0.1198\n","Epoch 15/50, Loss: 0.1195\n","Validation Loss: 0.1198\n","Epoch 16/50, Loss: 0.1207\n","Validation Loss: 0.1198\n","Epoch 17/50, Loss: 0.1219\n","Validation Loss: 0.1198\n","Epoch 18/50, Loss: 0.1223\n","Validation Loss: 0.1198\n","Epoch 19/50, Loss: 0.1217\n","Validation Loss: 0.1198\n","Epoch 20/50, Loss: 0.1210\n","Validation Loss: 0.1198\n","Epoch 21/50, Loss: 0.1214\n","Validation Loss: 0.1198\n","Epoch 22/50, Loss: 0.1224\n","Validation Loss: 0.1198\n","Epoch 23/50, Loss: 0.1211\n","Validation Loss: 0.1198\n","Epoch 24/50, Loss: 0.1209\n","Validation Loss: 0.1198\n","Epoch 25/50, Loss: 0.1228\n","Validation Loss: 0.1198\n","Epoch 26/50, Loss: 0.1208\n","Validation Loss: 0.1198\n","Epoch 27/50, Loss: 0.1214\n","Validation Loss: 0.1198\n","Epoch 28/50, Loss: 0.1231\n","Validation Loss: 0.1199\n","Epoch 29/50, Loss: 0.1220\n","Validation Loss: 0.1198\n","Epoch 30/50, Loss: 0.1209\n","Validation Loss: 0.1198\n","Epoch 31/50, Loss: 0.1214\n","Validation Loss: 0.1198\n","Epoch 32/50, Loss: 0.1195\n","Validation Loss: 0.1198\n","Epoch 33/50, Loss: 0.1217\n","Validation Loss: 0.1198\n","Epoch 34/50, Loss: 0.1211\n","Validation Loss: 0.1198\n","Epoch 35/50, Loss: 0.1205\n","Validation Loss: 0.1198\n","Epoch 36/50, Loss: 0.1218\n","Validation Loss: 0.1198\n","Epoch 37/50, Loss: 0.1211\n","Validation Loss: 0.1198\n","Epoch 38/50, Loss: 0.1213\n","Validation Loss: 0.1198\n","Epoch 39/50, Loss: 0.1231\n","Validation Loss: 0.1198\n","Epoch 40/50, Loss: 0.1202\n","Validation Loss: 0.1198\n","Epoch 41/50, Loss: 0.1211\n","Validation Loss: 0.1198\n","Epoch 42/50, Loss: 0.1207\n","Validation Loss: 0.1198\n","Epoch 43/50, Loss: 0.1221\n","Validation Loss: 0.1198\n","Epoch 44/50, Loss: 0.1198\n","Validation Loss: 0.1198\n","Epoch 45/50, Loss: 0.1202\n","Validation Loss: 0.1198\n","Epoch 46/50, Loss: 0.1197\n","Validation Loss: 0.1198\n","Epoch 47/50, Loss: 0.1212\n","Validation Loss: 0.1198\n","Epoch 48/50, Loss: 0.1232\n","Validation Loss: 0.1198\n","Epoch 49/50, Loss: 0.1204\n","Validation Loss: 0.1198\n","Epoch 50/50, Loss: 0.1212\n","Validation Loss: 0.1198\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Test Accuracy: 0.8119\n","Predicted probabilities for each class: {'BN': 0.5394189, 'OF': 0.31062627, 'RE': 0.33745348, 'SE': 0.3041928, 'TP': 0.35130426, 'UC': 0.3266273}\n","Predicted probabilities for each class: {'BN': 0.5840871, 'OF': 0.2784722, 'RE': 0.31694227, 'SE': 0.29096255, 'TP': 0.34008878, 'UC': 0.30163205}\n","Predicted probabilities for each class: {'BN': 0.36506715, 'OF': 0.40567237, 'RE': 0.40154788, 'SE': 0.3160362, 'TP': 0.34228224, 'UC': 0.40256563}\n","Predicted probabilities for each class: {'BN': 0.5677338, 'OF': 0.2931644, 'RE': 0.32701966, 'SE': 0.30051267, 'TP': 0.34837222, 'UC': 0.31348956}\n","Predicted probabilities for each class: {'BN': 0.57873666, 'OF': 0.2820632, 'RE': 0.31914097, 'SE': 0.29247406, 'TP': 0.34148878, 'UC': 0.30415958}\n","Predicted probabilities for each class: {'BN': 0.5627118, 'OF': 0.29557517, 'RE': 0.32797927, 'SE': 0.299395, 'TP': 0.3480843, 'UC': 0.31497532}\n","Predicted probabilities for each class: {'BN': 0.27969185, 'OF': 0.45939356, 'RE': 0.4401369, 'SE': 0.31737643, 'TP': 0.33426195, 'UC': 0.44762036}\n","Predicted probabilities for each class: {'BN': 0.29551637, 'OF': 0.46001303, 'RE': 0.44531098, 'SE': 0.33122742, 'TP': 0.34805074, 'UC': 0.45404154}\n","Predicted probabilities for each class: {'BN': 0.42481217, 'OF': 0.36938637, 'RE': 0.3751852, 'SE': 0.31003544, 'TP': 0.34406987, 'UC': 0.37189597}\n","Predicted probabilities for each class: {'BN': 0.31261122, 'OF': 0.43393, 'RE': 0.4195215, 'SE': 0.31161782, 'TP': 0.33297744, 'UC': 0.42356756}\n","Predicted probabilities for each class: {'BN': 0.57487845, 'OF': 0.28641024, 'RE': 0.32206514, 'SE': 0.29518735, 'TP': 0.3443918, 'UC': 0.30781025}\n","Predicted probabilities for each class: {'BN': 0.5278705, 'OF': 0.3335222, 'RE': 0.35657832, 'SE': 0.32676807, 'TP': 0.37020355, 'UC': 0.34974188}\n","Predicted probabilities for each class: {'BN': 0.5802108, 'OF': 0.28146014, 'RE': 0.3188196, 'SE': 0.29243362, 'TP': 0.34155336, 'UC': 0.30383742}\n","Predicted probabilities for each class: {'BN': 0.3722447, 'OF': 0.4029967, 'RE': 0.40029556, 'SE': 0.3176202, 'TP': 0.34455544, 'UC': 0.40106153}\n","Predicted probabilities for each class: {'BN': 0.58241165, 'OF': 0.2787246, 'RE': 0.31688267, 'SE': 0.2903492, 'TP': 0.33945268, 'UC': 0.30159545}\n","Predicted probabilities for each class: {'BN': 0.31958738, 'OF': 0.43617812, 'RE': 0.4247911, 'SE': 0.32088637, 'TP': 0.34149712, 'UC': 0.42946354}\n","Predicted probabilities for each class: {'BN': 0.28064647, 'OF': 0.45792785, 'RE': 0.4386784, 'SE': 0.3163256, 'TP': 0.3334508, 'UC': 0.44589177}\n","Predicted probabilities for each class: {'BN': 0.29103994, 'OF': 0.44667792, 'RE': 0.42914584, 'SE': 0.31134465, 'TP': 0.33014148, 'UC': 0.43435168}\n","Predicted probabilities for each class: {'BN': 0.31336498, 'OF': 0.44474247, 'RE': 0.43251753, 'SE': 0.326373, 'TP': 0.34569708, 'UC': 0.43880248}\n","Predicted probabilities for each class: {'BN': 0.27928942, 'OF': 0.46175882, 'RE': 0.44278628, 'SE': 0.31999215, 'TP': 0.33650434, 'UC': 0.45080495}\n","Predicted probabilities for each class: {'BN': 0.5541713, 'OF': 0.30106094, 'RE': 0.33132643, 'SE': 0.3010444, 'TP': 0.349301, 'UC': 0.31916374}\n","Predicted probabilities for each class: {'BN': 0.29529753, 'OF': 0.45189357, 'RE': 0.43614143, 'SE': 0.32115224, 'TP': 0.33916208, 'UC': 0.44280925}\n","Predicted probabilities for each class: {'BN': 0.57777894, 'OF': 0.28365, 'RE': 0.32024527, 'SE': 0.29376432, 'TP': 0.34277177, 'UC': 0.30558237}\n","Predicted probabilities for each class: {'BN': 0.3828881, 'OF': 0.39226854, 'RE': 0.38856965, 'SE': 0.3081732, 'TP': 0.33880633, 'UC': 0.38842043}\n","Predicted probabilities for each class: {'BN': 0.31271088, 'OF': 0.43224838, 'RE': 0.4172612, 'SE': 0.3090529, 'TP': 0.33099315, 'UC': 0.42106393}\n","Predicted probabilities for each class: {'BN': 0.32581973, 'OF': 0.42784575, 'RE': 0.4150198, 'SE': 0.31289718, 'TP': 0.33595598, 'UC': 0.41876924}\n","Predicted probabilities for each class: {'BN': 0.3577762, 'OF': 0.40646562, 'RE': 0.3989106, 'SE': 0.30931488, 'TP': 0.33660483, 'UC': 0.40016448}\n","Predicted probabilities for each class: {'BN': 0.33547667, 'OF': 0.41696364, 'RE': 0.40549344, 'SE': 0.3065866, 'TP': 0.33164713, 'UC': 0.40759757}\n","Predicted probabilities for each class: {'BN': 0.2945801, 'OF': 0.44976026, 'RE': 0.4334286, 'SE': 0.31783924, 'TP': 0.33621553, 'UC': 0.43958697}\n","Predicted probabilities for each class: {'BN': 0.50225997, 'OF': 0.33416677, 'RE': 0.35387754, 'SE': 0.31366357, 'TP': 0.3552639, 'UC': 0.34632656}\n","Predicted probabilities for each class: {'BN': 0.58025616, 'OF': 0.2794574, 'RE': 0.31729612, 'SE': 0.2905152, 'TP': 0.33925512, 'UC': 0.30186805}\n","Predicted probabilities for each class: {'BN': 0.2854382, 'OF': 0.4575588, 'RE': 0.4395452, 'SE': 0.31976485, 'TP': 0.33698612, 'UC': 0.44700575}\n","Predicted probabilities for each class: {'BN': 0.59036493, 'OF': 0.27363136, 'RE': 0.3139651, 'SE': 0.28871503, 'TP': 0.33749285, 'UC': 0.29818028}\n","Predicted probabilities for each class: {'BN': 0.30157912, 'OF': 0.44210696, 'RE': 0.42721638, 'SE': 0.3146224, 'TP': 0.33396858, 'UC': 0.4319695}\n","Predicted probabilities for each class: {'BN': 0.37745446, 'OF': 0.40929914, 'RE': 0.40904388, 'SE': 0.33035707, 'TP': 0.35578057, 'UC': 0.41122225}\n","Predicted probabilities for each class: {'BN': 0.3502811, 'OF': 0.4081314, 'RE': 0.39963838, 'SE': 0.3068264, 'TP': 0.3333348, 'UC': 0.40071374}\n","Predicted probabilities for each class: {'BN': 0.34899774, 'OF': 0.4144674, 'RE': 0.40716353, 'SE': 0.31503662, 'TP': 0.3398585, 'UC': 0.40917018}\n","Predicted probabilities for each class: {'BN': 0.56804854, 'OF': 0.29164702, 'RE': 0.3252882, 'SE': 0.2972003, 'TP': 0.3465257, 'UC': 0.31189802}\n","Predicted probabilities for each class: {'BN': 0.28322187, 'OF': 0.4558053, 'RE': 0.43721062, 'SE': 0.31604433, 'TP': 0.33344176, 'UC': 0.4440204}\n","Predicted probabilities for each class: {'BN': 0.27649912, 'OF': 0.45881167, 'RE': 0.43925983, 'SE': 0.3146705, 'TP': 0.33141017, 'UC': 0.44618025}\n","Predicted probabilities for each class: {'BN': 0.34028408, 'OF': 0.41744736, 'RE': 0.40871933, 'SE': 0.31274477, 'TP': 0.3367905, 'UC': 0.41077733}\n","Predicted probabilities for each class: {'BN': 0.30226845, 'OF': 0.44275942, 'RE': 0.42717195, 'SE': 0.3149251, 'TP': 0.33459866, 'UC': 0.4323626}\n","Predicted probabilities for each class: {'BN': 0.2982096, 'OF': 0.44809934, 'RE': 0.4323211, 'SE': 0.31851542, 'TP': 0.3372297, 'UC': 0.43839803}\n","Predicted probabilities for each class: {'BN': 0.29007462, 'OF': 0.4524753, 'RE': 0.4354086, 'SE': 0.3176857, 'TP': 0.3355557, 'UC': 0.44186434}\n","Predicted probabilities for each class: {'BN': 0.29100132, 'OF': 0.4481297, 'RE': 0.43081203, 'SE': 0.3131498, 'TP': 0.33169365, 'UC': 0.43633384}\n","Predicted probabilities for each class: {'BN': 0.31790194, 'OF': 0.4341893, 'RE': 0.4223379, 'SE': 0.31734973, 'TP': 0.3381526, 'UC': 0.42642018}\n","Predicted probabilities for each class: {'BN': 0.2887541, 'OF': 0.46016166, 'RE': 0.44299546, 'SE': 0.32526398, 'TP': 0.3422517, 'UC': 0.45144606}\n","Predicted probabilities for each class: {'BN': 0.5798173, 'OF': 0.28045976, 'RE': 0.3179398, 'SE': 0.29108968, 'TP': 0.34014285, 'UC': 0.3028013}\n","Predicted probabilities for each class: {'BN': 0.30142322, 'OF': 0.44491032, 'RE': 0.42975143, 'SE': 0.31732714, 'TP': 0.33648577, 'UC': 0.43527573}\n","Predicted probabilities for each class: {'BN': 0.29980728, 'OF': 0.4468083, 'RE': 0.43096563, 'SE': 0.31786582, 'TP': 0.33691663, 'UC': 0.43693453}\n","Predicted probabilities for each class: {'BN': 0.27947178, 'OF': 0.4589957, 'RE': 0.43919528, 'SE': 0.31627244, 'TP': 0.3333804, 'UC': 0.44668108}\n","Predicted probabilities for each class: {'BN': 0.32918674, 'OF': 0.42590225, 'RE': 0.41326937, 'SE': 0.31254563, 'TP': 0.33616608, 'UC': 0.41691896}\n","Predicted probabilities for each class: {'BN': 0.316014, 'OF': 0.4239654, 'RE': 0.40951622, 'SE': 0.30193385, 'TP': 0.3250818, 'UC': 0.41174158}\n","Predicted probabilities for each class: {'BN': 0.5803262, 'OF': 0.27992767, 'RE': 0.3176184, 'SE': 0.29086572, 'TP': 0.33982876, 'UC': 0.30235255}\n","Predicted probabilities for each class: {'BN': 0.3386724, 'OF': 0.4231333, 'RE': 0.41668573, 'SE': 0.32104868, 'TP': 0.34312487, 'UC': 0.41930974}\n","Predicted probabilities for each class: {'BN': 0.49662876, 'OF': 0.33353245, 'RE': 0.35146183, 'SE': 0.30717865, 'TP': 0.35043535, 'UC': 0.34388667}\n","Predicted probabilities for each class: {'BN': 0.5651801, 'OF': 0.2885079, 'RE': 0.3224151, 'SE': 0.29213777, 'TP': 0.34132376, 'UC': 0.3083472}\n","Predicted probabilities for each class: {'BN': 0.30571863, 'OF': 0.44281563, 'RE': 0.42756978, 'SE': 0.31716394, 'TP': 0.33703735, 'UC': 0.43312648}\n","Predicted probabilities for each class: {'BN': 0.33026576, 'OF': 0.41262907, 'RE': 0.4003281, 'SE': 0.29818177, 'TP': 0.323663, 'UC': 0.40123603}\n","Predicted probabilities for each class: {'BN': 0.3138836, 'OF': 0.43173894, 'RE': 0.4169692, 'SE': 0.30927628, 'TP': 0.3313329, 'UC': 0.42072633}\n","Predicted probabilities for each class: {'BN': 0.28980446, 'OF': 0.45318183, 'RE': 0.4357128, 'SE': 0.3178918, 'TP': 0.33582643, 'UC': 0.4424379}\n","Predicted probabilities for each class: {'BN': 0.2870801, 'OF': 0.4467648, 'RE': 0.42855555, 'SE': 0.3086387, 'TP': 0.32727805, 'UC': 0.4334362}\n","Predicted probabilities for each class: {'BN': 0.27979782, 'OF': 0.45670322, 'RE': 0.43707767, 'SE': 0.31412455, 'TP': 0.33144227, 'UC': 0.4439194}\n","Predicted probabilities for each class: {'BN': 0.34097943, 'OF': 0.41393247, 'RE': 0.4036228, 'SE': 0.30704382, 'TP': 0.33260024, 'UC': 0.40540165}\n","Predicted probabilities for each class: {'BN': 0.30622357, 'OF': 0.44319823, 'RE': 0.42950994, 'SE': 0.31944337, 'TP': 0.33873972, 'UC': 0.43483675}\n","Predicted probabilities for each class: {'BN': 0.30479202, 'OF': 0.43886584, 'RE': 0.4230066, 'SE': 0.31160152, 'TP': 0.33212018, 'UC': 0.4275989}\n","Predicted probabilities for each class: {'BN': 0.33702815, 'OF': 0.4294669, 'RE': 0.42181128, 'SE': 0.3260263, 'TP': 0.34776148, 'UC': 0.42601126}\n","Predicted probabilities for each class: {'BN': 0.30186227, 'OF': 0.45089367, 'RE': 0.43817747, 'SE': 0.32662898, 'TP': 0.34430793, 'UC': 0.4446947}\n","Predicted probabilities for each class: {'BN': 0.30950776, 'OF': 0.4448841, 'RE': 0.43193883, 'SE': 0.32383448, 'TP': 0.3429741, 'UC': 0.43795586}\n","Predicted probabilities for each class: {'BN': 0.2986353, 'OF': 0.45145255, 'RE': 0.43662223, 'SE': 0.3234157, 'TP': 0.34144837, 'UC': 0.44341236}\n","Predicted probabilities for each class: {'BN': 0.2785571, 'OF': 0.4605968, 'RE': 0.4411718, 'SE': 0.31788504, 'TP': 0.33459467, 'UC': 0.44887522}\n","Predicted probabilities for each class: {'BN': 0.32857406, 'OF': 0.41685772, 'RE': 0.4055505, 'SE': 0.3035334, 'TP': 0.32755676, 'UC': 0.40688232}\n","Predicted probabilities for each class: {'BN': 0.55260605, 'OF': 0.30178136, 'RE': 0.33190414, 'SE': 0.30138248, 'TP': 0.3492739, 'UC': 0.3196793}\n","Predicted probabilities for each class: {'BN': 0.56121284, 'OF': 0.29576483, 'RE': 0.3280135, 'SE': 0.29900002, 'TP': 0.34747434, 'UC': 0.31494316}\n","Predicted probabilities for each class: {'BN': 0.29654038, 'OF': 0.44642425, 'RE': 0.43010142, 'SE': 0.3152282, 'TP': 0.3341571, 'UC': 0.43566114}\n","Predicted probabilities for each class: {'BN': 0.27950802, 'OF': 0.46084538, 'RE': 0.4416458, 'SE': 0.31889683, 'TP': 0.33560473, 'UC': 0.4494959}\n","Predicted probabilities for each class: {'BN': 0.39262083, 'OF': 0.38622937, 'RE': 0.38458714, 'SE': 0.30763775, 'TP': 0.3393081, 'UC': 0.38363236}\n","Predicted probabilities for each class: {'BN': 0.32395303, 'OF': 0.43374145, 'RE': 0.42428386, 'SE': 0.3224561, 'TP': 0.34299397, 'UC': 0.42843074}\n","Predicted probabilities for each class: {'BN': 0.32149038, 'OF': 0.4272958, 'RE': 0.4137238, 'SE': 0.3093433, 'TP': 0.33230218, 'UC': 0.41706398}\n","Predicted probabilities for each class: {'BN': 0.36642462, 'OF': 0.40110472, 'RE': 0.39634344, 'SE': 0.31030747, 'TP': 0.33787712, 'UC': 0.3966383}\n","Predicted probabilities for each class: {'BN': 0.33179715, 'OF': 0.41970792, 'RE': 0.4077133, 'SE': 0.30741322, 'TP': 0.3318862, 'UC': 0.41013968}\n","Predicted probabilities for each class: {'BN': 0.5745677, 'OF': 0.29447925, 'RE': 0.32861862, 'SE': 0.30486166, 'TP': 0.35358915, 'UC': 0.31579444}\n","Predicted probabilities for each class: {'BN': 0.2796925, 'OF': 0.4612505, 'RE': 0.44233018, 'SE': 0.31971943, 'TP': 0.33630297, 'UC': 0.45024925}\n","Predicted probabilities for each class: {'BN': 0.28134137, 'OF': 0.45698357, 'RE': 0.4377871, 'SE': 0.31573063, 'TP': 0.33300793, 'UC': 0.44482595}\n","Predicted probabilities for each class: {'BN': 0.28845158, 'OF': 0.45429873, 'RE': 0.43665296, 'SE': 0.31820804, 'TP': 0.33594787, 'UC': 0.44354185}\n","Predicted probabilities for each class: {'BN': 0.36301282, 'OF': 0.40841, 'RE': 0.4041401, 'SE': 0.31799087, 'TP': 0.3438121, 'UC': 0.4055372}\n","Predicted probabilities for each class: {'BN': 0.5241842, 'OF': 0.31892052, 'RE': 0.3424767, 'SE': 0.30544597, 'TP': 0.35133123, 'UC': 0.3328391}\n","Predicted probabilities for each class: {'BN': 0.5674266, 'OF': 0.2924219, 'RE': 0.32591745, 'SE': 0.29803634, 'TP': 0.34711355, 'UC': 0.3125633}\n","Predicted probabilities for each class: {'BN': 0.5865737, 'OF': 0.2768824, 'RE': 0.3159818, 'SE': 0.29043108, 'TP': 0.3394412, 'UC': 0.300569}\n","Predicted probabilities for each class: {'BN': 0.32448277, 'OF': 0.43185148, 'RE': 0.42096764, 'SE': 0.3190159, 'TP': 0.3404631, 'UC': 0.42505136}\n","Predicted probabilities for each class: {'BN': 0.5798513, 'OF': 0.2795776, 'RE': 0.31727248, 'SE': 0.29021817, 'TP': 0.339138, 'UC': 0.30192408}\n","Predicted probabilities for each class: {'BN': 0.29675683, 'OF': 0.4492924, 'RE': 0.43323976, 'SE': 0.31877458, 'TP': 0.3373125, 'UC': 0.4395014}\n","Predicted probabilities for each class: {'BN': 0.5882752, 'OF': 0.2732372, 'RE': 0.31333798, 'SE': 0.2870461, 'TP': 0.3359247, 'UC': 0.2973956}\n","Predicted probabilities for each class: {'BN': 0.30383286, 'OF': 0.44141382, 'RE': 0.42603472, 'SE': 0.31446636, 'TP': 0.33437636, 'UC': 0.43104056}\n","Predicted probabilities for each class: {'BN': 0.5800286, 'OF': 0.27984866, 'RE': 0.3175166, 'SE': 0.29060683, 'TP': 0.3395542, 'UC': 0.30223244}\n","Predicted probabilities for each class: {'BN': 0.2878002, 'OF': 0.45510054, 'RE': 0.43735185, 'SE': 0.31861708, 'TP': 0.33625013, 'UC': 0.44438988}\n","Predicted probabilities for each class: {'BN': 0.29837224, 'OF': 0.45531774, 'RE': 0.44240427, 'SE': 0.32936525, 'TP': 0.34636807, 'UC': 0.44969067}\n","Predicted probabilities for each class: {'BN': 0.52958786, 'OF': 0.31459916, 'RE': 0.33982086, 'SE': 0.30417043, 'TP': 0.35003662, 'UC': 0.32939935}\n","Predicted probabilities for each class: {'BN': 0.58584476, 'OF': 0.27430198, 'RE': 0.3139131, 'SE': 0.287274, 'TP': 0.33602104, 'UC': 0.2978909}\n","Predicted probabilities for each class: {'BN': 0.34184223, 'OF': 0.4115745, 'RE': 0.4014451, 'SE': 0.30493525, 'TP': 0.33083516, 'UC': 0.4027853}\n","Predicted probabilities for each class: {'BN': 0.5835468, 'OF': 0.28005517, 'RE': 0.31822413, 'SE': 0.29294533, 'TP': 0.3417357, 'UC': 0.30303314}\n","Predicted probabilities for each class: {'BN': 0.28826258, 'OF': 0.46235967, 'RE': 0.4455689, 'SE': 0.32776657, 'TP': 0.34435046, 'UC': 0.4545052}\n","Predicted probabilities for each class: {'BN': 0.33979636, 'OF': 0.41740295, 'RE': 0.40731296, 'SE': 0.3108591, 'TP': 0.3355472, 'UC': 0.4096448}\n","Predicted probabilities for each class: {'BN': 0.3472292, 'OF': 0.41233194, 'RE': 0.4032671, 'SE': 0.3096224, 'TP': 0.33546895, 'UC': 0.40505478}\n","Predicted probabilities for each class: {'BN': 0.29378408, 'OF': 0.4581392, 'RE': 0.4431264, 'SE': 0.32791743, 'TP': 0.3448756, 'UC': 0.4511393}\n","Predicted probabilities for each class: {'BN': 0.3793224, 'OF': 0.39567375, 'RE': 0.39360407, 'SE': 0.31292492, 'TP': 0.34144, 'UC': 0.39340234}\n","Predicted probabilities for each class: {'BN': 0.5427693, 'OF': 0.3069429, 'RE': 0.3350857, 'SE': 0.3023548, 'TP': 0.3494095, 'UC': 0.32349408}\n","Predicted probabilities for each class: {'BN': 0.28863034, 'OF': 0.45333245, 'RE': 0.4359507, 'SE': 0.31752688, 'TP': 0.3352739, 'UC': 0.44251797}\n","Predicted probabilities for each class: {'BN': 0.5006561, 'OF': 0.33212614, 'RE': 0.35084552, 'SE': 0.30794483, 'TP': 0.35143074, 'UC': 0.34309998}\n","Predicted probabilities for each class: {'BN': 0.43825087, 'OF': 0.3607705, 'RE': 0.3680566, 'SE': 0.306242, 'TP': 0.34296805, 'UC': 0.3638715}\n","Predicted probabilities for each class: {'BN': 0.3177292, 'OF': 0.4333396, 'RE': 0.42035526, 'SE': 0.3150566, 'TP': 0.33645993, 'UC': 0.4245065}\n","Predicted probabilities for each class: {'BN': 0.591798, 'OF': 0.271758, 'RE': 0.3127106, 'SE': 0.28718427, 'TP': 0.33587256, 'UC': 0.2968232}\n","Predicted probabilities for each class: {'BN': 0.56631917, 'OF': 0.29283103, 'RE': 0.32617116, 'SE': 0.29808906, 'TP': 0.3469908, 'UC': 0.31279483}\n","Predicted probabilities for each class: {'BN': 0.39731914, 'OF': 0.37920728, 'RE': 0.37802887, 'SE': 0.3014087, 'TP': 0.33484405, 'UC': 0.37610024}\n","Predicted probabilities for each class: {'BN': 0.2943314, 'OF': 0.45750746, 'RE': 0.44247848, 'SE': 0.32751247, 'TP': 0.34458965, 'UC': 0.45039466}\n","Predicted probabilities for each class: {'BN': 0.28819156, 'OF': 0.4546728, 'RE': 0.437038, 'SE': 0.31848648, 'TP': 0.33615628, 'UC': 0.44398862}\n","Predicted probabilities for each class: {'BN': 0.47927794, 'OF': 0.343992, 'RE': 0.35836202, 'SE': 0.30963507, 'TP': 0.35091302, 'UC': 0.35232833}\n","Predicted probabilities for each class: {'BN': 0.29689354, 'OF': 0.44781974, 'RE': 0.4320362, 'SE': 0.31753805, 'TP': 0.33610937, 'UC': 0.43786752}\n","Predicted probabilities for each class: {'BN': 0.5300507, 'OF': 0.3130936, 'RE': 0.33843565, 'SE': 0.30226877, 'TP': 0.3485746, 'UC': 0.3278188}\n","Predicted probabilities for each class: {'BN': 0.30872777, 'OF': 0.4330534, 'RE': 0.4171344, 'SE': 0.30693513, 'TP': 0.328746, 'UC': 0.42087823}\n","Predicted probabilities for each class: {'BN': 0.31905413, 'OF': 0.43366507, 'RE': 0.42014626, 'SE': 0.31540966, 'TP': 0.3372423, 'UC': 0.42464593}\n","Predicted probabilities for each class: {'BN': 0.2934033, 'OF': 0.44741166, 'RE': 0.43054765, 'SE': 0.31408387, 'TP': 0.3327985, 'UC': 0.43607852}\n","Predicted probabilities for each class: {'BN': 0.52986425, 'OF': 0.31654438, 'RE': 0.34111497, 'SE': 0.3056451, 'TP': 0.35207886, 'UC': 0.33122396}\n","Predicted probabilities for each class: {'BN': 0.55737877, 'OF': 0.2986219, 'RE': 0.32991022, 'SE': 0.30029345, 'TP': 0.3485194, 'UC': 0.31722426}\n","Predicted probabilities for each class: {'BN': 0.5455435, 'OF': 0.30437663, 'RE': 0.33318716, 'SE': 0.3006757, 'TP': 0.34811118, 'UC': 0.32125497}\n","Predicted probabilities for each class: {'BN': 0.29822657, 'OF': 0.45254835, 'RE': 0.4389849, 'SE': 0.3256146, 'TP': 0.34309232, 'UC': 0.44564492}\n","Predicted probabilities for each class: {'BN': 0.30742452, 'OF': 0.43762356, 'RE': 0.42268166, 'SE': 0.31255376, 'TP': 0.3331232, 'UC': 0.4270985}\n","Predicted probabilities for each class: {'BN': 0.32832357, 'OF': 0.4231, 'RE': 0.4107448, 'SE': 0.30922833, 'TP': 0.33298972, 'UC': 0.4136076}\n","Predicted probabilities for each class: {'BN': 0.34481063, 'OF': 0.4160236, 'RE': 0.4091949, 'SE': 0.31538638, 'TP': 0.3392528, 'UC': 0.4109381}\n","Predicted probabilities for each class: {'BN': 0.5758623, 'OF': 0.2841893, 'RE': 0.32046923, 'SE': 0.29342872, 'TP': 0.3424019, 'UC': 0.30577037}\n","Predicted probabilities for each class: {'BN': 0.29401436, 'OF': 0.45803457, 'RE': 0.4430008, 'SE': 0.32790715, 'TP': 0.34490582, 'UC': 0.45102277}\n","Predicted probabilities for each class: {'BN': 0.29752755, 'OF': 0.45057428, 'RE': 0.43485534, 'SE': 0.32093054, 'TP': 0.33929393, 'UC': 0.44147018}\n","Predicted probabilities for each class: {'BN': 0.5857346, 'OF': 0.27702117, 'RE': 0.31599537, 'SE': 0.29009816, 'TP': 0.33919263, 'UC': 0.30055717}\n","Predicted probabilities for each class: {'BN': 0.28936064, 'OF': 0.4448692, 'RE': 0.42431846, 'SE': 0.30512005, 'TP': 0.32537052, 'UC': 0.42958704}\n","Predicted probabilities for each class: {'BN': 0.34512982, 'OF': 0.42847404, 'RE': 0.42318037, 'SE': 0.33140975, 'TP': 0.35318032, 'UC': 0.4275359}\n","Predicted probabilities for each class: {'BN': 0.27844918, 'OF': 0.45698777, 'RE': 0.43679678, 'SE': 0.31312525, 'TP': 0.33049542, 'UC': 0.44368896}\n","Predicted probabilities for each class: {'BN': 0.30312696, 'OF': 0.4453419, 'RE': 0.4310061, 'SE': 0.3195288, 'TP': 0.33851725, 'UC': 0.4366432}\n","Predicted probabilities for each class: {'BN': 0.32650226, 'OF': 0.42294145, 'RE': 0.41012475, 'SE': 0.30764446, 'TP': 0.33143985, 'UC': 0.4128689}\n","Predicted probabilities for each class: {'BN': 0.58361477, 'OF': 0.27639264, 'RE': 0.3152558, 'SE': 0.2885271, 'TP': 0.3373802, 'UC': 0.29948565}\n","Predicted probabilities for each class: {'BN': 0.36866805, 'OF': 0.38760966, 'RE': 0.38133475, 'SE': 0.2927644, 'TP': 0.32426545, 'UC': 0.37974125}\n","Predicted probabilities for each class: {'BN': 0.3025257, 'OF': 0.45233306, 'RE': 0.43873224, 'SE': 0.32769746, 'TP': 0.3455971, 'UC': 0.44598544}\n","Predicted probabilities for each class: {'BN': 0.34695753, 'OF': 0.43228522, 'RE': 0.42842653, 'SE': 0.3380979, 'TP': 0.35912699, 'UC': 0.43361804}\n","Predicted probabilities for each class: {'BN': 0.34536043, 'OF': 0.41261387, 'RE': 0.40209666, 'SE': 0.3072439, 'TP': 0.33370084, 'UC': 0.40407553}\n","Predicted probabilities for each class: {'BN': 0.28413197, 'OF': 0.45376262, 'RE': 0.43532667, 'SE': 0.31446657, 'TP': 0.3321253, 'UC': 0.4416594}\n","Predicted probabilities for each class: {'BN': 0.58239883, 'OF': 0.27855715, 'RE': 0.3167832, 'SE': 0.2902181, 'TP': 0.33928356, 'UC': 0.30140144}\n","Predicted probabilities for each class: {'BN': 0.37529248, 'OF': 0.39629772, 'RE': 0.39128667, 'SE': 0.30808368, 'TP': 0.33782947, 'UC': 0.3915497}\n","Predicted probabilities for each class: {'BN': 0.58916855, 'OF': 0.27192688, 'RE': 0.31251016, 'SE': 0.28607625, 'TP': 0.33476412, 'UC': 0.29634404}\n","Predicted probabilities for each class: {'BN': 0.31048867, 'OF': 0.428584, 'RE': 0.41175985, 'SE': 0.30173928, 'TP': 0.32479122, 'UC': 0.4149378}\n","Predicted probabilities for each class: {'BN': 0.5458252, 'OF': 0.3066857, 'RE': 0.33503988, 'SE': 0.30319414, 'TP': 0.35075727, 'UC': 0.3236006}\n","Predicted probabilities for each class: {'BN': 0.3315027, 'OF': 0.42377785, 'RE': 0.41171867, 'SE': 0.3118869, 'TP': 0.33578372, 'UC': 0.41501367}\n","Predicted probabilities for each class: {'BN': 0.29814816, 'OF': 0.45195416, 'RE': 0.43617406, 'SE': 0.32274765, 'TP': 0.341027, 'UC': 0.44327354}\n","Predicted probabilities for each class: {'BN': 0.5867681, 'OF': 0.27475595, 'RE': 0.31435785, 'SE': 0.2880469, 'TP': 0.3369781, 'UC': 0.29856804}\n","Predicted probabilities for each class: {'BN': 0.29373518, 'OF': 0.45822713, 'RE': 0.443215, 'SE': 0.32798663, 'TP': 0.34493166, 'UC': 0.4512457}\n","Predicted probabilities for each class: {'BN': 0.54898924, 'OF': 0.30203766, 'RE': 0.33181486, 'SE': 0.30015787, 'TP': 0.34757546, 'UC': 0.31946558}\n","Predicted probabilities for each class: {'BN': 0.40374702, 'OF': 0.3754878, 'RE': 0.37457705, 'SE': 0.29947394, 'TP': 0.33462596, 'UC': 0.37245536}\n","Predicted probabilities for each class: {'BN': 0.5356221, 'OF': 0.31269515, 'RE': 0.33875504, 'SE': 0.3047195, 'TP': 0.35136738, 'UC': 0.3282105}\n","Predicted probabilities for each class: {'BN': 0.5372327, 'OF': 0.3090527, 'RE': 0.33599657, 'SE': 0.30145583, 'TP': 0.34839445, 'UC': 0.3247317}\n","Predicted probabilities for each class: {'BN': 0.2759041, 'OF': 0.4655419, 'RE': 0.44620007, 'SE': 0.3218503, 'TP': 0.3377688, 'UC': 0.45493054}\n","Predicted probabilities for each class: {'BN': 0.28608504, 'OF': 0.4567175, 'RE': 0.4386449, 'SE': 0.31916198, 'TP': 0.3365438, 'UC': 0.44598478}\n","Predicted probabilities for each class: {'BN': 0.30908883, 'OF': 0.43279868, 'RE': 0.41674405, 'SE': 0.30665097, 'TP': 0.32862118, 'UC': 0.4204973}\n","Predicted probabilities for each class: {'BN': 0.29371557, 'OF': 0.45084035, 'RE': 0.4341387, 'SE': 0.31817946, 'TP': 0.3364994, 'UC': 0.44056}\n","Predicted probabilities for each class: {'BN': 0.3027145, 'OF': 0.45507774, 'RE': 0.44277108, 'SE': 0.33202732, 'TP': 0.34928235, 'UC': 0.45044512}\n","Predicted probabilities for each class: {'BN': 0.30324927, 'OF': 0.43963265, 'RE': 0.4233775, 'SE': 0.31127813, 'TP': 0.33166423, 'UC': 0.4281059}\n","Predicted probabilities for each class: {'BN': 0.30318102, 'OF': 0.44944635, 'RE': 0.43573853, 'SE': 0.32470965, 'TP': 0.34304956, 'UC': 0.44229105}\n","Predicted probabilities for each class: {'BN': 0.36095294, 'OF': 0.4006684, 'RE': 0.39350155, 'SE': 0.3043268, 'TP': 0.3327361, 'UC': 0.39382416}\n","Predicted probabilities for each class: {'BN': 0.27232477, 'OF': 0.45408735, 'RE': 0.4394121, 'SE': 0.31174845, 'TP': 0.32719147, 'UC': 0.44271377}\n","Predicted probabilities for each class: {'BN': 0.31517917, 'OF': 0.4336735, 'RE': 0.42057204, 'SE': 0.3140518, 'TP': 0.33514884, 'UC': 0.4245336}\n","Predicted probabilities for each class: {'BN': 0.28216133, 'OF': 0.4605574, 'RE': 0.44210246, 'SE': 0.32079145, 'TP': 0.33753031, 'UC': 0.45005926}\n","Predicted probabilities for each class: {'BN': 0.5569634, 'OF': 0.29974523, 'RE': 0.33100873, 'SE': 0.30207318, 'TP': 0.34966514, 'UC': 0.3184106}\n","Predicted probabilities for each class: {'BN': 0.5792236, 'OF': 0.2820499, 'RE': 0.31918705, 'SE': 0.2926229, 'TP': 0.34173766, 'UC': 0.30423617}\n","Predicted probabilities for each class: {'BN': 0.59200025, 'OF': 0.26910746, 'RE': 0.31076854, 'SE': 0.28445038, 'TP': 0.33275577, 'UC': 0.2942869}\n","Predicted probabilities for each class: {'BN': 0.2966665, 'OF': 0.45334896, 'RE': 0.4376967, 'SE': 0.3236293, 'TP': 0.34155285, 'UC': 0.44495088}\n","Predicted probabilities for each class: {'BN': 0.5556664, 'OF': 0.3001407, 'RE': 0.33081877, 'SE': 0.3008711, 'TP': 0.34916574, 'UC': 0.31846866}\n","Predicted probabilities for each class: {'BN': 0.47345668, 'OF': 0.3376949, 'RE': 0.3513114, 'SE': 0.29779047, 'TP': 0.34028655, 'UC': 0.34418505}\n","Predicted probabilities for each class: {'BN': 0.48004445, 'OF': 0.34176448, 'RE': 0.3572334, 'SE': 0.30923662, 'TP': 0.34950012, 'UC': 0.35061222}\n","Predicted probabilities for each class: {'BN': 0.28785875, 'OF': 0.44987917, 'RE': 0.43320104, 'SE': 0.31404993, 'TP': 0.33181784, 'UC': 0.43856096}\n","Predicted probabilities for each class: {'BN': 0.38398066, 'OF': 0.38708392, 'RE': 0.38362992, 'SE': 0.30254516, 'TP': 0.33416906, 'UC': 0.38253802}\n","Predicted probabilities for each class: {'BN': 0.5548674, 'OF': 0.30839312, 'RE': 0.33717, 'SE': 0.30916625, 'TP': 0.35769275, 'UC': 0.32658437}\n","Predicted probabilities for each class: {'BN': 0.29960373, 'OF': 0.44592893, 'RE': 0.43032956, 'SE': 0.317041, 'TP': 0.3360696, 'UC': 0.43596965}\n","Predicted probabilities for each class: {'BN': 0.57682437, 'OF': 0.28311914, 'RE': 0.31974837, 'SE': 0.29275182, 'TP': 0.3416937, 'UC': 0.30487272}\n","Predicted probabilities for each class: {'BN': 0.30773792, 'OF': 0.44489655, 'RE': 0.43155172, 'SE': 0.32247743, 'TP': 0.3416085, 'UC': 0.43742028}\n","Predicted probabilities for each class: {'BN': 0.29468474, 'OF': 0.4559299, 'RE': 0.44015002, 'SE': 0.3252566, 'TP': 0.3427659, 'UC': 0.4478791}\n","Predicted probabilities for each class: {'BN': 0.4345296, 'OF': 0.36212742, 'RE': 0.36820403, 'SE': 0.30481115, 'TP': 0.3416658, 'UC': 0.36432695}\n","Predicted probabilities for each class: {'BN': 0.3093206, 'OF': 0.4328491, 'RE': 0.41779515, 'SE': 0.30802572, 'TP': 0.32945463, 'UC': 0.4213478}\n","Predicted probabilities for each class: {'BN': 0.2858181, 'OF': 0.4520899, 'RE': 0.43412688, 'SE': 0.31404567, 'TP': 0.33186787, 'UC': 0.4401321}\n","Predicted probabilities for each class: {'BN': 0.5763636, 'OF': 0.28670847, 'RE': 0.3227054, 'SE': 0.29713896, 'TP': 0.34572536, 'UC': 0.30835506}\n","Predicted probabilities for each class: {'BN': 0.32645342, 'OF': 0.4227826, 'RE': 0.40987357, 'SE': 0.3073275, 'TP': 0.33118936, 'UC': 0.41259977}\n","Predicted probabilities for each class: {'BN': 0.5839136, 'OF': 0.28323135, 'RE': 0.32080474, 'SE': 0.29701418, 'TP': 0.345693, 'UC': 0.30624872}\n","Predicted probabilities for each class: {'BN': 0.34718847, 'OF': 0.41435865, 'RE': 0.4048298, 'SE': 0.31134182, 'TP': 0.33719105, 'UC': 0.4071314}\n","Predicted probabilities for each class: {'BN': 0.58142936, 'OF': 0.27925557, 'RE': 0.31730977, 'SE': 0.29095685, 'TP': 0.33964697, 'UC': 0.3018838}\n","Predicted probabilities for each class: {'BN': 0.27876174, 'OF': 0.45942456, 'RE': 0.43952078, 'SE': 0.31624886, 'TP': 0.3332731, 'UC': 0.44703898}\n","Predicted probabilities for each class: {'BN': 0.5174896, 'OF': 0.3229584, 'RE': 0.34519255, 'SE': 0.30673966, 'TP': 0.35179663, 'UC': 0.33610618}\n","Predicted probabilities for each class: {'BN': 0.2893552, 'OF': 0.44744372, 'RE': 0.42991138, 'SE': 0.3112773, 'TP': 0.32982677, 'UC': 0.43508282}\n","Predicted probabilities for each class: {'BN': 0.29603115, 'OF': 0.45560348, 'RE': 0.44109532, 'SE': 0.32686073, 'TP': 0.3441184, 'UC': 0.44856766}\n","Predicted probabilities for each class: {'BN': 0.28785583, 'OF': 0.45371196, 'RE': 0.43618697, 'SE': 0.31739926, 'TP': 0.3350621, 'UC': 0.44280463}\n","Predicted probabilities for each class: {'BN': 0.29552072, 'OF': 0.45061004, 'RE': 0.43404055, 'SE': 0.3190269, 'TP': 0.33750433, 'UC': 0.44061783}\n","Predicted probabilities for each class: {'BN': 0.3654206, 'OF': 0.39831734, 'RE': 0.39185977, 'SE': 0.3043529, 'TP': 0.33333802, 'UC': 0.39196146}\n","Predicted probabilities for each class: {'BN': 0.3439212, 'OF': 0.41398537, 'RE': 0.40489554, 'SE': 0.31005612, 'TP': 0.33519846, 'UC': 0.40670657}\n","Predicted probabilities for each class: {'BN': 0.31527027, 'OF': 0.43409112, 'RE': 0.42052266, 'SE': 0.31404853, 'TP': 0.3353188, 'UC': 0.42470753}\n","Predicted probabilities for each class: {'BN': 0.2870806, 'OF': 0.45361522, 'RE': 0.43558326, 'SE': 0.31631473, 'TP': 0.33413523, 'UC': 0.4421922}\n","Predicted probabilities for each class: {'BN': 0.28971028, 'OF': 0.45306543, 'RE': 0.43558127, 'SE': 0.31769857, 'TP': 0.3356403, 'UC': 0.44226646}\n","Predicted probabilities for each class: {'BN': 0.31746536, 'OF': 0.43438283, 'RE': 0.42212617, 'SE': 0.3169391, 'TP': 0.3378183, 'UC': 0.42631042}\n","Predicted probabilities for each class: {'BN': 0.33364835, 'OF': 0.42280155, 'RE': 0.4112523, 'SE': 0.31237283, 'TP': 0.3364107, 'UC': 0.41443127}\n","Predicted probabilities for each class: {'BN': 0.2772392, 'OF': 0.45454726, 'RE': 0.43337387, 'SE': 0.3088085, 'TP': 0.32669, 'UC': 0.4396958}\n","Predicted probabilities for each class: {'BN': 0.5826938, 'OF': 0.27888268, 'RE': 0.3170387, 'SE': 0.2906293, 'TP': 0.33978704, 'UC': 0.3018023}\n","Predicted probabilities for each class: {'BN': 0.54406226, 'OF': 0.30648398, 'RE': 0.3345742, 'SE': 0.3019274, 'TP': 0.34947118, 'UC': 0.3231064}\n","Predicted probabilities for each class: {'BN': 0.2938503, 'OF': 0.4581605, 'RE': 0.44318822, 'SE': 0.3280149, 'TP': 0.34496468, 'UC': 0.45120463}\n","Predicted probabilities for each class: {'BN': 0.4548076, 'OF': 0.35349157, 'RE': 0.36299345, 'SE': 0.30622512, 'TP': 0.34532827, 'UC': 0.35823143}\n","Predicted probabilities for each class: {'BN': 0.29579625, 'OF': 0.45429796, 'RE': 0.43857297, 'SE': 0.32413036, 'TP': 0.34189373, 'UC': 0.44598895}\n","Predicted probabilities for each class: {'BN': 0.58552444, 'OF': 0.27485365, 'RE': 0.31426495, 'SE': 0.28758666, 'TP': 0.3364626, 'UC': 0.29839587}\n","Predicted probabilities for each class: {'BN': 0.3132148, 'OF': 0.44098392, 'RE': 0.4280699, 'SE': 0.32141882, 'TP': 0.341385, 'UC': 0.43353432}\n","Predicted probabilities for each class: {'BN': 0.5761962, 'OF': 0.29352784, 'RE': 0.32801256, 'SE': 0.3042284, 'TP': 0.35339698, 'UC': 0.3150633}\n","Predicted probabilities for each class: {'BN': 0.47123963, 'OF': 0.34730163, 'RE': 0.36003858, 'SE': 0.30859458, 'TP': 0.34929574, 'UC': 0.35444814}\n","Predicted probabilities for each class: {'BN': 0.57626563, 'OF': 0.2836582, 'RE': 0.32008773, 'SE': 0.29303238, 'TP': 0.34199998, 'UC': 0.30531678}\n","Predicted probabilities for each class: {'BN': 0.2913405, 'OF': 0.4457707, 'RE': 0.42855284, 'SE': 0.31082955, 'TP': 0.32964638, 'UC': 0.43349335}\n","Predicted probabilities for each class: {'BN': 0.3377461, 'OF': 0.42431015, 'RE': 0.41626248, 'SE': 0.32021356, 'TP': 0.34271154, 'UC': 0.4194569}\n","Predicted probabilities for each class: {'BN': 0.28385928, 'OF': 0.4477254, 'RE': 0.42795864, 'SE': 0.3063629, 'TP': 0.32515952, 'UC': 0.43306157}\n","Predicted probabilities for each class: {'BN': 0.29375243, 'OF': 0.44884327, 'RE': 0.43183124, 'SE': 0.31571826, 'TP': 0.33435395, 'UC': 0.4378314}\n","Predicted probabilities for each class: {'BN': 0.30230197, 'OF': 0.44689363, 'RE': 0.4327208, 'SE': 0.32098934, 'TP': 0.3396465, 'UC': 0.43860692}\n","Predicted probabilities for each class: {'BN': 0.5734979, 'OF': 0.2871773, 'RE': 0.3224271, 'SE': 0.29516104, 'TP': 0.34447727, 'UC': 0.30836427}\n","Predicted probabilities for each class: {'BN': 0.5589246, 'OF': 0.2981277, 'RE': 0.32959753, 'SE': 0.30033904, 'TP': 0.3488047, 'UC': 0.31694996}\n","Predicted probabilities for each class: {'BN': 0.4980675, 'OF': 0.3233352, 'RE': 0.3421378, 'SE': 0.29484788, 'TP': 0.34008354, 'UC': 0.33308637}\n","Predicted probabilities for each class: {'BN': 0.2959455, 'OF': 0.45395377, 'RE': 0.43776956, 'SE': 0.32336214, 'TP': 0.34134337, 'UC': 0.4452222}\n","Predicted probabilities for each class: {'BN': 0.58339244, 'OF': 0.2771378, 'RE': 0.31583312, 'SE': 0.28934786, 'TP': 0.33814555, 'UC': 0.30017975}\n","Predicted probabilities for each class: {'BN': 0.27927828, 'OF': 0.45980597, 'RE': 0.4404431, 'SE': 0.3174921, 'TP': 0.33432993, 'UC': 0.44801158}\n","Predicted probabilities for each class: {'BN': 0.47904825, 'OF': 0.34356228, 'RE': 0.35800046, 'SE': 0.30907172, 'TP': 0.35034236, 'UC': 0.35184008}\n","Predicted probabilities for each class: {'BN': 0.35153753, 'OF': 0.41397107, 'RE': 0.4056772, 'SE': 0.31442937, 'TP': 0.34014252, 'UC': 0.40804702}\n","Predicted probabilities for each class: {'BN': 0.3330282, 'OF': 0.41913494, 'RE': 0.40877092, 'SE': 0.30935448, 'TP': 0.3331073, 'UC': 0.4108235}\n","Predicted probabilities for each class: {'BN': 0.35736868, 'OF': 0.40795502, 'RE': 0.40028483, 'SE': 0.3107655, 'TP': 0.33781895, 'UC': 0.40183467}\n","Predicted probabilities for each class: {'BN': 0.2778238, 'OF': 0.46173728, 'RE': 0.44226885, 'SE': 0.31867358, 'TP': 0.3352075, 'UC': 0.450202}\n","Predicted probabilities for each class: {'BN': 0.30944481, 'OF': 0.44033626, 'RE': 0.42705747, 'SE': 0.31836003, 'TP': 0.33815897, 'UC': 0.43197116}\n","Predicted probabilities for each class: {'BN': 0.34083834, 'OF': 0.42020735, 'RE': 0.41154817, 'SE': 0.31624237, 'TP': 0.33995414, 'UC': 0.4142699}\n","Predicted probabilities for each class: {'BN': 0.31462368, 'OF': 0.43514618, 'RE': 0.42221677, 'SE': 0.3155812, 'TP': 0.33639756, 'UC': 0.42642406}\n","Predicted probabilities for each class: {'BN': 0.5342067, 'OF': 0.3147536, 'RE': 0.3400281, 'SE': 0.30568847, 'TP': 0.3526379, 'UC': 0.3299874}\n","Predicted probabilities for each class: {'BN': 0.57480884, 'OF': 0.28411424, 'RE': 0.3202647, 'SE': 0.2928006, 'TP': 0.34172267, 'UC': 0.30552784}\n","Predicted probabilities for each class: {'BN': 0.3293887, 'OF': 0.4250287, 'RE': 0.41268694, 'SE': 0.31197953, 'TP': 0.33558968, 'UC': 0.41609597}\n","Predicted probabilities for each class: {'BN': 0.2779248, 'OF': 0.4625118, 'RE': 0.44324592, 'SE': 0.31976077, 'TP': 0.33616278, 'UC': 0.45136064}\n","Predicted probabilities for each class: {'BN': 0.5820492, 'OF': 0.27818444, 'RE': 0.31646228, 'SE': 0.2896975, 'TP': 0.33865938, 'UC': 0.3009557}\n","Predicted probabilities for each class: {'BN': 0.29261327, 'OF': 0.44430423, 'RE': 0.42683762, 'SE': 0.30963084, 'TP': 0.32884634, 'UC': 0.4316497}\n","Predicted probabilities for each class: {'BN': 0.36415976, 'OF': 0.40622106, 'RE': 0.4013576, 'SE': 0.315247, 'TP': 0.34180003, 'UC': 0.40253496}\n","Predicted probabilities for each class: {'BN': 0.3187141, 'OF': 0.4302634, 'RE': 0.41643956, 'SE': 0.31105435, 'TP': 0.33342448, 'UC': 0.42017418}\n","Predicted probabilities for each class: {'BN': 0.30810976, 'OF': 0.45224473, 'RE': 0.4398031, 'SE': 0.33170387, 'TP': 0.3497829, 'UC': 0.44748527}\n","Predicted probabilities for each class: {'BN': 0.31878194, 'OF': 0.4283673, 'RE': 0.41429487, 'SE': 0.30865258, 'TP': 0.33140278, 'UC': 0.41768044}\n","Predicted probabilities for each class: {'BN': 0.56221443, 'OF': 0.29501447, 'RE': 0.32746598, 'SE': 0.29853517, 'TP': 0.34716177, 'UC': 0.31434187}\n","Predicted probabilities for each class: {'BN': 0.53625363, 'OF': 0.31187823, 'RE': 0.33817664, 'SE': 0.30407876, 'TP': 0.35087448, 'UC': 0.32745993}\n","Predicted probabilities for each class: {'BN': 0.3131844, 'OF': 0.42756525, 'RE': 0.41205546, 'SE': 0.30346754, 'TP': 0.32629386, 'UC': 0.41501215}\n","Predicted probabilities for each class: {'BN': 0.2763203, 'OF': 0.45895225, 'RE': 0.4385768, 'SE': 0.3139187, 'TP': 0.330913, 'UC': 0.44574523}\n","Predicted probabilities for each class: {'BN': 0.32443413, 'OF': 0.4321041, 'RE': 0.42141837, 'SE': 0.3194966, 'TP': 0.3408231, 'UC': 0.42550796}\n","Predicted probabilities for each class: {'BN': 0.28202316, 'OF': 0.46379077, 'RE': 0.44604492, 'SE': 0.32493317, 'TP': 0.34108496, 'UC': 0.4547206}\n","Predicted probabilities for each class: {'BN': 0.27916113, 'OF': 0.4599293, 'RE': 0.44051772, 'SE': 0.31750906, 'TP': 0.33434176, 'UC': 0.44811562}\n","Predicted probabilities for each class: {'BN': 0.56869733, 'OF': 0.29543403, 'RE': 0.3285673, 'SE': 0.30233875, 'TP': 0.35128644, 'UC': 0.31574607}\n","Predicted probabilities for each class: {'BN': 0.35143757, 'OF': 0.40649995, 'RE': 0.39749584, 'SE': 0.30469164, 'TP': 0.33200452, 'UC': 0.3984968}\n","Predicted probabilities for each class: {'BN': 0.5314877, 'OF': 0.31524155, 'RE': 0.34021622, 'SE': 0.304992, 'TP': 0.35161358, 'UC': 0.33011177}\n","Predicted probabilities for each class: {'BN': 0.28160265, 'OF': 0.45802444, 'RE': 0.43910113, 'SE': 0.3172651, 'TP': 0.33437327, 'UC': 0.44638595}\n","Predicted probabilities for each class: {'BN': 0.40447485, 'OF': 0.3864356, 'RE': 0.388435, 'SE': 0.3176935, 'TP': 0.34855282, 'UC': 0.38763478}\n","Predicted probabilities for each class: {'BN': 0.5828794, 'OF': 0.27790076, 'RE': 0.31629163, 'SE': 0.28967157, 'TP': 0.33872974, 'UC': 0.3008723}\n","Predicted probabilities for each class: {'BN': 0.32801142, 'OF': 0.4259273, 'RE': 0.41350043, 'SE': 0.3122245, 'TP': 0.3356046, 'UC': 0.41696194}\n","Predicted probabilities for each class: {'BN': 0.57437605, 'OF': 0.28532794, 'RE': 0.32118478, 'SE': 0.2939167, 'TP': 0.3428968, 'UC': 0.30664864}\n","Predicted probabilities for each class: {'BN': 0.37962765, 'OF': 0.38067254, 'RE': 0.3766746, 'SE': 0.29198825, 'TP': 0.32474133, 'UC': 0.37429982}\n","Predicted probabilities for each class: {'BN': 0.31063804, 'OF': 0.43408826, 'RE': 0.41869387, 'SE': 0.30961543, 'TP': 0.33128214, 'UC': 0.42276287}\n","Predicted probabilities for each class: {'BN': 0.58295596, 'OF': 0.27826935, 'RE': 0.3166728, 'SE': 0.29039937, 'TP': 0.33924448, 'UC': 0.30119622}\n","Predicted probabilities for each class: {'BN': 0.33576125, 'OF': 0.4402622, 'RE': 0.43498558, 'SE': 0.33998418, 'TP': 0.35955623, 'UC': 0.44124344}\n","Predicted probabilities for each class: {'BN': 0.33751404, 'OF': 0.42290583, 'RE': 0.41279557, 'SE': 0.31601492, 'TP': 0.3397723, 'UC': 0.41607803}\n","Predicted probabilities for each class: {'BN': 0.31924224, 'OF': 0.4322498, 'RE': 0.4187163, 'SE': 0.3138836, 'TP': 0.3359399, 'UC': 0.4229153}\n","Predicted probabilities for each class: {'BN': 0.3581737, 'OF': 0.41794857, 'RE': 0.41380334, 'SE': 0.32688197, 'TP': 0.35088167, 'UC': 0.41679603}\n","Predicted probabilities for each class: {'BN': 0.53077596, 'OF': 0.31338978, 'RE': 0.33878353, 'SE': 0.30304238, 'TP': 0.3493256, 'UC': 0.32824317}\n","Predicted probabilities for each class: {'BN': 0.2862254, 'OF': 0.45250216, 'RE': 0.43463326, 'SE': 0.31482738, 'TP': 0.33259264, 'UC': 0.44077688}\n","Predicted probabilities for each class: {'BN': 0.58399636, 'OF': 0.27784503, 'RE': 0.3164211, 'SE': 0.29014313, 'TP': 0.33926162, 'UC': 0.30102143}\n","Predicted probabilities for each class: {'BN': 0.2779691, 'OF': 0.45791453, 'RE': 0.43832237, 'SE': 0.31447834, 'TP': 0.33146563, 'UC': 0.44522998}\n","Predicted probabilities for each class: {'BN': 0.30807212, 'OF': 0.4376525, 'RE': 0.4228072, 'SE': 0.31302935, 'TP': 0.3336184, 'UC': 0.42729798}\n","Predicted probabilities for each class: {'BN': 0.32158166, 'OF': 0.42812812, 'RE': 0.41412675, 'SE': 0.30984104, 'TP': 0.3329119, 'UC': 0.41774613}\n","Predicted probabilities for each class: {'BN': 0.28677347, 'OF': 0.4517025, 'RE': 0.4331541, 'SE': 0.3135726, 'TP': 0.33173692, 'UC': 0.43936464}\n","Predicted probabilities for each class: {'BN': 0.28675476, 'OF': 0.45102227, 'RE': 0.4332034, 'SE': 0.31351164, 'TP': 0.33150682, 'UC': 0.43901733}\n","Predicted probabilities for each class: {'BN': 0.27516022, 'OF': 0.46085098, 'RE': 0.44057685, 'SE': 0.3154428, 'TP': 0.33206743, 'UC': 0.44807163}\n","Predicted probabilities for each class: {'BN': 0.2931707, 'OF': 0.4448236, 'RE': 0.42647952, 'SE': 0.30957857, 'TP': 0.3291402, 'UC': 0.43170467}\n","Predicted probabilities for each class: {'BN': 0.27715692, 'OF': 0.45877892, 'RE': 0.4385619, 'SE': 0.31433725, 'TP': 0.33139265, 'UC': 0.44576782}\n","Predicted probabilities for each class: {'BN': 0.37453607, 'OF': 0.39965385, 'RE': 0.3965567, 'SE': 0.31429863, 'TP': 0.34214213, 'UC': 0.39695534}\n","Predicted probabilities for each class: {'BN': 0.31551665, 'OF': 0.43397287, 'RE': 0.42098367, 'SE': 0.3146794, 'TP': 0.3357264, 'UC': 0.42502648}\n","Predicted probabilities for each class: {'BN': 0.51657104, 'OF': 0.3222866, 'RE': 0.3451213, 'SE': 0.30685455, 'TP': 0.3509181, 'UC': 0.33568072}\n","Predicted probabilities for each class: {'BN': 0.31250542, 'OF': 0.4329472, 'RE': 0.41791022, 'SE': 0.3096573, 'TP': 0.3315221, 'UC': 0.42185006}\n","Predicted probabilities for each class: {'BN': 0.2941631, 'OF': 0.4577512, 'RE': 0.44271192, 'SE': 0.32767534, 'TP': 0.34471658, 'UC': 0.450676}\n","Predicted probabilities for each class: {'BN': 0.35752562, 'OF': 0.40426606, 'RE': 0.39671993, 'SE': 0.30658746, 'TP': 0.334197, 'UC': 0.39750025}\n","Predicted probabilities for each class: {'BN': 0.5699649, 'OF': 0.28938997, 'RE': 0.32388702, 'SE': 0.29616365, 'TP': 0.34513685, 'UC': 0.30995318}\n","Predicted probabilities for each class: {'BN': 0.5082462, 'OF': 0.32815698, 'RE': 0.34834197, 'SE': 0.30744705, 'TP': 0.351743, 'UC': 0.34005994}\n","Predicted probabilities for each class: {'BN': 0.3269246, 'OF': 0.43020815, 'RE': 0.419486, 'SE': 0.3185192, 'TP': 0.34038463, 'UC': 0.4234103}\n","Predicted probabilities for each class: {'BN': 0.33220842, 'OF': 0.42322606, 'RE': 0.41120344, 'SE': 0.31160817, 'TP': 0.3356655, 'UC': 0.4144315}\n","Predicted probabilities for each class: {'BN': 0.32951018, 'OF': 0.42082053, 'RE': 0.40837318, 'SE': 0.30707833, 'TP': 0.33135095, 'UC': 0.41090077}\n","Predicted probabilities for each class: {'BN': 0.27690163, 'OF': 0.46311983, 'RE': 0.4435737, 'SE': 0.31957796, 'TP': 0.3359101, 'UC': 0.4517914}\n","Predicted probabilities for each class: {'BN': 0.4585727, 'OF': 0.35155526, 'RE': 0.3628512, 'SE': 0.30745757, 'TP': 0.34634742, 'UC': 0.35742015}\n","Predicted probabilities for each class: {'BN': 0.28160998, 'OF': 0.4567095, 'RE': 0.43707553, 'SE': 0.31512454, 'TP': 0.3326316, 'UC': 0.44418985}\n","Predicted probabilities for each class: {'BN': 0.3044293, 'OF': 0.44962323, 'RE': 0.43561804, 'SE': 0.3252643, 'TP': 0.3438233, 'UC': 0.44247055}\n","Predicted probabilities for each class: {'BN': 0.27850097, 'OF': 0.45798233, 'RE': 0.438003, 'SE': 0.31446773, 'TP': 0.33163124, 'UC': 0.44511047}\n","Predicted probabilities for each class: {'BN': 0.29049206, 'OF': 0.44683397, 'RE': 0.42806372, 'SE': 0.30994645, 'TP': 0.32915312, 'UC': 0.43355215}\n","Predicted probabilities for each class: {'BN': 0.28859857, 'OF': 0.4499968, 'RE': 0.4318108, 'SE': 0.31301993, 'TP': 0.3314421, 'UC': 0.43772045}\n","Predicted probabilities for each class: {'BN': 0.2794561, 'OF': 0.4595754, 'RE': 0.44022125, 'SE': 0.31734243, 'TP': 0.33422342, 'UC': 0.4477467}\n","Predicted probabilities for each class: {'BN': 0.31705925, 'OF': 0.4351261, 'RE': 0.42307028, 'SE': 0.3177587, 'TP': 0.3384419, 'UC': 0.42735213}\n","Predicted probabilities for each class: {'BN': 0.3012476, 'OF': 0.44286323, 'RE': 0.42802942, 'SE': 0.3153516, 'TP': 0.33455405, 'UC': 0.43292502}\n","Predicted probabilities for each class: {'BN': 0.59064513, 'OF': 0.26860294, 'RE': 0.3101734, 'SE': 0.28305662, 'TP': 0.3313908, 'UC': 0.29353473}\n","Predicted probabilities for each class: {'BN': 0.29340506, 'OF': 0.452895, 'RE': 0.4363248, 'SE': 0.3204167, 'TP': 0.33841914, 'UC': 0.4432217}\n","Predicted probabilities for each class: {'BN': 0.29873782, 'OF': 0.44803405, 'RE': 0.4326112, 'SE': 0.31908917, 'TP': 0.3377325, 'UC': 0.43864006}\n","Predicted probabilities for each class: {'BN': 0.28145856, 'OF': 0.45250264, 'RE': 0.4334602, 'SE': 0.31103277, 'TP': 0.32876927, 'UC': 0.4392533}\n","Predicted probabilities for each class: {'BN': 0.30685124, 'OF': 0.43546474, 'RE': 0.4201672, 'SE': 0.30947816, 'TP': 0.3303809, 'UC': 0.42409787}\n","Predicted probabilities for each class: {'BN': 0.31572983, 'OF': 0.4383931, 'RE': 0.42570952, 'SE': 0.3200575, 'TP': 0.340494, 'UC': 0.43078008}\n","Predicted probabilities for each class: {'BN': 0.33844, 'OF': 0.41429004, 'RE': 0.4034724, 'SE': 0.30570188, 'TP': 0.33113688, 'UC': 0.4051961}\n","Predicted probabilities for each class: {'BN': 0.33796743, 'OF': 0.42101917, 'RE': 0.41018608, 'SE': 0.31320035, 'TP': 0.3376504, 'UC': 0.41327026}\n","Predicted probabilities for each class: {'BN': 0.2894688, 'OF': 0.45179918, 'RE': 0.4342262, 'SE': 0.31609133, 'TP': 0.3341774, 'UC': 0.44056493}\n","Predicted probabilities for each class: {'BN': 0.29484028, 'OF': 0.45693246, 'RE': 0.44196513, 'SE': 0.32722175, 'TP': 0.34438413, 'UC': 0.4497732}\n","Predicted probabilities for each class: {'BN': 0.28688833, 'OF': 0.45256138, 'RE': 0.43469816, 'SE': 0.31528723, 'TP': 0.33308083, 'UC': 0.44095853}\n","Predicted probabilities for each class: {'BN': 0.5786212, 'OF': 0.28187922, 'RE': 0.31896815, 'SE': 0.2921996, 'TP': 0.34120288, 'UC': 0.3039631}\n","Predicted probabilities for each class: {'BN': 0.5141376, 'OF': 0.3246857, 'RE': 0.3462272, 'SE': 0.3068645, 'TP': 0.35162914, 'UC': 0.33738714}\n","Predicted probabilities for each class: {'BN': 0.2889746, 'OF': 0.45354995, 'RE': 0.4357797, 'SE': 0.31757373, 'TP': 0.33547276, 'UC': 0.44257784}\n","Predicted probabilities for each class: {'BN': 0.31358188, 'OF': 0.43203902, 'RE': 0.41725883, 'SE': 0.30945283, 'TP': 0.33144176, 'UC': 0.421049}\n","Predicted probabilities for each class: {'BN': 0.28719658, 'OF': 0.4522969, 'RE': 0.43506414, 'SE': 0.31575775, 'TP': 0.33343154, 'UC': 0.44111282}\n","Predicted probabilities for each class: {'BN': 0.34521055, 'OF': 0.44001788, 'RE': 0.43721938, 'SE': 0.34682742, 'TP': 0.36665785, 'UC': 0.44393086}\n","Predicted probabilities for each class: {'BN': 0.5765158, 'OF': 0.2842003, 'RE': 0.3205063, 'SE': 0.29357427, 'TP': 0.3427298, 'UC': 0.30590618}\n","Predicted probabilities for each class: {'BN': 0.2906586, 'OF': 0.44921604, 'RE': 0.43224046, 'SE': 0.3145342, 'TP': 0.3327726, 'UC': 0.4379055}\n","Predicted probabilities for each class: {'BN': 0.5711729, 'OF': 0.28924263, 'RE': 0.32389957, 'SE': 0.2965898, 'TP': 0.34563395, 'UC': 0.31000587}\n","Predicted probabilities for each class: {'BN': 0.2800958, 'OF': 0.45874488, 'RE': 0.43944383, 'SE': 0.31684342, 'TP': 0.33385688, 'UC': 0.446813}\n","Predicted probabilities for each class: {'BN': 0.3001675, 'OF': 0.45045832, 'RE': 0.43584085, 'SE': 0.32333764, 'TP': 0.34155965, 'UC': 0.44251505}\n","Predicted probabilities for each class: {'BN': 0.56638044, 'OF': 0.2930737, 'RE': 0.32664457, 'SE': 0.29926616, 'TP': 0.34743613, 'UC': 0.31311616}\n","Predicted probabilities for each class: {'BN': 0.2892168, 'OF': 0.45625988, 'RE': 0.4395668, 'SE': 0.3217398, 'TP': 0.33898196, 'UC': 0.44685668}\n","Predicted probabilities for each class: {'BN': 0.33972105, 'OF': 0.41572726, 'RE': 0.4043917, 'SE': 0.30727777, 'TP': 0.3329959, 'UC': 0.40663025}\n","Predicted probabilities for each class: {'BN': 0.30463126, 'OF': 0.45574737, 'RE': 0.444387, 'SE': 0.33471006, 'TP': 0.35178727, 'UC': 0.45227155}\n","Predicted probabilities for each class: {'BN': 0.30605927, 'OF': 0.4433953, 'RE': 0.42970896, 'SE': 0.31957847, 'TP': 0.338835, 'UC': 0.43506417}\n","Predicted probabilities for each class: {'BN': 0.2886948, 'OF': 0.4617212, 'RE': 0.44496796, 'SE': 0.3273505, 'TP': 0.34402364, 'UC': 0.4537699}\n","Predicted probabilities for each class: {'BN': 0.32171872, 'OF': 0.42479634, 'RE': 0.40997562, 'SE': 0.30517375, 'TP': 0.32914448, 'UC': 0.4130903}\n","Predicted probabilities for each class: {'BN': 0.5794445, 'OF': 0.2825631, 'RE': 0.31952098, 'SE': 0.29299992, 'TP': 0.34236008, 'UC': 0.30482942}\n","Predicted probabilities for each class: {'BN': 0.59016633, 'OF': 0.2692743, 'RE': 0.31061524, 'SE': 0.28359544, 'TP': 0.33199853, 'UC': 0.2940378}\n","Predicted probabilities for each class: {'BN': 0.2766156, 'OF': 0.45483726, 'RE': 0.4338605, 'SE': 0.30897555, 'TP': 0.32668793, 'UC': 0.4401185}\n","Predicted probabilities for each class: {'BN': 0.32645002, 'OF': 0.42211375, 'RE': 0.4084819, 'SE': 0.30572936, 'TP': 0.330041, 'UC': 0.41124305}\n","Predicted probabilities for each class: {'BN': 0.5792078, 'OF': 0.2817786, 'RE': 0.3189895, 'SE': 0.2924954, 'TP': 0.34140396, 'UC': 0.30396935}\n","Predicted probabilities for each class: {'BN': 0.2833679, 'OF': 0.46078527, 'RE': 0.44221035, 'SE': 0.32158113, 'TP': 0.33846623, 'UC': 0.4504442}\n","Predicted probabilities for each class: {'BN': 0.55937225, 'OF': 0.29702744, 'RE': 0.3289154, 'SE': 0.29967397, 'TP': 0.34788886, 'UC': 0.31594157}\n","Predicted probabilities for each class: {'BN': 0.2870361, 'OF': 0.45626143, 'RE': 0.43858892, 'SE': 0.31954584, 'TP': 0.33695245, 'UC': 0.4458183}\n","Predicted probabilities for each class: {'BN': 0.27776182, 'OF': 0.46172196, 'RE': 0.4422643, 'SE': 0.31862766, 'TP': 0.33515695, 'UC': 0.4501789}\n","Predicted probabilities for each class: {'BN': 0.31920195, 'OF': 0.4198933, 'RE': 0.405294, 'SE': 0.29864928, 'TP': 0.32283872, 'UC': 0.40705693}\n","Predicted probabilities for each class: {'BN': 0.29426962, 'OF': 0.44758174, 'RE': 0.43143207, 'SE': 0.31546798, 'TP': 0.33397883, 'UC': 0.43693647}\n","Predicted probabilities for each class: {'BN': 0.4424797, 'OF': 0.35968062, 'RE': 0.3686776, 'SE': 0.30905706, 'TP': 0.34519413, 'UC': 0.36413187}\n","Predicted probabilities for each class: {'BN': 0.2900519, 'OF': 0.44808432, 'RE': 0.43031496, 'SE': 0.3121392, 'TP': 0.33075863, 'UC': 0.43582368}\n","Predicted probabilities for each class: {'BN': 0.33504578, 'OF': 0.4215391, 'RE': 0.4097771, 'SE': 0.31132805, 'TP': 0.33582908, 'UC': 0.41288704}\n","Predicted probabilities for each class: {'BN': 0.3879792, 'OF': 0.38787234, 'RE': 0.38528007, 'SE': 0.306444, 'TP': 0.33781216, 'UC': 0.38447803}\n","Predicted probabilities for each class: {'BN': 0.32467735, 'OF': 0.42989975, 'RE': 0.41907242, 'SE': 0.31698847, 'TP': 0.33865803, 'UC': 0.4227092}\n","Predicted probabilities for each class: {'BN': 0.28877646, 'OF': 0.45420063, 'RE': 0.43661228, 'SE': 0.31832293, 'TP': 0.33609244, 'UC': 0.4434976}\n","Predicted probabilities for each class: {'BN': 0.29521576, 'OF': 0.44682568, 'RE': 0.43021485, 'SE': 0.31466857, 'TP': 0.33352923, 'UC': 0.4357743}\n","Predicted probabilities for each class: {'BN': 0.29393074, 'OF': 0.45513895, 'RE': 0.43899298, 'SE': 0.32362872, 'TP': 0.34126213, 'UC': 0.4464938}\n","Predicted probabilities for each class: {'BN': 0.28002632, 'OF': 0.45895234, 'RE': 0.43960604, 'SE': 0.31698632, 'TP': 0.33398673, 'UC': 0.44703498}\n","Predicted probabilities for each class: {'BN': 0.5848159, 'OF': 0.27644756, 'RE': 0.3154042, 'SE': 0.28897917, 'TP': 0.33800063, 'UC': 0.29982495}\n","Predicted probabilities for each class: {'BN': 0.5283101, 'OF': 0.31457645, 'RE': 0.3394783, 'SE': 0.30309, 'TP': 0.3491664, 'UC': 0.32909307}\n","Predicted probabilities for each class: {'BN': 0.57805383, 'OF': 0.28516582, 'RE': 0.32134742, 'SE': 0.29506928, 'TP': 0.34462833, 'UC': 0.30717653}\n","Predicted probabilities for each class: {'BN': 0.30989465, 'OF': 0.43819392, 'RE': 0.42330402, 'SE': 0.31442055, 'TP': 0.3352508, 'UC': 0.4281267}\n","Predicted probabilities for each class: {'BN': 0.29548007, 'OF': 0.45571467, 'RE': 0.44045416, 'SE': 0.32596275, 'TP': 0.34339774, 'UC': 0.4480931}\n","Predicted probabilities for each class: {'BN': 0.2936585, 'OF': 0.4475917, 'RE': 0.42997485, 'SE': 0.31366295, 'TP': 0.33267042, 'UC': 0.43579498}\n","Predicted probabilities for each class: {'BN': 0.28818822, 'OF': 0.454771, 'RE': 0.43714172, 'SE': 0.31858525, 'TP': 0.33624902, 'UC': 0.444111}\n","Predicted probabilities for each class: {'BN': 0.37328655, 'OF': 0.40912527, 'RE': 0.408047, 'SE': 0.3272395, 'TP': 0.35262558, 'UC': 0.40991256}\n","Predicted probabilities for each class: {'BN': 0.34360287, 'OF': 0.41106966, 'RE': 0.40096933, 'SE': 0.3051968, 'TP': 0.33137822, 'UC': 0.4023893}\n","Predicted probabilities for each class: {'BN': 0.3147768, 'OF': 0.43785024, 'RE': 0.4257502, 'SE': 0.31961074, 'TP': 0.3397379, 'UC': 0.4304072}\n","Predicted probabilities for each class: {'BN': 0.30281353, 'OF': 0.43235138, 'RE': 0.41440785, 'SE': 0.3008876, 'TP': 0.32309633, 'UC': 0.41780826}\n","Predicted probabilities for each class: {'BN': 0.40260682, 'OF': 0.38414127, 'RE': 0.3858922, 'SE': 0.31386635, 'TP': 0.34492806, 'UC': 0.38457152}\n","Predicted probabilities for each class: {'BN': 0.28600132, 'OF': 0.45555243, 'RE': 0.4371111, 'SE': 0.31745324, 'TP': 0.33510107, 'UC': 0.4442109}\n","Predicted probabilities for each class: {'BN': 0.30549648, 'OF': 0.44722655, 'RE': 0.43222076, 'SE': 0.3221638, 'TP': 0.34144387, 'UC': 0.43882737}\n","Predicted probabilities for each class: {'BN': 0.36768454, 'OF': 0.4064546, 'RE': 0.40288767, 'SE': 0.31866875, 'TP': 0.3449475, 'UC': 0.4041678}\n","Predicted probabilities for each class: {'BN': 0.28565973, 'OF': 0.4557133, 'RE': 0.43756464, 'SE': 0.3177397, 'TP': 0.33521944, 'UC': 0.44457945}\n","Predicted probabilities for each class: {'BN': 0.35996628, 'OF': 0.42167684, 'RE': 0.41935426, 'SE': 0.33408466, 'TP': 0.35701412, 'UC': 0.42305163}\n","Predicted probabilities for each class: {'BN': 0.54356605, 'OF': 0.30660623, 'RE': 0.3344781, 'SE': 0.3015267, 'TP': 0.34922966, 'UC': 0.3231097}\n","Predicted probabilities for each class: {'BN': 0.32477832, 'OF': 0.43165463, 'RE': 0.4206756, 'SE': 0.3188274, 'TP': 0.34038046, 'UC': 0.4247632}\n","Predicted probabilities for each class: {'BN': 0.35164613, 'OF': 0.40331638, 'RE': 0.39422098, 'SE': 0.30094537, 'TP': 0.32882276, 'UC': 0.39464992}\n","Predicted probabilities for each class: {'BN': 0.32190657, 'OF': 0.42622966, 'RE': 0.4088577, 'SE': 0.30369264, 'TP': 0.32906327, 'UC': 0.4128976}\n","Predicted probabilities for each class: {'BN': 0.2744852, 'OF': 0.4598882, 'RE': 0.43932498, 'SE': 0.3137206, 'TP': 0.33050433, 'UC': 0.44652975}\n","Predicted probabilities for each class: {'BN': 0.57000196, 'OF': 0.28767368, 'RE': 0.32264546, 'SE': 0.29467243, 'TP': 0.34324092, 'UC': 0.30827177}\n","Predicted probabilities for each class: {'BN': 0.36013222, 'OF': 0.40549165, 'RE': 0.3969588, 'SE': 0.3079314, 'TP': 0.33630747, 'UC': 0.39843276}\n","Predicted probabilities for each class: {'BN': 0.27823374, 'OF': 0.46109185, 'RE': 0.4416165, 'SE': 0.3181882, 'TP': 0.3348354, 'UC': 0.449425}\n","Predicted probabilities for each class: {'BN': 0.31769827, 'OF': 0.44165868, 'RE': 0.43060154, 'SE': 0.3264376, 'TP': 0.34605056, 'UC': 0.4363628}\n","Predicted probabilities for each class: {'BN': 0.30611882, 'OF': 0.43999076, 'RE': 0.42344823, 'SE': 0.31269443, 'TP': 0.3336332, 'UC': 0.42864472}\n","Predicted probabilities for each class: {'BN': 0.27809587, 'OF': 0.46140832, 'RE': 0.44196793, 'SE': 0.3184958, 'TP': 0.3350803, 'UC': 0.44983897}\n","Predicted probabilities for each class: {'BN': 0.30307037, 'OF': 0.443629, 'RE': 0.42850336, 'SE': 0.31679586, 'TP': 0.33626834, 'UC': 0.43390754}\n","Predicted probabilities for each class: {'BN': 0.2883973, 'OF': 0.45588532, 'RE': 0.4391191, 'SE': 0.32078597, 'TP': 0.33803996, 'UC': 0.4461941}\n","Predicted probabilities for each class: {'BN': 0.29121393, 'OF': 0.44870844, 'RE': 0.43127882, 'SE': 0.31376916, 'TP': 0.33232778, 'UC': 0.4370028}\n","Predicted probabilities for each class: {'BN': 0.3091371, 'OF': 0.44527322, 'RE': 0.43253922, 'SE': 0.32420465, 'TP': 0.3432544, 'UC': 0.43852273}\n","Predicted probabilities for each class: {'BN': 0.31209835, 'OF': 0.43258885, 'RE': 0.41342825, 'SE': 0.30414578, 'TP': 0.32828864, 'UC': 0.41820097}\n","Predicted probabilities for each class: {'BN': 0.3788616, 'OF': 0.3944651, 'RE': 0.3898918, 'SE': 0.30793983, 'TP': 0.3382357, 'UC': 0.39000586}\n","Predicted probabilities for each class: {'BN': 0.32847643, 'OF': 0.42119962, 'RE': 0.40867174, 'SE': 0.30694583, 'TP': 0.331066, 'UC': 0.4111979}\n","Predicted probabilities for each class: {'BN': 0.30051583, 'OF': 0.4436799, 'RE': 0.42791215, 'SE': 0.31483868, 'TP': 0.3342943, 'UC': 0.4331456}\n","Predicted probabilities for each class: {'BN': 0.30280295, 'OF': 0.44399238, 'RE': 0.42840922, 'SE': 0.31659883, 'TP': 0.336161, 'UC': 0.43399456}\n","Predicted probabilities for each class: {'BN': 0.30903968, 'OF': 0.43556142, 'RE': 0.42002642, 'SE': 0.31031775, 'TP': 0.33167574, 'UC': 0.42428628}\n","Predicted probabilities for each class: {'BN': 0.29481018, 'OF': 0.4512412, 'RE': 0.43492866, 'SE': 0.3196151, 'TP': 0.33783734, 'UC': 0.44151577}\n","Predicted probabilities for each class: {'BN': 0.3066337, 'OF': 0.44208616, 'RE': 0.4269228, 'SE': 0.31690553, 'TP': 0.3369332, 'UC': 0.4323884}\n","Predicted probabilities for each class: {'BN': 0.48986986, 'OF': 0.33835623, 'RE': 0.35465062, 'SE': 0.3088366, 'TP': 0.35134408, 'UC': 0.34787866}\n","Predicted probabilities for each class: {'BN': 0.30636156, 'OF': 0.43896577, 'RE': 0.42393872, 'SE': 0.31339678, 'TP': 0.3337442, 'UC': 0.4285728}\n","Predicted probabilities for each class: {'BN': 0.2898248, 'OF': 0.4527768, 'RE': 0.43567652, 'SE': 0.31784528, 'TP': 0.33567134, 'UC': 0.44218668}\n","Predicted probabilities for each class: {'BN': 0.57006025, 'OF': 0.28866336, 'RE': 0.32332438, 'SE': 0.2954525, 'TP': 0.3443477, 'UC': 0.3092446}\n","Predicted probabilities for each class: {'BN': 0.33320042, 'OF': 0.43010306, 'RE': 0.42337438, 'SE': 0.32587442, 'TP': 0.3467169, 'UC': 0.42706972}\n","Predicted probabilities for each class: {'BN': 0.5796892, 'OF': 0.280613, 'RE': 0.31815434, 'SE': 0.29151738, 'TP': 0.34032714, 'UC': 0.3028983}\n","Predicted probabilities for each class: {'BN': 0.29082957, 'OF': 0.45352417, 'RE': 0.4363535, 'SE': 0.31911522, 'TP': 0.33701304, 'UC': 0.44323316}\n","Predicted probabilities for each class: {'BN': 0.32328546, 'OF': 0.42813975, 'RE': 0.41566724, 'SE': 0.31248695, 'TP': 0.3349535, 'UC': 0.41912544}\n","Predicted probabilities for each class: {'BN': 0.31900257, 'OF': 0.43193194, 'RE': 0.41969362, 'SE': 0.3149994, 'TP': 0.33631697, 'UC': 0.42348543}\n","Predicted probabilities for each class: {'BN': 0.29903138, 'OF': 0.452613, 'RE': 0.44000223, 'SE': 0.32706565, 'TP': 0.344292, 'UC': 0.44653755}\n","Predicted probabilities for each class: {'BN': 0.5260609, 'OF': 0.3168778, 'RE': 0.3413524, 'SE': 0.30484003, 'TP': 0.35045895, 'UC': 0.33119825}\n","Predicted probabilities for each class: {'BN': 0.5908425, 'OF': 0.271059, 'RE': 0.31206915, 'SE': 0.28606436, 'TP': 0.33459032, 'UC': 0.2958402}\n","Predicted probabilities for each class: {'BN': 0.30719984, 'OF': 0.4463431, 'RE': 0.434536, 'SE': 0.3253641, 'TP': 0.34372386, 'UC': 0.44030762}\n","Predicted probabilities for each class: {'BN': 0.3060992, 'OF': 0.43730807, 'RE': 0.41746914, 'SE': 0.30582216, 'TP': 0.32884654, 'UC': 0.42278877}\n","Predicted probabilities for each class: {'BN': 0.273368, 'OF': 0.45741996, 'RE': 0.4359078, 'SE': 0.30946174, 'TP': 0.32674918, 'UC': 0.44254184}\n","Predicted probabilities for each class: {'BN': 0.35440135, 'OF': 0.40545696, 'RE': 0.3974283, 'SE': 0.30603915, 'TP': 0.33330384, 'UC': 0.39828104}\n","Predicted probabilities for each class: {'BN': 0.2864024, 'OF': 0.45946848, 'RE': 0.4416989, 'SE': 0.32260746, 'TP': 0.3396534, 'UC': 0.4497776}\n","Predicted probabilities for each class: {'BN': 0.29217595, 'OF': 0.44495243, 'RE': 0.42746755, 'SE': 0.3100952, 'TP': 0.32919675, 'UC': 0.43238595}\n","Predicted probabilities for each class: {'BN': 0.35855225, 'OF': 0.42005217, 'RE': 0.41714263, 'SE': 0.330897, 'TP': 0.35411382, 'UC': 0.4204375}\n","Predicted probabilities for each class: {'BN': 0.28011212, 'OF': 0.46595114, 'RE': 0.44787526, 'SE': 0.3258588, 'TP': 0.34174612, 'UC': 0.4570042}\n","Predicted probabilities for each class: {'BN': 0.3110101, 'OF': 0.4323508, 'RE': 0.41683277, 'SE': 0.3077028, 'TP': 0.32970098, 'UC': 0.42057353}\n","Predicted probabilities for each class: {'BN': 0.31043908, 'OF': 0.44306126, 'RE': 0.4295424, 'SE': 0.3216569, 'TP': 0.34134305, 'UC': 0.43531576}\n","Predicted probabilities for each class: {'BN': 0.3450844, 'OF': 0.4235235, 'RE': 0.4155961, 'SE': 0.32280102, 'TP': 0.34634697, 'UC': 0.4193371}\n","Predicted probabilities for each class: {'BN': 0.58809364, 'OF': 0.2717968, 'RE': 0.31226164, 'SE': 0.28561866, 'TP': 0.33420548, 'UC': 0.29588947}\n","Predicted probabilities for each class: {'BN': 0.47368962, 'OF': 0.3380421, 'RE': 0.35218093, 'SE': 0.2993749, 'TP': 0.34113452, 'UC': 0.34491628}\n","Predicted probabilities for each class: {'BN': 0.5851143, 'OF': 0.27516696, 'RE': 0.31450123, 'SE': 0.2879269, 'TP': 0.33668402, 'UC': 0.2985803}\n","Predicted probabilities for each class: {'BN': 0.32263285, 'OF': 0.4290226, 'RE': 0.41714618, 'SE': 0.3138469, 'TP': 0.33582628, 'UC': 0.42059633}\n","Predicted probabilities for each class: {'BN': 0.35789412, 'OF': 0.41235587, 'RE': 0.407594, 'SE': 0.31969583, 'TP': 0.3445645, 'UC': 0.40946162}\n","Predicted probabilities for each class: {'BN': 0.30482945, 'OF': 0.44364488, 'RE': 0.42824563, 'SE': 0.31745785, 'TP': 0.33720627, 'UC': 0.4339344}\n","Predicted probabilities for each class: {'BN': 0.30520234, 'OF': 0.4351901, 'RE': 0.4197096, 'SE': 0.30813718, 'TP': 0.32896686, 'UC': 0.4234192}\n","Predicted probabilities for each class: {'BN': 0.29579788, 'OF': 0.4517374, 'RE': 0.4359058, 'SE': 0.3212161, 'TP': 0.33927912, 'UC': 0.44264823}\n","Predicted probabilities for each class: {'BN': 0.3489094, 'OF': 0.4048968, 'RE': 0.39599553, 'SE': 0.3017772, 'TP': 0.32895416, 'UC': 0.39637083}\n","Predicted probabilities for each class: {'BN': 0.31707737, 'OF': 0.43042928, 'RE': 0.4189622, 'SE': 0.31315205, 'TP': 0.33413437, 'UC': 0.4219819}\n","Predicted probabilities for each class: {'BN': 0.5862306, 'OF': 0.2737256, 'RE': 0.31344646, 'SE': 0.28659025, 'TP': 0.33543134, 'UC': 0.29748684}\n","Predicted probabilities for each class: {'BN': 0.34855297, 'OF': 0.41066244, 'RE': 0.40073633, 'SE': 0.3071336, 'TP': 0.33396846, 'UC': 0.40248993}\n","Predicted probabilities for each class: {'BN': 0.3228142, 'OF': 0.41730025, 'RE': 0.40363434, 'SE': 0.29847997, 'TP': 0.32303855, 'UC': 0.4050492}\n","Predicted probabilities for each class: {'BN': 0.5667966, 'OF': 0.29559273, 'RE': 0.32811654, 'SE': 0.30063623, 'TP': 0.35019264, 'UC': 0.31556132}\n","Predicted probabilities for each class: {'BN': 0.30238697, 'OF': 0.44081542, 'RE': 0.42501408, 'SE': 0.3124942, 'TP': 0.33259913, 'UC': 0.42975464}\n","Predicted probabilities for each class: {'BN': 0.31469697, 'OF': 0.43268943, 'RE': 0.41985327, 'SE': 0.31300575, 'TP': 0.33405253, 'UC': 0.42346236}\n","Predicted probabilities for each class: {'BN': 0.58907574, 'OF': 0.2715038, 'RE': 0.31213698, 'SE': 0.28551167, 'TP': 0.33416623, 'UC': 0.2959479}\n","Predicted probabilities for each class: {'BN': 0.2903481, 'OF': 0.454244, 'RE': 0.43750477, 'SE': 0.3200674, 'TP': 0.33768803, 'UC': 0.44439137}\n","Predicted probabilities for each class: {'BN': 0.28828302, 'OF': 0.46240273, 'RE': 0.44564143, 'SE': 0.32785326, 'TP': 0.34442514, 'UC': 0.4545855}\n","Predicted probabilities for each class: {'BN': 0.5761139, 'OF': 0.28534263, 'RE': 0.32135302, 'SE': 0.29456243, 'TP': 0.34381956, 'UC': 0.30696625}\n","Predicted probabilities for each class: {'BN': 0.29453415, 'OF': 0.45124003, 'RE': 0.43471295, 'SE': 0.31925896, 'TP': 0.3375324, 'UC': 0.44131267}\n","Predicted probabilities for each class: {'BN': 0.29192495, 'OF': 0.44840178, 'RE': 0.431062, 'SE': 0.31389368, 'TP': 0.33253425, 'UC': 0.43677726}\n","Predicted probabilities for each class: {'BN': 0.59019154, 'OF': 0.2713736, 'RE': 0.31222013, 'SE': 0.28595066, 'TP': 0.33458963, 'UC': 0.29606003}\n","Predicted probabilities for each class: {'BN': 0.34105152, 'OF': 0.4410507, 'RE': 0.43682012, 'SE': 0.3445096, 'TP': 0.3642502, 'UC': 0.44366387}\n","Predicted probabilities for each class: {'BN': 0.27991846, 'OF': 0.45975435, 'RE': 0.44062755, 'SE': 0.31801838, 'TP': 0.33484724, 'UC': 0.44820943}\n","Predicted probabilities for each class: {'BN': 0.5153091, 'OF': 0.32270935, 'RE': 0.34485814, 'SE': 0.30572256, 'TP': 0.35030222, 'UC': 0.33563232}\n","Predicted probabilities for each class: {'BN': 0.30788836, 'OF': 0.44244838, 'RE': 0.42878354, 'SE': 0.31947494, 'TP': 0.33904907, 'UC': 0.43412358}\n","Predicted probabilities for each class: {'BN': 0.31733364, 'OF': 0.42590216, 'RE': 0.41217747, 'SE': 0.3056006, 'TP': 0.32829368, 'UC': 0.4147809}\n","Predicted probabilities for each class: {'BN': 0.28591964, 'OF': 0.45334387, 'RE': 0.435149, 'SE': 0.31522956, 'TP': 0.33301735, 'UC': 0.44156742}\n","Predicted probabilities for each class: {'BN': 0.2796236, 'OF': 0.4603004, 'RE': 0.4410521, 'SE': 0.31832093, 'TP': 0.33511233, 'UC': 0.44877705}\n","Predicted probabilities for each class: {'BN': 0.28706655, 'OF': 0.459504, 'RE': 0.44243404, 'SE': 0.32369512, 'TP': 0.34056473, 'UC': 0.45043173}\n","Predicted probabilities for each class: {'BN': 0.5780309, 'OF': 0.28757703, 'RE': 0.3232298, 'SE': 0.29766747, 'TP': 0.3474271, 'UC': 0.3095141}\n","Predicted probabilities for each class: {'BN': 0.30082232, 'OF': 0.4458966, 'RE': 0.43071586, 'SE': 0.31808606, 'TP': 0.33708325, 'UC': 0.4364066}\n","Predicted probabilities for each class: {'BN': 0.28856006, 'OF': 0.4619707, 'RE': 0.44521153, 'SE': 0.32753932, 'TP': 0.34417886, 'UC': 0.4540679}\n","Predicted probabilities for each class: {'BN': 0.58938694, 'OF': 0.2699791, 'RE': 0.31107327, 'SE': 0.28425953, 'TP': 0.33261502, 'UC': 0.29446134}\n","Predicted probabilities for each class: {'BN': 0.43326488, 'OF': 0.36696196, 'RE': 0.37434277, 'SE': 0.31260565, 'TP': 0.3470945, 'UC': 0.37087816}\n","Predicted probabilities for each class: {'BN': 0.28758973, 'OF': 0.45649043, 'RE': 0.43895566, 'SE': 0.32024997, 'TP': 0.33763033, 'UC': 0.44629598}\n","Predicted probabilities for each class: {'BN': 0.29543006, 'OF': 0.45503467, 'RE': 0.44022122, 'SE': 0.32562372, 'TP': 0.34297436, 'UC': 0.4475346}\n","Predicted probabilities for each class: {'BN': 0.5812123, 'OF': 0.28153443, 'RE': 0.31903765, 'SE': 0.2933238, 'TP': 0.34222946, 'UC': 0.30406755}\n","Predicted probabilities for each class: {'BN': 0.33322546, 'OF': 0.41948795, 'RE': 0.40929666, 'SE': 0.3100735, 'TP': 0.33370265, 'UC': 0.4114144}\n","Predicted probabilities for each class: {'BN': 0.59342617, 'OF': 0.26758224, 'RE': 0.30984023, 'SE': 0.28325933, 'TP': 0.33141184, 'UC': 0.2933458}\n","Predicted probabilities for each class: {'BN': 0.27471668, 'OF': 0.46538058, 'RE': 0.44528547, 'SE': 0.32026958, 'TP': 0.33634564, 'UC': 0.45399445}\n","Predicted probabilities for each class: {'BN': 0.306231, 'OF': 0.45289162, 'RE': 0.44037804, 'SE': 0.33134034, 'TP': 0.34920132, 'UC': 0.44800916}\n","Predicted probabilities for each class: {'BN': 0.5872812, 'OF': 0.27246508, 'RE': 0.31264374, 'SE': 0.28582105, 'TP': 0.33451182, 'UC': 0.2964377}\n","Predicted probabilities for each class: {'BN': 0.30400094, 'OF': 0.43996304, 'RE': 0.42401567, 'SE': 0.31232667, 'TP': 0.33266237, 'UC': 0.42879757}\n","Predicted probabilities for each class: {'BN': 0.5907169, 'OF': 0.2663635, 'RE': 0.30850646, 'SE': 0.2805465, 'TP': 0.32863328, 'UC': 0.29146}\n","Predicted probabilities for each class: {'BN': 0.33695683, 'OF': 0.42058638, 'RE': 0.40957728, 'SE': 0.3120371, 'TP': 0.33650026, 'UC': 0.41250598}\n","Predicted probabilities for each class: {'BN': 0.2944623, 'OF': 0.45699114, 'RE': 0.44194573, 'SE': 0.32700342, 'TP': 0.34414887, 'UC': 0.4497364}\n","Predicted probabilities for each class: {'BN': 0.4321246, 'OF': 0.361507, 'RE': 0.36706975, 'SE': 0.30228955, 'TP': 0.33935848, 'UC': 0.36306816}\n","Predicted probabilities for each class: {'BN': 0.43157452, 'OF': 0.36233765, 'RE': 0.3677501, 'SE': 0.30290857, 'TP': 0.33985597, 'UC': 0.36387384}\n","Predicted probabilities for each class: {'BN': 0.35652032, 'OF': 0.4149987, 'RE': 0.41040045, 'SE': 0.32226428, 'TP': 0.34658164, 'UC': 0.41267857}\n","Predicted probabilities for each class: {'BN': 0.5910548, 'OF': 0.26907554, 'RE': 0.31060314, 'SE': 0.28386727, 'TP': 0.33221588, 'UC': 0.29404822}\n","Predicted probabilities for each class: {'BN': 0.5899519, 'OF': 0.27113515, 'RE': 0.31200162, 'SE': 0.28555676, 'TP': 0.33416525, 'UC': 0.29577577}\n","Predicted probabilities for each class: {'BN': 0.2939345, 'OF': 0.45792195, 'RE': 0.44292107, 'SE': 0.32777542, 'TP': 0.34476456, 'UC': 0.45089057}\n","Predicted probabilities for each class: {'BN': 0.28230667, 'OF': 0.45173526, 'RE': 0.43237656, 'SE': 0.3103567, 'TP': 0.32837197, 'UC': 0.43818516}\n","Predicted probabilities for each class: {'BN': 0.2845632, 'OF': 0.4580893, 'RE': 0.44061443, 'SE': 0.32039812, 'TP': 0.3372833, 'UC': 0.4479358}\n","Predicted probabilities for each class: {'BN': 0.2868293, 'OF': 0.45640308, 'RE': 0.43863535, 'SE': 0.31949162, 'TP': 0.3368972, 'UC': 0.44589972}\n","Predicted probabilities for each class: {'BN': 0.29751602, 'OF': 0.44794324, 'RE': 0.43211737, 'SE': 0.31792718, 'TP': 0.3366033, 'UC': 0.4380587}\n","Predicted probabilities for each class: {'BN': 0.41431522, 'OF': 0.37170306, 'RE': 0.37391603, 'SE': 0.30356976, 'TP': 0.33844855, 'UC': 0.37115204}\n","Predicted probabilities for each class: {'BN': 0.3095718, 'OF': 0.43766057, 'RE': 0.42377895, 'SE': 0.31480628, 'TP': 0.33515924, 'UC': 0.428216}\n","Predicted probabilities for each class: {'BN': 0.29776686, 'OF': 0.4517735, 'RE': 0.436488, 'SE': 0.32285258, 'TP': 0.34091747, 'UC': 0.44336784}\n","Predicted probabilities for each class: {'BN': 0.58306795, 'OF': 0.2797523, 'RE': 0.31774086, 'SE': 0.29171053, 'TP': 0.34100977, 'UC': 0.3027512}\n","Predicted probabilities for each class: {'BN': 0.5619728, 'OF': 0.29751113, 'RE': 0.32969925, 'SE': 0.3018922, 'TP': 0.35000163, 'UC': 0.31687468}\n","Predicted probabilities for each class: {'BN': 0.2970432, 'OF': 0.44746664, 'RE': 0.4311586, 'SE': 0.31664336, 'TP': 0.33552596, 'UC': 0.4370429}\n","Predicted probabilities for each class: {'BN': 0.36138374, 'OF': 0.39960548, 'RE': 0.3927115, 'SE': 0.3036299, 'TP': 0.3320819, 'UC': 0.39281234}\n","Predicted probabilities for each class: {'BN': 0.40461802, 'OF': 0.37861392, 'RE': 0.3796262, 'SE': 0.3065741, 'TP': 0.33964813, 'UC': 0.37752545}\n","Predicted probabilities for each class: {'BN': 0.28591567, 'OF': 0.45633107, 'RE': 0.43864623, 'SE': 0.31903064, 'TP': 0.3362889, 'UC': 0.4457441}\n","Predicted probabilities for each class: {'BN': 0.55071974, 'OF': 0.3035537, 'RE': 0.33308718, 'SE': 0.3022632, 'TP': 0.35014817, 'UC': 0.32116997}\n","Predicted probabilities for each class: {'BN': 0.5872929, 'OF': 0.27141783, 'RE': 0.31184164, 'SE': 0.28463942, 'TP': 0.333231, 'UC': 0.2954266}\n","Predicted probabilities for each class: {'BN': 0.31956893, 'OF': 0.42745313, 'RE': 0.41360915, 'SE': 0.3082687, 'TP': 0.33111534, 'UC': 0.41682822}\n","Predicted probabilities for each class: {'BN': 0.5398272, 'OF': 0.308979, 'RE': 0.3359673, 'SE': 0.30208436, 'TP': 0.34964257, 'UC': 0.32492742}\n","Predicted probabilities for each class: {'BN': 0.29619092, 'OF': 0.44175124, 'RE': 0.42374378, 'SE': 0.30811414, 'TP': 0.3282315, 'UC': 0.42852625}\n","Predicted probabilities for each class: {'BN': 0.27717185, 'OF': 0.46272722, 'RE': 0.4432802, 'SE': 0.31939858, 'TP': 0.33576506, 'UC': 0.45139572}\n","Predicted probabilities for each class: {'BN': 0.5622785, 'OF': 0.2964075, 'RE': 0.32856888, 'SE': 0.29997733, 'TP': 0.34874544, 'UC': 0.31572655}\n","Predicted probabilities for each class: {'BN': 0.5934775, 'OF': 0.26887232, 'RE': 0.3108162, 'SE': 0.2848115, 'TP': 0.33310485, 'UC': 0.2944926}\n","Predicted probabilities for each class: {'BN': 0.35990196, 'OF': 0.40146923, 'RE': 0.39404005, 'SE': 0.3044636, 'TP': 0.332776, 'UC': 0.394473}\n","Predicted probabilities for each class: {'BN': 0.29627237, 'OF': 0.44952637, 'RE': 0.4331096, 'SE': 0.31840774, 'TP': 0.33700687, 'UC': 0.43946895}\n","Predicted probabilities for each class: {'BN': 0.28913593, 'OF': 0.45261514, 'RE': 0.43556938, 'SE': 0.31735545, 'TP': 0.33510682, 'UC': 0.44192612}\n","Predicted probabilities for each class: {'BN': 0.28446454, 'OF': 0.45395043, 'RE': 0.43532968, 'SE': 0.3146847, 'TP': 0.33240193, 'UC': 0.4418186}\n","Predicted probabilities for each class: {'BN': 0.30274823, 'OF': 0.4438978, 'RE': 0.42972872, 'SE': 0.31792688, 'TP': 0.33695143, 'UC': 0.43489587}\n","Predicted probabilities for each class: {'BN': 0.5835288, 'OF': 0.28416532, 'RE': 0.32138142, 'SE': 0.29727772, 'TP': 0.34651116, 'UC': 0.3070879}\n","Predicted probabilities for each class: {'BN': 0.35398227, 'OF': 0.40975013, 'RE': 0.40255034, 'SE': 0.31188965, 'TP': 0.33798277, 'UC': 0.40397403}\n","Predicted probabilities for each class: {'BN': 0.33327398, 'OF': 0.41818154, 'RE': 0.40637964, 'SE': 0.30657512, 'TP': 0.33135352, 'UC': 0.40859193}\n","Predicted probabilities for each class: {'BN': 0.273711, 'OF': 0.46307814, 'RE': 0.44174883, 'SE': 0.31600353, 'TP': 0.3326414, 'UC': 0.4499715}\n","Predicted probabilities for each class: {'BN': 0.32360005, 'OF': 0.43583933, 'RE': 0.4247028, 'SE': 0.32281044, 'TP': 0.3437724, 'UC': 0.42972198}\n","Predicted probabilities for each class: {'BN': 0.32655364, 'OF': 0.42717636, 'RE': 0.41446713, 'SE': 0.3126488, 'TP': 0.33581012, 'UC': 0.41813436}\n","Predicted probabilities for each class: {'BN': 0.52288115, 'OF': 0.31827173, 'RE': 0.3424146, 'SE': 0.30547506, 'TP': 0.35028026, 'UC': 0.33239475}\n","Predicted probabilities for each class: {'BN': 0.29219285, 'OF': 0.45742872, 'RE': 0.4411822, 'SE': 0.3250836, 'TP': 0.3423507, 'UC': 0.4491067}\n","Predicted probabilities for each class: {'BN': 0.58255607, 'OF': 0.27938053, 'RE': 0.3174329, 'SE': 0.29116115, 'TP': 0.34030765, 'UC': 0.3022448}\n","Predicted probabilities for each class: {'BN': 0.29497325, 'OF': 0.44749147, 'RE': 0.4314765, 'SE': 0.31595096, 'TP': 0.33444145, 'UC': 0.43703273}\n","Predicted probabilities for each class: {'BN': 0.27825406, 'OF': 0.461076, 'RE': 0.4416406, 'SE': 0.3182234, 'TP': 0.33485973, 'UC': 0.44943765}\n","Predicted probabilities for each class: {'BN': 0.29343748, 'OF': 0.44955653, 'RE': 0.43302795, 'SE': 0.31680936, 'TP': 0.3351563, 'UC': 0.4390347}\n","Predicted probabilities for each class: {'BN': 0.28648576, 'OF': 0.45681414, 'RE': 0.4390097, 'SE': 0.31971726, 'TP': 0.33705813, 'UC': 0.44634998}\n","Predicted probabilities for each class: {'BN': 0.33925006, 'OF': 0.41206333, 'RE': 0.40025568, 'SE': 0.3022584, 'TP': 0.32870895, 'UC': 0.40184474}\n","Predicted probabilities for each class: {'BN': 0.31564277, 'OF': 0.4385264, 'RE': 0.42545906, 'SE': 0.31973416, 'TP': 0.34032282, 'UC': 0.43064028}\n","Predicted probabilities for each class: {'BN': 0.30300227, 'OF': 0.45084354, 'RE': 0.43660164, 'SE': 0.32561058, 'TP': 0.3439833, 'UC': 0.4436509}\n","Predicted probabilities for each class: {'BN': 0.44755712, 'OF': 0.3728638, 'RE': 0.38213906, 'SE': 0.32795584, 'TP': 0.3625888, 'UC': 0.3803724}\n","Predicted probabilities for each class: {'BN': 0.2916212, 'OF': 0.4519278, 'RE': 0.43431023, 'SE': 0.31736985, 'TP': 0.33565962, 'UC': 0.44098857}\n","Predicted probabilities for each class: {'BN': 0.29937673, 'OF': 0.44584095, 'RE': 0.42932856, 'SE': 0.31589058, 'TP': 0.33525166, 'UC': 0.4351575}\n","Predicted probabilities for each class: {'BN': 0.5914225, 'OF': 0.27015796, 'RE': 0.31145477, 'SE': 0.28520262, 'TP': 0.33368257, 'UC': 0.29518634}\n","Predicted probabilities for each class: {'BN': 0.59143174, 'OF': 0.26653385, 'RE': 0.3087595, 'SE': 0.28109848, 'TP': 0.3291837, 'UC': 0.29180315}\n","Predicted probabilities for each class: {'BN': 0.40481392, 'OF': 0.38821262, 'RE': 0.39116016, 'SE': 0.3213147, 'TP': 0.3512857, 'UC': 0.3905723}\n","Predicted probabilities for each class: {'BN': 0.3194797, 'OF': 0.43383232, 'RE': 0.42171097, 'SE': 0.31748253, 'TP': 0.3385906, 'UC': 0.42598253}\n","Predicted probabilities for each class: {'BN': 0.29751402, 'OF': 0.45331085, 'RE': 0.43847615, 'SE': 0.32482994, 'TP': 0.34256917, 'UC': 0.44561908}\n","Predicted probabilities for each class: {'BN': 0.54843843, 'OF': 0.3049636, 'RE': 0.33381546, 'SE': 0.30233905, 'TP': 0.3502875, 'UC': 0.32220185}\n","Predicted probabilities for each class: {'BN': 0.2790336, 'OF': 0.46005562, 'RE': 0.44070092, 'SE': 0.31763226, 'TP': 0.33441988, 'UC': 0.4483014}\n","Predicted probabilities for each class: {'BN': 0.542256, 'OF': 0.30726147, 'RE': 0.3349844, 'SE': 0.30186582, 'TP': 0.3492664, 'UC': 0.32363698}\n","Predicted probabilities for each class: {'BN': 0.5684253, 'OF': 0.3002559, 'RE': 0.33279094, 'SE': 0.308817, 'TP': 0.35680577, 'UC': 0.32072955}\n","Predicted probabilities for each class: {'BN': 0.33411255, 'OF': 0.42166582, 'RE': 0.4102108, 'SE': 0.31138593, 'TP': 0.33559835, 'UC': 0.41315964}\n","Predicted probabilities for each class: {'BN': 0.31447327, 'OF': 0.43344587, 'RE': 0.41792756, 'SE': 0.3106475, 'TP': 0.33292547, 'UC': 0.42231184}\n","Predicted probabilities for each class: {'BN': 0.28884947, 'OF': 0.448585, 'RE': 0.43110242, 'SE': 0.31234002, 'TP': 0.3306701, 'UC': 0.4364908}\n","Predicted probabilities for each class: {'BN': 0.5245915, 'OF': 0.31957424, 'RE': 0.34275275, 'SE': 0.305781, 'TP': 0.35208654, 'UC': 0.33342534}\n","Predicted probabilities for each class: {'BN': 0.30635822, 'OF': 0.44081375, 'RE': 0.4266321, 'SE': 0.3163819, 'TP': 0.3361331, 'UC': 0.43150848}\n","Predicted probabilities for each class: {'BN': 0.37228042, 'OF': 0.39378598, 'RE': 0.38856897, 'SE': 0.30348688, 'TP': 0.3333843, 'UC': 0.38814142}\n","Predicted probabilities for each class: {'BN': 0.3204451, 'OF': 0.42957795, 'RE': 0.41578957, 'SE': 0.31118307, 'TP': 0.33381894, 'UC': 0.4195612}\n","Predicted probabilities for each class: {'BN': 0.5804347, 'OF': 0.28617206, 'RE': 0.32254204, 'SE': 0.29790446, 'TP': 0.34719655, 'UC': 0.30850688}\n","Predicted probabilities for each class: {'BN': 0.29524967, 'OF': 0.45221245, 'RE': 0.43616363, 'SE': 0.32119408, 'TP': 0.33925587, 'UC': 0.4429981}\n","Predicted probabilities for each class: {'BN': 0.325455, 'OF': 0.42369562, 'RE': 0.4105627, 'SE': 0.30763137, 'TP': 0.3313606, 'UC': 0.41343558}\n","Predicted probabilities for each class: {'BN': 0.30432314, 'OF': 0.4415489, 'RE': 0.42591044, 'SE': 0.31460643, 'TP': 0.33464336, 'UC': 0.43106458}\n","Predicted probabilities for each class: {'BN': 0.27137622, 'OF': 0.46263766, 'RE': 0.4405585, 'SE': 0.31348753, 'TP': 0.33020097, 'UC': 0.44852218}\n","Predicted probabilities for each class: {'BN': 0.513891, 'OF': 0.3213899, 'RE': 0.34363985, 'SE': 0.30354095, 'TP': 0.3481257, 'UC': 0.33408585}\n","Predicted probabilities for each class: {'BN': 0.31060085, 'OF': 0.442258, 'RE': 0.42894763, 'SE': 0.32108217, 'TP': 0.34078494, 'UC': 0.434508}\n","Predicted probabilities for each class: {'BN': 0.3407826, 'OF': 0.41788915, 'RE': 0.40715393, 'SE': 0.3110079, 'TP': 0.33620948, 'UC': 0.4098239}\n","Predicted probabilities for each class: {'BN': 0.3452308, 'OF': 0.4239848, 'RE': 0.41735116, 'SE': 0.32491064, 'TP': 0.3477672, 'UC': 0.42093325}\n","Predicted probabilities for each class: {'BN': 0.292786, 'OF': 0.45666912, 'RE': 0.44044796, 'SE': 0.32460308, 'TP': 0.34199566, 'UC': 0.44823515}\n","Predicted probabilities for each class: {'BN': 0.58829844, 'OF': 0.2725972, 'RE': 0.31289926, 'SE': 0.28650454, 'TP': 0.3351707, 'UC': 0.29678473}\n","Predicted probabilities for each class: {'BN': 0.27978674, 'OF': 0.45467913, 'RE': 0.43557906, 'SE': 0.31243038, 'TP': 0.3297859, 'UC': 0.44172245}\n","Predicted probabilities for each class: {'BN': 0.29004526, 'OF': 0.45242918, 'RE': 0.4348813, 'SE': 0.31713018, 'TP': 0.33517867, 'UC': 0.4414464}\n","Predicted probabilities for each class: {'BN': 0.34477887, 'OF': 0.4183207, 'RE': 0.41112384, 'SE': 0.31753054, 'TP': 0.34133434, 'UC': 0.4134756}\n","Predicted probabilities for each class: {'BN': 0.29889694, 'OF': 0.44487163, 'RE': 0.4290012, 'SE': 0.31522697, 'TP': 0.3343984, 'UC': 0.4343659}\n","Predicted probabilities for each class: {'BN': 0.4175239, 'OF': 0.36636135, 'RE': 0.36910778, 'SE': 0.29874215, 'TP': 0.3348599, 'UC': 0.36557952}\n","Predicted probabilities for each class: {'BN': 0.30349573, 'OF': 0.44323504, 'RE': 0.428163, 'SE': 0.31663948, 'TP': 0.33617896, 'UC': 0.43351075}\n","Predicted probabilities for each class: {'BN': 0.34127516, 'OF': 0.41933152, 'RE': 0.41110212, 'SE': 0.31598285, 'TP': 0.33965176, 'UC': 0.4135923}\n","Predicted probabilities for each class: {'BN': 0.29350767, 'OF': 0.45423102, 'RE': 0.4380228, 'SE': 0.32230335, 'TP': 0.3400396, 'UC': 0.445207}\n","Predicted probabilities for each class: {'BN': 0.2824521, 'OF': 0.46154267, 'RE': 0.44320306, 'SE': 0.32213798, 'TP': 0.33876836, 'UC': 0.4514549}\n","Predicted probabilities for each class: {'BN': 0.39297745, 'OF': 0.37825844, 'RE': 0.3772616, 'SE': 0.2986278, 'TP': 0.33153573, 'UC': 0.37467754}\n","Predicted probabilities for each class: {'BN': 0.29417098, 'OF': 0.4575988, 'RE': 0.44259366, 'SE': 0.32754704, 'TP': 0.34459206, 'UC': 0.45050508}\n","Predicted probabilities for each class: {'BN': 0.5877621, 'OF': 0.2725125, 'RE': 0.3127552, 'SE': 0.28608814, 'TP': 0.33479148, 'UC': 0.29658395}\n","Predicted probabilities for each class: {'BN': 0.28459233, 'OF': 0.45771027, 'RE': 0.43981057, 'SE': 0.31956455, 'TP': 0.33665043, 'UC': 0.44715253}\n","Predicted probabilities for each class: {'BN': 0.58022624, 'OF': 0.28153324, 'RE': 0.31896207, 'SE': 0.29289195, 'TP': 0.34170204, 'UC': 0.30389065}\n","Predicted probabilities for each class: {'BN': 0.38730994, 'OF': 0.38999403, 'RE': 0.38696852, 'SE': 0.30807573, 'TP': 0.33934432, 'UC': 0.38657308}\n","Predicted probabilities for each class: {'BN': 0.28865317, 'OF': 0.44879183, 'RE': 0.43106475, 'SE': 0.3122482, 'TP': 0.33058447, 'UC': 0.43655524}\n","Predicted probabilities for each class: {'BN': 0.54607844, 'OF': 0.3059963, 'RE': 0.33460242, 'SE': 0.30291831, 'TP': 0.3501954, 'UC': 0.3230014}\n","Predicted probabilities for each class: {'BN': 0.5524921, 'OF': 0.30260387, 'RE': 0.33249733, 'SE': 0.30204794, 'TP': 0.35009858, 'UC': 0.32046854}\n","Predicted probabilities for each class: {'BN': 0.31492212, 'OF': 0.43275818, 'RE': 0.41936314, 'SE': 0.31259468, 'TP': 0.33389133, 'UC': 0.42314348}\n","Predicted probabilities for each class: {'BN': 0.31678963, 'OF': 0.4344105, 'RE': 0.4201669, 'SE': 0.31431675, 'TP': 0.33613333, 'UC': 0.4247531}\n","Predicted probabilities for each class: {'BN': 0.30745965, 'OF': 0.441296, 'RE': 0.42764407, 'SE': 0.3180248, 'TP': 0.33763614, 'UC': 0.43264234}\n","Predicted probabilities for each class: {'BN': 0.29971707, 'OF': 0.44132024, 'RE': 0.4267744, 'SE': 0.3130842, 'TP': 0.33223808, 'UC': 0.4309876}\n","Predicted probabilities for each class: {'BN': 0.304874, 'OF': 0.43701336, 'RE': 0.42162848, 'SE': 0.31015578, 'TP': 0.3306639, 'UC': 0.42571458}\n","Predicted probabilities for each class: {'BN': 0.28214142, 'OF': 0.44632602, 'RE': 0.42591354, 'SE': 0.303229, 'TP': 0.32228965, 'UC': 0.43063316}\n","Predicted probabilities for each class: {'BN': 0.34004098, 'OF': 0.43144548, 'RE': 0.425138, 'SE': 0.33122566, 'TP': 0.3524881, 'UC': 0.42987454}\n","Predicted probabilities for each class: {'BN': 0.38922563, 'OF': 0.3844597, 'RE': 0.38213432, 'SE': 0.30304438, 'TP': 0.33509588, 'UC': 0.38073245}\n","Predicted probabilities for each class: {'BN': 0.32062903, 'OF': 0.43039197, 'RE': 0.41825217, 'SE': 0.31412166, 'TP': 0.3358167, 'UC': 0.4218517}\n","Predicted probabilities for each class: {'BN': 0.28610522, 'OF': 0.45173675, 'RE': 0.43378702, 'SE': 0.31386673, 'TP': 0.33170587, 'UC': 0.4397453}\n","Predicted probabilities for each class: {'BN': 0.3562692, 'OF': 0.40216714, 'RE': 0.3944529, 'SE': 0.30341247, 'TP': 0.3312377, 'UC': 0.39478055}\n","Predicted probabilities for each class: {'BN': 0.30105066, 'OF': 0.4520711, 'RE': 0.4374521, 'SE': 0.32559073, 'TP': 0.34373495, 'UC': 0.44468778}\n","Predicted probabilities for each class: {'BN': 0.27930477, 'OF': 0.45968634, 'RE': 0.44029298, 'SE': 0.31734467, 'TP': 0.33420974, 'UC': 0.4478392}\n","Predicted probabilities for each class: {'BN': 0.28210804, 'OF': 0.4568985, 'RE': 0.43871912, 'SE': 0.31706697, 'TP': 0.334059, 'UC': 0.44555473}\n","Predicted probabilities for each class: {'BN': 0.30363557, 'OF': 0.44939056, 'RE': 0.43652952, 'SE': 0.3257797, 'TP': 0.34382895, 'UC': 0.4429178}\n","Predicted probabilities for each class: {'BN': 0.29817232, 'OF': 0.44937032, 'RE': 0.43369192, 'SE': 0.3199889, 'TP': 0.33853167, 'UC': 0.44006458}\n","Predicted probabilities for each class: {'BN': 0.31485182, 'OF': 0.43117788, 'RE': 0.41640258, 'SE': 0.3091158, 'TP': 0.33136576, 'UC': 0.42014557}\n","Predicted probabilities for each class: {'BN': 0.29176417, 'OF': 0.44907087, 'RE': 0.4319826, 'SE': 0.31480217, 'TP': 0.33325028, 'UC': 0.4377774}\n","Predicted probabilities for each class: {'BN': 0.29533032, 'OF': 0.44625863, 'RE': 0.43025246, 'SE': 0.31475258, 'TP': 0.33344364, 'UC': 0.43552303}\n","Predicted probabilities for each class: {'BN': 0.28528398, 'OF': 0.456243, 'RE': 0.43833178, 'SE': 0.31833443, 'TP': 0.33564416, 'UC': 0.44536868}\n","Predicted probabilities for each class: {'BN': 0.3612599, 'OF': 0.41759506, 'RE': 0.41454786, 'SE': 0.32919306, 'TP': 0.35306868, 'UC': 0.41757262}\n","Predicted probabilities for each class: {'BN': 0.27788255, 'OF': 0.4571416, 'RE': 0.43723905, 'SE': 0.31326583, 'TP': 0.3304575, 'UC': 0.44399288}\n","Predicted probabilities for each class: {'BN': 0.5865341, 'OF': 0.27373618, 'RE': 0.31351373, 'SE': 0.2868157, 'TP': 0.33563203, 'UC': 0.2975341}\n","Predicted probabilities for each class: {'BN': 0.3839993, 'OF': 0.40196872, 'RE': 0.402481, 'SE': 0.3255924, 'TP': 0.35238814, 'UC': 0.40345296}\n","Predicted probabilities for each class: {'BN': 0.30197778, 'OF': 0.4453358, 'RE': 0.4309546, 'SE': 0.318896, 'TP': 0.33775657, 'UC': 0.43643633}\n","Predicted probabilities for each class: {'BN': 0.3151703, 'OF': 0.43117362, 'RE': 0.4176844, 'SE': 0.31079635, 'TP': 0.3323891, 'UC': 0.4211602}\n","Predicted probabilities for each class: {'BN': 0.33342516, 'OF': 0.42191324, 'RE': 0.4102907, 'SE': 0.3111735, 'TP': 0.33533615, 'UC': 0.4132748}\n","Predicted probabilities for each class: {'BN': 0.3564987, 'OF': 0.41758335, 'RE': 0.41259056, 'SE': 0.32471326, 'TP': 0.34895614, 'UC': 0.41550767}\n","Predicted probabilities for each class: {'BN': 0.3755936, 'OF': 0.39706033, 'RE': 0.39456946, 'SE': 0.31237522, 'TP': 0.34045386, 'UC': 0.39438984}\n","Predicted probabilities for each class: {'BN': 0.35056442, 'OF': 0.41515747, 'RE': 0.40860868, 'SE': 0.3174699, 'TP': 0.34195518, 'UC': 0.41075188}\n","Predicted probabilities for each class: {'BN': 0.30871972, 'OF': 0.44063854, 'RE': 0.42772126, 'SE': 0.3187349, 'TP': 0.3382426, 'UC': 0.43250662}\n","Predicted probabilities for each class: {'BN': 0.46060652, 'OF': 0.3525306, 'RE': 0.36338156, 'SE': 0.30876032, 'TP': 0.34822857, 'UC': 0.3584142}\n","Predicted probabilities for each class: {'BN': 0.50941265, 'OF': 0.32731417, 'RE': 0.34785628, 'SE': 0.30727345, 'TP': 0.35159925, 'UC': 0.33940566}\n","Predicted probabilities for each class: {'BN': 0.28397322, 'OF': 0.45481256, 'RE': 0.4363582, 'SE': 0.31551373, 'TP': 0.3330397, 'UC': 0.44296616}\n","Predicted probabilities for each class: {'BN': 0.581495, 'OF': 0.28065068, 'RE': 0.31848177, 'SE': 0.2928683, 'TP': 0.34143972, 'UC': 0.30322704}\n","Predicted probabilities for each class: {'BN': 0.28376654, 'OF': 0.45412517, 'RE': 0.43533024, 'SE': 0.31432253, 'TP': 0.3320123, 'UC': 0.44181532}\n","Predicted probabilities for each class: {'BN': 0.28016084, 'OF': 0.4606203, 'RE': 0.44174743, 'SE': 0.31934303, 'TP': 0.33601955, 'UC': 0.44954175}\n","Predicted probabilities for each class: {'BN': 0.31818464, 'OF': 0.4393753, 'RE': 0.42849118, 'SE': 0.32427147, 'TP': 0.34416786, 'UC': 0.43366843}\n","Predicted probabilities for each class: {'BN': 0.55849075, 'OF': 0.29818094, 'RE': 0.32953689, 'SE': 0.30009148, 'TP': 0.34857917, 'UC': 0.31693348}\n","Predicted probabilities for each class: {'BN': 0.5826274, 'OF': 0.27876127, 'RE': 0.31696123, 'SE': 0.2905758, 'TP': 0.339647, 'UC': 0.30164587}\n","Predicted probabilities for each class: {'BN': 0.56774974, 'OF': 0.29019207, 'RE': 0.32429817, 'SE': 0.2961465, 'TP': 0.34483063, 'UC': 0.31041363}\n","Predicted probabilities for each class: {'BN': 0.5412416, 'OF': 0.31018028, 'RE': 0.33785665, 'SE': 0.305918, 'TP': 0.3522238, 'UC': 0.32672957}\n","Predicted probabilities for each class: {'BN': 0.5612589, 'OF': 0.29534447, 'RE': 0.3276255, 'SE': 0.29837558, 'TP': 0.3470018, 'UC': 0.31451657}\n","Predicted probabilities for each class: {'BN': 0.5764705, 'OF': 0.28338027, 'RE': 0.3199228, 'SE': 0.29289606, 'TP': 0.34180328, 'UC': 0.3050732}\n","Predicted probabilities for each class: {'BN': 0.33723092, 'OF': 0.4159349, 'RE': 0.4049102, 'SE': 0.3067807, 'TP': 0.33194545, 'UC': 0.40689105}\n","Predicted probabilities for each class: {'BN': 0.31783465, 'OF': 0.43460813, 'RE': 0.42226362, 'SE': 0.31725806, 'TP': 0.33820784, 'UC': 0.42659238}\n","Predicted probabilities for each class: {'BN': 0.52963626, 'OF': 0.31668508, 'RE': 0.34120294, 'SE': 0.3056814, 'TP': 0.35209602, 'UC': 0.33133408}\n","Predicted probabilities for each class: {'BN': 0.28321815, 'OF': 0.44865677, 'RE': 0.43015715, 'SE': 0.3083884, 'TP': 0.3264843, 'UC': 0.43505317}\n","Predicted probabilities for each class: {'BN': 0.3067152, 'OF': 0.44195062, 'RE': 0.42681095, 'SE': 0.3168252, 'TP': 0.3368653, 'UC': 0.43224815}\n","Predicted probabilities for each class: {'BN': 0.4899026, 'OF': 0.33724898, 'RE': 0.3538559, 'SE': 0.30779216, 'TP': 0.3502992, 'UC': 0.34678972}\n","Predicted probabilities for each class: {'BN': 0.34967512, 'OF': 0.40641555, 'RE': 0.3976129, 'SE': 0.30411816, 'TP': 0.33104458, 'UC': 0.3983945}\n","Predicted probabilities for each class: {'BN': 0.3351045, 'OF': 0.42954674, 'RE': 0.42056146, 'SE': 0.32375282, 'TP': 0.345813, 'UC': 0.4249029}\n","Predicted probabilities for each class: {'BN': 0.29710773, 'OF': 0.4525062, 'RE': 0.43865672, 'SE': 0.32473364, 'TP': 0.3421367, 'UC': 0.44523874}\n","Predicted probabilities for each class: {'BN': 0.2990803, 'OF': 0.44931093, 'RE': 0.43577534, 'SE': 0.32260463, 'TP': 0.3404344, 'UC': 0.44167677}\n","Predicted probabilities for each class: {'BN': 0.3144328, 'OF': 0.44609088, 'RE': 0.4361956, 'SE': 0.33081847, 'TP': 0.34925413, 'UC': 0.44239923}\n","Predicted probabilities for each class: {'BN': 0.30371523, 'OF': 0.44852903, 'RE': 0.43462497, 'SE': 0.32381555, 'TP': 0.34233615, 'UC': 0.44107598}\n","Predicted probabilities for each class: {'BN': 0.5798738, 'OF': 0.2800229, 'RE': 0.31758898, 'SE': 0.29056707, 'TP': 0.33965647, 'UC': 0.30239818}\n","Predicted probabilities for each class: {'BN': 0.28915006, 'OF': 0.46132845, 'RE': 0.44465807, 'SE': 0.32725477, 'TP': 0.34398302, 'UC': 0.4533879}\n","Predicted probabilities for each class: {'BN': 0.2909746, 'OF': 0.44855636, 'RE': 0.4316785, 'SE': 0.31408092, 'TP': 0.3323786, 'UC': 0.43719265}\n","Predicted probabilities for each class: {'BN': 0.29370573, 'OF': 0.45828003, 'RE': 0.44331422, 'SE': 0.32807243, 'TP': 0.3449944, 'UC': 0.45134196}\n","Predicted probabilities for each class: {'BN': 0.28948015, 'OF': 0.44862926, 'RE': 0.43053618, 'SE': 0.31209776, 'TP': 0.3307197, 'UC': 0.4361831}\n","Predicted probabilities for each class: {'BN': 0.32500395, 'OF': 0.42573848, 'RE': 0.41284198, 'SE': 0.31002688, 'TP': 0.33330357, 'UC': 0.41606152}\n","Predicted probabilities for each class: {'BN': 0.29229498, 'OF': 0.45248482, 'RE': 0.43564454, 'SE': 0.31907758, 'TP': 0.33713007, 'UC': 0.442346}\n","Predicted probabilities for each class: {'BN': 0.3325441, 'OF': 0.41825587, 'RE': 0.4080453, 'SE': 0.30829054, 'TP': 0.33203444, 'UC': 0.40982494}\n","Predicted probabilities for each class: {'BN': 0.28746364, 'OF': 0.45416898, 'RE': 0.43651634, 'SE': 0.3175112, 'TP': 0.33517328, 'UC': 0.44322896}\n","Predicted probabilities for each class: {'BN': 0.58091825, 'OF': 0.28118503, 'RE': 0.31870818, 'SE': 0.29250133, 'TP': 0.34163338, 'UC': 0.3036876}\n","Predicted probabilities for each class: {'BN': 0.27730763, 'OF': 0.462702, 'RE': 0.44312143, 'SE': 0.31932682, 'TP': 0.3357432, 'UC': 0.45128548}\n","Predicted probabilities for each class: {'BN': 0.3104977, 'OF': 0.44724157, 'RE': 0.43496352, 'SE': 0.3275996, 'TP': 0.3463791, 'UC': 0.44154984}\n","Predicted probabilities for each class: {'BN': 0.3297575, 'OF': 0.42253205, 'RE': 0.41228566, 'SE': 0.31183404, 'TP': 0.33468658, 'UC': 0.4146905}\n","Predicted probabilities for each class: {'BN': 0.32081166, 'OF': 0.41966453, 'RE': 0.40659404, 'SE': 0.3009734, 'TP': 0.3245682, 'UC': 0.40809777}\n","Predicted probabilities for each class: {'BN': 0.2778876, 'OF': 0.46161205, 'RE': 0.44216865, 'SE': 0.31859225, 'TP': 0.3351407, 'UC': 0.450067}\n","Predicted probabilities for each class: {'BN': 0.32050335, 'OF': 0.43544787, 'RE': 0.42285132, 'SE': 0.3192772, 'TP': 0.3405302, 'UC': 0.42775154}\n","Predicted probabilities for each class: {'BN': 0.5830871, 'OF': 0.2784476, 'RE': 0.31677273, 'SE': 0.29045832, 'TP': 0.33948362, 'UC': 0.30143464}\n","Predicted probabilities for each class: {'BN': 0.35182416, 'OF': 0.4060548, 'RE': 0.3973694, 'SE': 0.30476335, 'TP': 0.33198923, 'UC': 0.39824843}\n","Predicted probabilities for each class: {'BN': 0.4232384, 'OF': 0.3699224, 'RE': 0.37534916, 'SE': 0.3095409, 'TP': 0.3435387, 'UC': 0.37211776}\n","Predicted probabilities for each class: {'BN': 0.57619554, 'OF': 0.28408372, 'RE': 0.3203766, 'SE': 0.2932781, 'TP': 0.3424155, 'UC': 0.30573776}\n","Predicted probabilities for each class: {'BN': 0.30690372, 'OF': 0.44595206, 'RE': 0.4315411, 'SE': 0.32209155, 'TP': 0.34145105, 'UC': 0.43784794}\n","Predicted probabilities for each class: {'BN': 0.32080773, 'OF': 0.4299548, 'RE': 0.4169184, 'SE': 0.31271946, 'TP': 0.3349005, 'UC': 0.42066}\n","Predicted probabilities for each class: {'BN': 0.30531022, 'OF': 0.43819052, 'RE': 0.42353326, 'SE': 0.31243286, 'TP': 0.33256647, 'UC': 0.42776924}\n","Predicted probabilities for each class: {'BN': 0.321341, 'OF': 0.42669544, 'RE': 0.41294634, 'SE': 0.30836108, 'TP': 0.33148903, 'UC': 0.41616923}\n","Predicted probabilities for each class: {'BN': 0.31826955, 'OF': 0.43294558, 'RE': 0.4191907, 'SE': 0.31394482, 'TP': 0.33588785, 'UC': 0.42348126}\n","Predicted probabilities for each class: {'BN': 0.28065693, 'OF': 0.4574831, 'RE': 0.43838796, 'SE': 0.31600899, 'TP': 0.3331, 'UC': 0.44543952}\n","Predicted probabilities for each class: {'BN': 0.43575355, 'OF': 0.37123036, 'RE': 0.38031736, 'SE': 0.32132983, 'TP': 0.35425273, 'UC': 0.37748218}\n","Predicted probabilities for each class: {'BN': 0.29263818, 'OF': 0.4569041, 'RE': 0.44067416, 'SE': 0.32476857, 'TP': 0.34212735, 'UC': 0.44850847}\n","Predicted probabilities for each class: {'BN': 0.4827963, 'OF': 0.34496346, 'RE': 0.36143276, 'SE': 0.31572238, 'TP': 0.3552367, 'UC': 0.35518408}\n","Predicted probabilities for each class: {'BN': 0.51313734, 'OF': 0.3217139, 'RE': 0.34375134, 'SE': 0.30336714, 'TP': 0.347984, 'UC': 0.33426833}\n","Predicted probabilities for each class: {'BN': 0.2811235, 'OF': 0.4535766, 'RE': 0.4342522, 'SE': 0.31173554, 'TP': 0.3294313, 'UC': 0.44036943}\n","Predicted probabilities for each class: {'BN': 0.2900054, 'OF': 0.4555088, 'RE': 0.43840867, 'SE': 0.3209159, 'TP': 0.3384864, 'UC': 0.445692}\n","Predicted probabilities for each class: {'BN': 0.36191738, 'OF': 0.40990686, 'RE': 0.40576473, 'SE': 0.31943318, 'TP': 0.3447991, 'UC': 0.40736222}\n","Predicted probabilities for each class: {'BN': 0.2946874, 'OF': 0.4571563, 'RE': 0.44217658, 'SE': 0.32736906, 'TP': 0.34449983, 'UC': 0.45002905}\n","Predicted probabilities for each class: {'BN': 0.57339233, 'OF': 0.2872959, 'RE': 0.3225946, 'SE': 0.2955065, 'TP': 0.34461164, 'UC': 0.30844274}\n","Predicted probabilities for each class: {'BN': 0.2847818, 'OF': 0.45943758, 'RE': 0.44158655, 'SE': 0.3216207, 'TP': 0.33850884, 'UC': 0.44944978}\n","Predicted probabilities for each class: {'BN': 0.33250627, 'OF': 0.42781052, 'RE': 0.4171296, 'SE': 0.31866336, 'TP': 0.34137157, 'UC': 0.4211424}\n","Predicted probabilities for each class: {'BN': 0.27883747, 'OF': 0.45552033, 'RE': 0.43518692, 'SE': 0.31158793, 'TP': 0.32921746, 'UC': 0.44176722}\n","Predicted probabilities for each class: {'BN': 0.3205466, 'OF': 0.42848602, 'RE': 0.4163928, 'SE': 0.31195605, 'TP': 0.3338783, 'UC': 0.41953075}\n","Predicted probabilities for each class: {'BN': 0.2926421, 'OF': 0.45694363, 'RE': 0.44073018, 'SE': 0.32483202, 'TP': 0.34218037, 'UC': 0.44857287}\n","Predicted probabilities for each class: {'BN': 0.5712362, 'OF': 0.28792897, 'RE': 0.3228942, 'SE': 0.29531777, 'TP': 0.34418485, 'UC': 0.30871525}\n","Predicted probabilities for each class: {'BN': 0.5916807, 'OF': 0.2734098, 'RE': 0.31399238, 'SE': 0.28912193, 'TP': 0.33791378, 'UC': 0.2982753}\n","Predicted probabilities for each class: {'BN': 0.29178718, 'OF': 0.45704633, 'RE': 0.44111392, 'SE': 0.32472026, 'TP': 0.3418998, 'UC': 0.44877595}\n","Predicted probabilities for each class: {'BN': 0.32659304, 'OF': 0.4269148, 'RE': 0.41406897, 'SE': 0.3122102, 'TP': 0.33548033, 'UC': 0.41771457}\n","Predicted probabilities for each class: {'BN': 0.27819803, 'OF': 0.4611585, 'RE': 0.44170082, 'SE': 0.31826013, 'TP': 0.33489007, 'UC': 0.44951966}\n","Predicted probabilities for each class: {'BN': 0.2940529, 'OF': 0.4505577, 'RE': 0.43364936, 'SE': 0.31789535, 'TP': 0.33630377, 'UC': 0.44012102}\n","Predicted probabilities for each class: {'BN': 0.31033075, 'OF': 0.44470155, 'RE': 0.4321921, 'SE': 0.32449237, 'TP': 0.34357917, 'UC': 0.43815377}\n","Predicted probabilities for each class: {'BN': 0.5582744, 'OF': 0.29894423, 'RE': 0.3303353, 'SE': 0.30139437, 'TP': 0.349407, 'UC': 0.31773335}\n","Predicted probabilities for each class: {'BN': 0.3715435, 'OF': 0.40138128, 'RE': 0.39648247, 'SE': 0.3127155, 'TP': 0.34103277, 'UC': 0.39736542}\n","Predicted probabilities for each class: {'BN': 0.33511356, 'OF': 0.42094964, 'RE': 0.40965512, 'SE': 0.3112252, 'TP': 0.335576, 'UC': 0.4125169}\n","Predicted probabilities for each class: {'BN': 0.32908225, 'OF': 0.42576, 'RE': 0.41335157, 'SE': 0.31256887, 'TP': 0.33609346, 'UC': 0.41689336}\n","Predicted probabilities for each class: {'BN': 0.31572667, 'OF': 0.43054324, 'RE': 0.4160396, 'SE': 0.30913398, 'TP': 0.33143932, 'UC': 0.41967174}\n","Predicted probabilities for each class: {'BN': 0.28563303, 'OF': 0.45257837, 'RE': 0.43453014, 'SE': 0.31438202, 'TP': 0.33216888, 'UC': 0.44065887}\n","Predicted probabilities for each class: {'BN': 0.2877172, 'OF': 0.45089993, 'RE': 0.4325831, 'SE': 0.31343773, 'TP': 0.33167717, 'UC': 0.43863177}\n","Predicted probabilities for each class: {'BN': 0.59095913, 'OF': 0.27290228, 'RE': 0.3134472, 'SE': 0.2878888, 'TP': 0.33682448, 'UC': 0.29777664}\n","Predicted probabilities for each class: {'BN': 0.29929018, 'OF': 0.44725817, 'RE': 0.43186203, 'SE': 0.31855497, 'TP': 0.33732468, 'UC': 0.4377597}\n","Predicted probabilities for each class: {'BN': 0.27331182, 'OF': 0.46309578, 'RE': 0.44161782, 'SE': 0.31564766, 'TP': 0.3322988, 'UC': 0.44982412}\n","Predicted probabilities for each class: {'BN': 0.28564757, 'OF': 0.45213094, 'RE': 0.43339196, 'SE': 0.3132482, 'TP': 0.33129787, 'UC': 0.43961087}\n","Predicted probabilities for each class: {'BN': 0.3005004, 'OF': 0.444135, 'RE': 0.4290512, 'SE': 0.31606707, 'TP': 0.335185, 'UC': 0.43423197}\n","Predicted probabilities for each class: {'BN': 0.3166597, 'OF': 0.43008542, 'RE': 0.41553444, 'SE': 0.30901438, 'TP': 0.33151817, 'UC': 0.419184}\n","Predicted probabilities for each class: {'BN': 0.33289704, 'OF': 0.41805595, 'RE': 0.40618703, 'SE': 0.30621076, 'TP': 0.33097163, 'UC': 0.4083682}\n","Predicted probabilities for each class: {'BN': 0.27825174, 'OF': 0.46179125, 'RE': 0.44192752, 'SE': 0.3185778, 'TP': 0.33528632, 'UC': 0.45004043}\n","Predicted probabilities for each class: {'BN': 0.40443438, 'OF': 0.37005037, 'RE': 0.37085745, 'SE': 0.29544994, 'TP': 0.33038136, 'UC': 0.36741376}\n","Predicted probabilities for each class: {'BN': 0.31408888, 'OF': 0.43020147, 'RE': 0.41625938, 'SE': 0.30870736, 'TP': 0.33048266, 'UC': 0.41950217}\n","Predicted probabilities for each class: {'BN': 0.3235653, 'OF': 0.43994993, 'RE': 0.43048704, 'SE': 0.32916358, 'TP': 0.34899607, 'UC': 0.4361299}\n","Predicted probabilities for each class: {'BN': 0.58625346, 'OF': 0.27409407, 'RE': 0.31375661, 'SE': 0.28711003, 'TP': 0.33593437, 'UC': 0.29781365}\n","Predicted probabilities for each class: {'BN': 0.5853868, 'OF': 0.27693978, 'RE': 0.31588367, 'SE': 0.2898474, 'TP': 0.33892325, 'UC': 0.30040663}\n","Predicted probabilities for each class: {'BN': 0.28479928, 'OF': 0.45584756, 'RE': 0.43775883, 'SE': 0.31747866, 'TP': 0.33482724, 'UC': 0.44466138}\n","Predicted probabilities for each class: {'BN': 0.27961078, 'OF': 0.45521134, 'RE': 0.4357545, 'SE': 0.31255203, 'TP': 0.3299669, 'UC': 0.44211945}\n","Predicted probabilities for each class: {'BN': 0.28522086, 'OF': 0.45747164, 'RE': 0.43976197, 'SE': 0.31985638, 'TP': 0.33695033, 'UC': 0.4470825}\n","Predicted probabilities for each class: {'BN': 0.5487321, 'OF': 0.3045159, 'RE': 0.33365762, 'SE': 0.3023838, 'TP': 0.35008478, 'UC': 0.32185665}\n","Predicted probabilities for each class: {'BN': 0.3094487, 'OF': 0.43477932, 'RE': 0.41959363, 'SE': 0.31013337, 'TP': 0.33137214, 'UC': 0.42363977}\n","Predicted probabilities for each class: {'BN': 0.31326157, 'OF': 0.4342737, 'RE': 0.41861528, 'SE': 0.31082135, 'TP': 0.33291626, 'UC': 0.4230839}\n","Predicted probabilities for each class: {'BN': 0.28874937, 'OF': 0.4541409, 'RE': 0.43655577, 'SE': 0.31825292, 'TP': 0.3360203, 'UC': 0.4434239}\n","Predicted probabilities for each class: {'BN': 0.58583915, 'OF': 0.27555564, 'RE': 0.31494144, 'SE': 0.28901607, 'TP': 0.33756083, 'UC': 0.2990855}\n","Predicted probabilities for each class: {'BN': 0.5655238, 'OF': 0.29327214, 'RE': 0.326445, 'SE': 0.29816452, 'TP': 0.347052, 'UC': 0.31310546}\n","Predicted probabilities for each class: {'BN': 0.35233745, 'OF': 0.4060208, 'RE': 0.39733326, 'SE': 0.30492032, 'TP': 0.33224356, 'UC': 0.398244}\n","Predicted probabilities for each class: {'BN': 0.29688573, 'OF': 0.43974108, 'RE': 0.42198056, 'SE': 0.30650032, 'TP': 0.32685933, 'UC': 0.42633975}\n","Predicted probabilities for each class: {'BN': 0.28971827, 'OF': 0.44527566, 'RE': 0.42646623, 'SE': 0.3077808, 'TP': 0.3271193, 'UC': 0.43150014}\n","Predicted probabilities for each class: {'BN': 0.28469455, 'OF': 0.45354027, 'RE': 0.43493703, 'SE': 0.314382, 'TP': 0.3321582, 'UC': 0.44134536}\n","Predicted probabilities for each class: {'BN': 0.4277511, 'OF': 0.36230817, 'RE': 0.367509, 'SE': 0.30107126, 'TP': 0.3376144, 'UC': 0.36334518}\n","Predicted probabilities for each class: {'BN': 0.5576213, 'OF': 0.30114537, 'RE': 0.3318359, 'SE': 0.30291414, 'TP': 0.35136297, 'UC': 0.319766}\n","Predicted probabilities for each class: {'BN': 0.313633, 'OF': 0.43145964, 'RE': 0.41663897, 'SE': 0.3088049, 'TP': 0.33087674, 'UC': 0.42032436}\n","Predicted probabilities for each class: {'BN': 0.5826718, 'OF': 0.2776554, 'RE': 0.31613523, 'SE': 0.2894852, 'TP': 0.33839273, 'UC': 0.30054006}\n","Predicted probabilities for each class: {'BN': 0.29262012, 'OF': 0.45176056, 'RE': 0.43458506, 'SE': 0.31812966, 'TP': 0.33640712, 'UC': 0.4412286}\n","Predicted probabilities for each class: {'BN': 0.3258205, 'OF': 0.4233531, 'RE': 0.41026428, 'SE': 0.30748582, 'TP': 0.33127257, 'UC': 0.41310066}\n","Predicted probabilities for each class: {'BN': 0.36198968, 'OF': 0.41719705, 'RE': 0.4148035, 'SE': 0.32981172, 'TP': 0.35352835, 'UC': 0.41765478}\n","Predicted probabilities for each class: {'BN': 0.36355934, 'OF': 0.4142642, 'RE': 0.41124, 'SE': 0.32649606, 'TP': 0.35099858, 'UC': 0.41372147}\n","Predicted probabilities for each class: {'BN': 0.31597546, 'OF': 0.44091615, 'RE': 0.42930818, 'SE': 0.32412532, 'TP': 0.3438811, 'UC': 0.43479547}\n","Predicted probabilities for each class: {'BN': 0.39996088, 'OF': 0.37776786, 'RE': 0.37748244, 'SE': 0.30189955, 'TP': 0.335351, 'UC': 0.37520945}\n","Predicted probabilities for each class: {'BN': 0.27137896, 'OF': 0.46649945, 'RE': 0.44582033, 'SE': 0.31901792, 'TP': 0.3348652, 'UC': 0.45450696}\n","Predicted probabilities for each class: {'BN': 0.3201617, 'OF': 0.42945853, 'RE': 0.4148991, 'SE': 0.31000766, 'TP': 0.3330285, 'UC': 0.4187932}\n","Predicted probabilities for each class: {'BN': 0.36555243, 'OF': 0.40119112, 'RE': 0.39479032, 'SE': 0.30796778, 'TP': 0.33642262, 'UC': 0.39545313}\n","Predicted probabilities for each class: {'BN': 0.28940502, 'OF': 0.46066144, 'RE': 0.44394594, 'SE': 0.32662663, 'TP': 0.34345868, 'UC': 0.4525298}\n","Predicted probabilities for each class: {'BN': 0.29232526, 'OF': 0.4522018, 'RE': 0.43534824, 'SE': 0.31879926, 'TP': 0.33686158, 'UC': 0.44199002}\n","Predicted probabilities for each class: {'BN': 0.331562, 'OF': 0.4230938, 'RE': 0.4113117, 'SE': 0.31145912, 'TP': 0.3353102, 'UC': 0.41439095}\n","Predicted probabilities for each class: {'BN': 0.3218618, 'OF': 0.42551258, 'RE': 0.41210267, 'SE': 0.30766797, 'TP': 0.33084023, 'UC': 0.41503856}\n","Predicted probabilities for each class: {'BN': 0.33803535, 'OF': 0.4189239, 'RE': 0.4080735, 'SE': 0.3107989, 'TP': 0.33555847, 'UC': 0.41070557}\n","Predicted probabilities for each class: {'BN': 0.32498556, 'OF': 0.42943063, 'RE': 0.4178964, 'SE': 0.31590042, 'TP': 0.33790964, 'UC': 0.4216544}\n","Predicted probabilities for each class: {'BN': 0.31494308, 'OF': 0.43866047, 'RE': 0.4264551, 'SE': 0.32043588, 'TP': 0.34059697, 'UC': 0.43136945}\n","Predicted probabilities for each class: {'BN': 0.4266625, 'OF': 0.363038, 'RE': 0.3681111, 'SE': 0.30126184, 'TP': 0.33771554, 'UC': 0.36398607}\n","Predicted probabilities for each class: {'BN': 0.27708754, 'OF': 0.4627262, 'RE': 0.4432183, 'SE': 0.31929106, 'TP': 0.33566973, 'UC': 0.4513381}\n","Predicted probabilities for each class: {'BN': 0.37430775, 'OF': 0.39704138, 'RE': 0.39183584, 'SE': 0.30827114, 'TP': 0.33790314, 'UC': 0.39218444}\n","Predicted probabilities for each class: {'BN': 0.58851796, 'OF': 0.27705425, 'RE': 0.31636822, 'SE': 0.29153243, 'TP': 0.34068137, 'UC': 0.3011363}\n","Predicted probabilities for each class: {'BN': 0.58515745, 'OF': 0.2833415, 'RE': 0.32098952, 'SE': 0.2973185, 'TP': 0.3464685, 'UC': 0.3065339}\n","Predicted probabilities for each class: {'BN': 0.5842513, 'OF': 0.2768385, 'RE': 0.31569374, 'SE': 0.28930384, 'TP': 0.33823547, 'UC': 0.30004358}\n","Predicted probabilities for each class: {'BN': 0.27418265, 'OF': 0.46490458, 'RE': 0.4451334, 'SE': 0.31976265, 'TP': 0.3357353, 'UC': 0.45351166}\n","Predicted probabilities for each class: {'BN': 0.2828107, 'OF': 0.46280414, 'RE': 0.44513318, 'SE': 0.3243794, 'TP': 0.34067583, 'UC': 0.45361617}\n","Predicted probabilities for each class: {'BN': 0.32493246, 'OF': 0.43657506, 'RE': 0.4263238, 'SE': 0.32522878, 'TP': 0.34591383, 'UC': 0.43147764}\n","Predicted probabilities for each class: {'BN': 0.5211788, 'OF': 0.3210555, 'RE': 0.3437516, 'SE': 0.3059738, 'TP': 0.351743, 'UC': 0.33451468}\n","Predicted probabilities for each class: {'BN': 0.57580876, 'OF': 0.28509724, 'RE': 0.32110068, 'SE': 0.2941823, 'TP': 0.3433674, 'UC': 0.3066794}\n","Predicted probabilities for each class: {'BN': 0.31219432, 'OF': 0.43324095, 'RE': 0.41813132, 'SE': 0.30975214, 'TP': 0.3315786, 'UC': 0.42211968}\n","Predicted probabilities for each class: {'BN': 0.3276079, 'OF': 0.43780345, 'RE': 0.4296128, 'SE': 0.3301376, 'TP': 0.3501485, 'UC': 0.4349025}\n","Predicted probabilities for each class: {'BN': 0.27786934, 'OF': 0.46166447, 'RE': 0.44219196, 'SE': 0.31860986, 'TP': 0.33516154, 'UC': 0.450111}\n","Predicted probabilities for each class: {'BN': 0.34850365, 'OF': 0.41365433, 'RE': 0.40438384, 'SE': 0.31143126, 'TP': 0.33741444, 'UC': 0.4066028}\n","Predicted probabilities for each class: {'BN': 0.27598304, 'OF': 0.4639261, 'RE': 0.44427225, 'SE': 0.31983647, 'TP': 0.336031, 'UC': 0.45261934}\n","Predicted probabilities for each class: {'BN': 0.3353284, 'OF': 0.42004383, 'RE': 0.4091627, 'SE': 0.31086463, 'TP': 0.3350495, 'UC': 0.41177872}\n","Predicted probabilities for each class: {'BN': 0.49943867, 'OF': 0.33174598, 'RE': 0.35040355, 'SE': 0.30688965, 'TP': 0.35031682, 'UC': 0.34252033}\n","Predicted probabilities for each class: {'BN': 0.29904523, 'OF': 0.44754222, 'RE': 0.43192887, 'SE': 0.31850275, 'TP': 0.33730796, 'UC': 0.43793327}\n","Predicted probabilities for each class: {'BN': 0.29024762, 'OF': 0.45297393, 'RE': 0.43564972, 'SE': 0.318045, 'TP': 0.33599573, 'UC': 0.44233984}\n","Predicted probabilities for each class: {'BN': 0.2955585, 'OF': 0.44849738, 'RE': 0.4322745, 'SE': 0.31709653, 'TP': 0.33565995, 'UC': 0.4382162}\n","Predicted probabilities for each class: {'BN': 0.5645129, 'OF': 0.29410437, 'RE': 0.32708398, 'SE': 0.29891977, 'TP': 0.34744686, 'UC': 0.31380528}\n","Predicted probabilities for each class: {'BN': 0.58047676, 'OF': 0.28131595, 'RE': 0.31864607, 'SE': 0.2921211, 'TP': 0.34145236, 'UC': 0.30380198}\n","Predicted probabilities for each class: {'BN': 0.32079345, 'OF': 0.43237805, 'RE': 0.41913834, 'SE': 0.31525084, 'TP': 0.3371956, 'UC': 0.4235039}\n","Predicted probabilities for each class: {'BN': 0.2931814, 'OF': 0.4566204, 'RE': 0.4405031, 'SE': 0.32486433, 'TP': 0.34226772, 'UC': 0.44830453}\n","Predicted probabilities for each class: {'BN': 0.32686448, 'OF': 0.42238533, 'RE': 0.40963915, 'SE': 0.30728248, 'TP': 0.33114982, 'UC': 0.4122958}\n","Predicted probabilities for each class: {'BN': 0.31516317, 'OF': 0.44227973, 'RE': 0.43183374, 'SE': 0.32639617, 'TP': 0.3455087, 'UC': 0.43724465}\n","Predicted probabilities for each class: {'BN': 0.3471735, 'OF': 0.4128517, 'RE': 0.4034789, 'SE': 0.30975845, 'TP': 0.33574882, 'UC': 0.4054136}\n","Predicted probabilities for each class: {'BN': 0.5857537, 'OF': 0.28237858, 'RE': 0.32030472, 'SE': 0.2966366, 'TP': 0.34565908, 'UC': 0.30570674}\n","Predicted probabilities for each class: {'BN': 0.38179395, 'OF': 0.38904646, 'RE': 0.3854418, 'SE': 0.30386558, 'TP': 0.33488476, 'UC': 0.3845618}\n","Predicted probabilities for each class: {'BN': 0.5528781, 'OF': 0.30230972, 'RE': 0.3322087, 'SE': 0.3017598, 'TP': 0.34995, 'UC': 0.32021543}\n","Predicted probabilities for each class: {'BN': 0.3043902, 'OF': 0.4358282, 'RE': 0.42023167, 'SE': 0.30831024, 'TP': 0.32902166, 'UC': 0.4240186}\n","Predicted probabilities for each class: {'BN': 0.3055808, 'OF': 0.44717807, 'RE': 0.43219614, 'SE': 0.32217976, 'TP': 0.34146413, 'UC': 0.4387955}\n","Predicted probabilities for each class: {'BN': 0.28673142, 'OF': 0.45636165, 'RE': 0.4385427, 'SE': 0.31934565, 'TP': 0.33676177, 'UC': 0.44579783}\n","Predicted probabilities for each class: {'BN': 0.31300765, 'OF': 0.44512317, 'RE': 0.4328536, 'SE': 0.32656097, 'TP': 0.3458259, 'UC': 0.43920246}\n","Predicted probabilities for each class: {'BN': 0.29014853, 'OF': 0.46017724, 'RE': 0.44357854, 'SE': 0.32662496, 'TP': 0.34353602, 'UC': 0.45209926}\n","Predicted probabilities for each class: {'BN': 0.2950067, 'OF': 0.45411843, 'RE': 0.43892848, 'SE': 0.32402307, 'TP': 0.3415392, 'UC': 0.44603845}\n","Predicted probabilities for each class: {'BN': 0.29429397, 'OF': 0.4572182, 'RE': 0.44216236, 'SE': 0.32714862, 'TP': 0.3442594, 'UC': 0.4499961}\n","Predicted probabilities for each class: {'BN': 0.29001734, 'OF': 0.45150056, 'RE': 0.43376863, 'SE': 0.31589746, 'TP': 0.33413023, 'UC': 0.44014347}\n","Predicted probabilities for each class: {'BN': 0.5725522, 'OF': 0.28645334, 'RE': 0.3218814, 'SE': 0.2943335, 'TP': 0.34317878, 'UC': 0.30747408}\n","Predicted probabilities for each class: {'BN': 0.51508474, 'OF': 0.32114884, 'RE': 0.343554, 'SE': 0.3038651, 'TP': 0.34855476, 'UC': 0.33400172}\n","Predicted probabilities for each class: {'BN': 0.28554332, 'OF': 0.4613609, 'RE': 0.44420594, 'SE': 0.32479993, 'TP': 0.34135953, 'UC': 0.45254698}\n","Predicted probabilities for each class: {'BN': 0.58808935, 'OF': 0.27285224, 'RE': 0.3130511, 'SE': 0.28658596, 'TP': 0.33535132, 'UC': 0.2970036}\n","Predicted probabilities for each class: {'BN': 0.3038784, 'OF': 0.45717165, 'RE': 0.44580975, 'SE': 0.33584544, 'TP': 0.35272855, 'UC': 0.45399278}\n","Predicted probabilities for each class: {'BN': 0.3404694, 'OF': 0.41731572, 'RE': 0.40824044, 'SE': 0.31226847, 'TP': 0.3365364, 'UC': 0.41038993}\n","Predicted probabilities for each class: {'BN': 0.31850916, 'OF': 0.43956083, 'RE': 0.42793596, 'SE': 0.323881, 'TP': 0.3440695, 'UC': 0.43337995}\n","Predicted probabilities for each class: {'BN': 0.3146507, 'OF': 0.43889293, 'RE': 0.42531338, 'SE': 0.31907782, 'TP': 0.33973914, 'UC': 0.4305908}\n","Predicted probabilities for each class: {'BN': 0.50911415, 'OF': 0.32659858, 'RE': 0.3472869, 'SE': 0.30643943, 'TP': 0.35072088, 'UC': 0.33865145}\n","Predicted probabilities for each class: {'BN': 0.30259266, 'OF': 0.4459974, 'RE': 0.43227795, 'SE': 0.3206077, 'TP': 0.339231, 'UC': 0.43783534}\n","Predicted probabilities for each class: {'BN': 0.581983, 'OF': 0.2806619, 'RE': 0.3183997, 'SE': 0.29236767, 'TP': 0.3415606, 'UC': 0.30338487}\n","Predicted probabilities for each class: {'BN': 0.29369485, 'OF': 0.44576007, 'RE': 0.42816314, 'SE': 0.31166545, 'TP': 0.3308926, 'UC': 0.4335223}\n","Predicted probabilities for each class: {'BN': 0.27687913, 'OF': 0.46258578, 'RE': 0.4430096, 'SE': 0.31895897, 'TP': 0.33535272, 'UC': 0.45107692}\n","Predicted probabilities for each class: {'BN': 0.28133225, 'OF': 0.45758504, 'RE': 0.43900797, 'SE': 0.3169883, 'TP': 0.333986, 'UC': 0.44603637}\n","Predicted probabilities for each class: {'BN': 0.29456824, 'OF': 0.45570013, 'RE': 0.4397858, 'SE': 0.32480866, 'TP': 0.34237638, 'UC': 0.44746935}\n","Predicted probabilities for each class: {'BN': 0.3293368, 'OF': 0.42119598, 'RE': 0.40881836, 'SE': 0.3075204, 'TP': 0.33167198, 'UC': 0.4113983}\n","Predicted probabilities for each class: {'BN': 0.53204226, 'OF': 0.31665686, 'RE': 0.34206045, 'SE': 0.30836874, 'TP': 0.35385314, 'UC': 0.3320427}\n","Predicted probabilities for each class: {'BN': 0.3248891, 'OF': 0.42507643, 'RE': 0.41201285, 'SE': 0.3090189, 'TP': 0.33244976, 'UC': 0.41510516}\n","Predicted probabilities for each class: {'BN': 0.306603, 'OF': 0.43654224, 'RE': 0.41911826, 'SE': 0.3081166, 'TP': 0.32994887, 'UC': 0.42378}\n","Predicted probabilities for each class: {'BN': 0.48825163, 'OF': 0.33750337, 'RE': 0.35373455, 'SE': 0.30695364, 'TP': 0.3494706, 'UC': 0.3467134}\n","Predicted probabilities for each class: {'BN': 0.31666493, 'OF': 0.434003, 'RE': 0.42009845, 'SE': 0.31417644, 'TP': 0.33586818, 'UC': 0.42448628}\n","Predicted probabilities for each class: {'BN': 0.33222854, 'OF': 0.41987562, 'RE': 0.40411898, 'SE': 0.30309662, 'TP': 0.32992184, 'UC': 0.40753123}\n","Predicted probabilities for each class: {'BN': 0.47759512, 'OF': 0.34541866, 'RE': 0.3591544, 'SE': 0.3099358, 'TP': 0.35121596, 'UC': 0.35343325}\n","Predicted probabilities for each class: {'BN': 0.51507187, 'OF': 0.32208848, 'RE': 0.3441421, 'SE': 0.30443186, 'TP': 0.34940752, 'UC': 0.334821}\n","Predicted probabilities for each class: {'BN': 0.28044277, 'OF': 0.45857048, 'RE': 0.43927702, 'SE': 0.31686285, 'TP': 0.33392036, 'UC': 0.446651}\n","Predicted probabilities for each class: {'BN': 0.31331477, 'OF': 0.43212336, 'RE': 0.41708294, 'SE': 0.3091229, 'TP': 0.33119604, 'UC': 0.42092782}\n","Predicted probabilities for each class: {'BN': 0.56071156, 'OF': 0.2979497, 'RE': 0.32957965, 'SE': 0.30076623, 'TP': 0.34954718, 'UC': 0.31701717}\n","Predicted probabilities for each class: {'BN': 0.27605802, 'OF': 0.4658023, 'RE': 0.44656086, 'SE': 0.3223089, 'TP': 0.3381892, 'UC': 0.45536256}\n","Predicted probabilities for each class: {'BN': 0.27768183, 'OF': 0.45231575, 'RE': 0.43209305, 'SE': 0.30765298, 'TP': 0.3253922, 'UC': 0.4376488}\n","Predicted probabilities for each class: {'BN': 0.3083579, 'OF': 0.43401828, 'RE': 0.41933432, 'SE': 0.3093451, 'TP': 0.33029976, 'UC': 0.42296812}\n","Predicted probabilities for each class: {'BN': 0.5645105, 'OF': 0.29355773, 'RE': 0.3265924, 'SE': 0.29808664, 'TP': 0.3468206, 'UC': 0.31323928}\n","Predicted probabilities for each class: {'BN': 0.33588505, 'OF': 0.41532916, 'RE': 0.40337554, 'SE': 0.30424836, 'TP': 0.32991296, 'UC': 0.4052871}\n","Predicted probabilities for each class: {'BN': 0.30782077, 'OF': 0.43398413, 'RE': 0.41783234, 'SE': 0.3072407, 'TP': 0.32895485, 'UC': 0.4217274}\n","Predicted probabilities for each class: {'BN': 0.2951629, 'OF': 0.44864538, 'RE': 0.4339115, 'SE': 0.3185832, 'TP': 0.33651444, 'UC': 0.4394464}\n","Predicted probabilities for each class: {'BN': 0.28046846, 'OF': 0.45826918, 'RE': 0.4390297, 'SE': 0.31659645, 'TP': 0.3336734, 'UC': 0.44630477}\n","Predicted probabilities for each class: {'BN': 0.37543747, 'OF': 0.39599976, 'RE': 0.39149415, 'SE': 0.30848002, 'TP': 0.33794406, 'UC': 0.39159045}\n","Predicted probabilities for each class: {'BN': 0.27749884, 'OF': 0.4573175, 'RE': 0.43740463, 'SE': 0.3132549, 'TP': 0.33037028, 'UC': 0.44417197}\n","Predicted probabilities for each class: {'BN': 0.27697033, 'OF': 0.46025258, 'RE': 0.44017026, 'SE': 0.31599066, 'TP': 0.33279836, 'UC': 0.447721}\n","Predicted probabilities for each class: {'BN': 0.28939825, 'OF': 0.453194, 'RE': 0.4360462, 'SE': 0.318025, 'TP': 0.33577976, 'UC': 0.44262287}\n","Predicted probabilities for each class: {'BN': 0.2951913, 'OF': 0.4552254, 'RE': 0.43946284, 'SE': 0.32477665, 'TP': 0.34240177, 'UC': 0.4470603}\n","Predicted probabilities for each class: {'BN': 0.34594584, 'OF': 0.4096755, 'RE': 0.40000695, 'SE': 0.30513042, 'TP': 0.3316061, 'UC': 0.40125826}\n","Predicted probabilities for each class: {'BN': 0.5182979, 'OF': 0.32293653, 'RE': 0.3456691, 'SE': 0.30797336, 'TP': 0.35248438, 'UC': 0.33643493}\n","Predicted probabilities for each class: {'BN': 0.5812162, 'OF': 0.27812746, 'RE': 0.3162555, 'SE': 0.2890769, 'TP': 0.33811146, 'UC': 0.3007998}\n","Predicted probabilities for each class: {'BN': 0.3815159, 'OF': 0.39701927, 'RE': 0.39510262, 'SE': 0.315678, 'TP': 0.3441603, 'UC': 0.39530605}\n","Predicted probabilities for each class: {'BN': 0.3058974, 'OF': 0.44400802, 'RE': 0.4301172, 'SE': 0.31998736, 'TP': 0.33920503, 'UC': 0.43564326}\n","Predicted probabilities for each class: {'BN': 0.27884603, 'OF': 0.4604441, 'RE': 0.44113275, 'SE': 0.31799418, 'TP': 0.3347069, 'UC': 0.44880438}\n","Predicted probabilities for each class: {'BN': 0.28037798, 'OF': 0.45543638, 'RE': 0.4360786, 'SE': 0.3133446, 'TP': 0.3307527, 'UC': 0.44259554}\n","Predicted probabilities for each class: {'BN': 0.29467857, 'OF': 0.45689327, 'RE': 0.44185847, 'SE': 0.3270273, 'TP': 0.34419894, 'UC': 0.44965133}\n","Predicted probabilities for each class: {'BN': 0.27905285, 'OF': 0.45895636, 'RE': 0.438884, 'SE': 0.31572437, 'TP': 0.33289337, 'UC': 0.44636998}\n","Predicted probabilities for each class: {'BN': 0.2838058, 'OF': 0.45018476, 'RE': 0.43160534, 'SE': 0.31024873, 'TP': 0.3283041, 'UC': 0.43700135}\n","Predicted probabilities for each class: {'BN': 0.37578008, 'OF': 0.3986852, 'RE': 0.3948386, 'SE': 0.31271443, 'TP': 0.3413458, 'UC': 0.39532164}\n","Predicted probabilities for each class: {'BN': 0.58032054, 'OF': 0.2816758, 'RE': 0.31897202, 'SE': 0.2925942, 'TP': 0.34183842, 'UC': 0.3040969}\n","Predicted probabilities for each class: {'BN': 0.29856938, 'OF': 0.44129768, 'RE': 0.42520425, 'SE': 0.3108324, 'TP': 0.33050877, 'UC': 0.42969236}\n","Predicted probabilities for each class: {'BN': 0.2792218, 'OF': 0.46030664, 'RE': 0.441066, 'SE': 0.31812808, 'TP': 0.33486405, 'UC': 0.44873515}\n","Predicted probabilities for each class: {'BN': 0.28821108, 'OF': 0.45339444, 'RE': 0.43593597, 'SE': 0.3172752, 'TP': 0.33501044, 'UC': 0.44247866}\n","Predicted probabilities for each class: {'BN': 0.30007377, 'OF': 0.44508028, 'RE': 0.4297382, 'SE': 0.31661776, 'TP': 0.3356843, 'UC': 0.43517023}\n","Predicted probabilities for each class: {'BN': 0.2922804, 'OF': 0.45007786, 'RE': 0.43284124, 'SE': 0.31607467, 'TP': 0.33449364, 'UC': 0.43902162}\n","Predicted probabilities for each class: {'BN': 0.30040896, 'OF': 0.44515312, 'RE': 0.42962828, 'SE': 0.31668338, 'TP': 0.33585423, 'UC': 0.4351567}\n","Predicted probabilities for each class: {'BN': 0.57599175, 'OF': 0.2854167, 'RE': 0.32140464, 'SE': 0.29457164, 'TP': 0.34385318, 'UC': 0.30702138}\n","Predicted probabilities for each class: {'BN': 0.3189447, 'OF': 0.44000098, 'RE': 0.4283265, 'SE': 0.32453611, 'TP': 0.34474826, 'UC': 0.43394938}\n","Predicted probabilities for each class: {'BN': 0.3529455, 'OF': 0.40633652, 'RE': 0.39796078, 'SE': 0.3059856, 'TP': 0.33312842, 'UC': 0.3989266}\n","Predicted probabilities for each class: {'BN': 0.38809454, 'OF': 0.39144436, 'RE': 0.39055386, 'SE': 0.31300923, 'TP': 0.3427114, 'UC': 0.38997126}\n","Predicted probabilities for each class: {'BN': 0.27980536, 'OF': 0.4604695, 'RE': 0.44131142, 'SE': 0.31869432, 'TP': 0.33545437, 'UC': 0.44908613}\n","Predicted probabilities for each class: {'BN': 0.5892772, 'OF': 0.27646148, 'RE': 0.31602803, 'SE': 0.29145443, 'TP': 0.34041774, 'UC': 0.3006337}\n","Predicted probabilities for each class: {'BN': 0.5840163, 'OF': 0.27671844, 'RE': 0.31553704, 'SE': 0.2889646, 'TP': 0.33793113, 'UC': 0.29990864}\n","Predicted probabilities for each class: {'BN': 0.5620567, 'OF': 0.29501688, 'RE': 0.3274394, 'SE': 0.29846975, 'TP': 0.34707052, 'UC': 0.3143295}\n","Predicted probabilities for each class: {'BN': 0.56551635, 'OF': 0.2932935, 'RE': 0.32643926, 'SE': 0.29812932, 'TP': 0.34705442, 'UC': 0.31312332}\n","Predicted probabilities for each class: {'BN': 0.2964967, 'OF': 0.45020452, 'RE': 0.4342682, 'SE': 0.3197553, 'TP': 0.3381278, 'UC': 0.44070837}\n","Predicted probabilities for each class: {'BN': 0.29384264, 'OF': 0.45223597, 'RE': 0.4362247, 'SE': 0.3205304, 'TP': 0.33841488, 'UC': 0.44286752}\n","Predicted probabilities for each class: {'BN': 0.35725707, 'OF': 0.41047, 'RE': 0.40454325, 'SE': 0.3158202, 'TP': 0.3414688, 'UC': 0.40619472}\n","Predicted probabilities for each class: {'BN': 0.31501827, 'OF': 0.43885523, 'RE': 0.426174, 'SE': 0.32022214, 'TP': 0.3405223, 'UC': 0.431275}\n","Predicted probabilities for each class: {'BN': 0.5656313, 'OF': 0.29349342, 'RE': 0.32662132, 'SE': 0.29843113, 'TP': 0.347344, 'UC': 0.31333646}\n","Predicted probabilities for each class: {'BN': 0.5121281, 'OF': 0.32841077, 'RE': 0.34956324, 'SE': 0.31094864, 'TP': 0.3546704, 'UC': 0.34126896}\n","Predicted probabilities for each class: {'BN': 0.3159512, 'OF': 0.44563016, 'RE': 0.43568805, 'SE': 0.3310352, 'TP': 0.34969476, 'UC': 0.44197416}\n","Predicted probabilities for each class: {'BN': 0.2986272, 'OF': 0.45336986, 'RE': 0.43874446, 'SE': 0.32567394, 'TP': 0.34347734, 'UC': 0.44598213}\n","Predicted probabilities for each class: {'BN': 0.32770303, 'OF': 0.42454875, 'RE': 0.41299057, 'SE': 0.3116406, 'TP': 0.33462167, 'UC': 0.41594213}\n","Predicted probabilities for each class: {'BN': 0.27650535, 'OF': 0.45854142, 'RE': 0.43848786, 'SE': 0.31389302, 'TP': 0.33083066, 'UC': 0.4454859}\n","Predicted probabilities for each class: {'BN': 0.4344158, 'OF': 0.3601709, 'RE': 0.3663218, 'SE': 0.30237755, 'TP': 0.3395308, 'UC': 0.3621043}\n","Predicted probabilities for each class: {'BN': 0.5698638, 'OF': 0.29022586, 'RE': 0.32442844, 'SE': 0.2967203, 'TP': 0.34596434, 'UC': 0.31077513}\n","Predicted probabilities for each class: {'BN': 0.57162374, 'OF': 0.28976607, 'RE': 0.32445464, 'SE': 0.29769984, 'TP': 0.3465088, 'UC': 0.3106104}\n","Predicted probabilities for each class: {'BN': 0.27948952, 'OF': 0.45961854, 'RE': 0.43993756, 'SE': 0.31707233, 'TP': 0.33407918, 'UC': 0.44756013}\n","Predicted probabilities for each class: {'BN': 0.286616, 'OF': 0.45458564, 'RE': 0.4364681, 'SE': 0.31704637, 'TP': 0.3347424, 'UC': 0.4432966}\n","Predicted probabilities for each class: {'BN': 0.35947827, 'OF': 0.40170658, 'RE': 0.3941776, 'SE': 0.3044244, 'TP': 0.3327086, 'UC': 0.39463875}\n","Predicted probabilities for each class: {'BN': 0.3165371, 'OF': 0.42177594, 'RE': 0.4067047, 'SE': 0.29897103, 'TP': 0.32280427, 'UC': 0.40867883}\n","Predicted probabilities for each class: {'BN': 0.2970754, 'OF': 0.43973115, 'RE': 0.42239162, 'SE': 0.3070265, 'TP': 0.32720125, 'UC': 0.4266565}\n","Predicted probabilities for each class: {'BN': 0.29465455, 'OF': 0.4449461, 'RE': 0.42763633, 'SE': 0.31159317, 'TP': 0.33086127, 'UC': 0.43282852}\n","Predicted probabilities for each class: {'BN': 0.32937708, 'OF': 0.41384658, 'RE': 0.40214267, 'SE': 0.29982877, 'TP': 0.32472637, 'UC': 0.4029917}\n","Predicted probabilities for each class: {'BN': 0.59137774, 'OF': 0.27227017, 'RE': 0.31305423, 'SE': 0.287636, 'TP': 0.3363219, 'UC': 0.2971405}\n"]}]},{"cell_type":"markdown","source":["##다중 이진 분류(plan B)"],"metadata":{"id":"5s-39EIjlJG7"}},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import GCNConv, global_mean_pool\n","from torch_geometric.data import DataLoader\n","from torch_geometric.utils import from_networkx\n","from sklearn.model_selection import train_test_split\n","import pickle\n","import networkx as nx\n","import base64\n","import pandas as pd\n","import numpy as np\n","\n","# 취약점 클래스 리스트 정의\n","vulnerability_classes = ['BN', 'SE', 'OF', 'RE', 'TP', 'UC']\n","\n","# 바이너리 인코딩 함수 정의\n","def encode_labels(labels, classes):\n","    encoded = [0] * len(classes)\n","    for label in labels:\n","        if label in classes:\n","            encoded[classes.index(label)] = 1\n","    return encoded\n","\n","# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 취약점 컬럼을 리스트로 변환\n","df['Vul'] = df['Vul'].apply(eval)\n","\n","graph_list = []\n","labels = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","    labels.append(encode_labels(row['Vul'], vulnerability_classes))\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    data = from_networkx(graph)\n","    data.x = torch.ones((data.num_nodes, 1))  # 노드 특징 행렬 설정\n","    data.y = torch.tensor(label, dtype=torch.float32)  # 멀티라벨 설정\n","    graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, val_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)\n","\n","train_loader = DataLoader(train_data, batch_size=32, shuffle=True)\n","val_loader = DataLoader(val_data, batch_size=32, shuffle=False)\n","\n","class GRNN(torch.nn.Module):\n","    def __init__(self, num_node_features, num_classes):\n","        super(GRNN, self).__init__()\n","        self.conv1 = GCNConv(num_node_features, 64)\n","        self.conv2 = GCNConv(64, 64)\n","        self.gru = torch.nn.GRU(64, 64, batch_first=True)\n","        self.fc1 = torch.nn.Linear(64, 32)\n","        self.fc2 = torch.nn.Linear(32, num_classes)\n","\n","    def forward(self, x, edge_index, batch):\n","        # Message Passing\n","        x = F.relu(self.conv1(x, edge_index))\n","        x = F.relu(self.conv2(x, edge_index))\n","\n","        # Global Pooling\n","        x = global_mean_pool(x, batch)\n","\n","        # Reshape for GRU\n","        x = x.unsqueeze(1)  # Add sequence dimension\n","        x, _ = self.gru(x)\n","        x = x.squeeze(1)  # Remove sequence dimension\n","\n","        # Classification\n","        x = F.relu(self.fc1(x))\n","        x = torch.sigmoid(self.fc2(x))\n","        return x\n","\n","# Hyperparameters\n","num_node_features = 1  # 노드 특징 수\n","num_classes = 6  # 취약점 클래스 수\n","learning_rate = 0.001\n","num_epochs = 10\n","\n","# Initialize model, loss, and optimizer\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","model = GRNN(num_node_features, num_classes).to(device)\n","criterion = torch.nn.BCELoss()  # 다중 이진 분류\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","\n","# Training loop\n","model.train()\n","for epoch in range(num_epochs):\n","    for data in train_loader:\n","        data = data.to(device)\n","        optimizer.zero_grad()\n","        output = model(data.x, data.edge_index, data.batch)\n","        if output.shape != data.y.shape:\n","            data.y = data.y.view(output.shape)\n","        loss = criterion(output, data.y)\n","        loss.backward()\n","        optimizer.step()\n","\n","    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {loss.item()}')\n","\n","# Save the model\n","torch.save(model.state_dict(), 'grnn_model.pth')\n","\n","# Evaluation\n","model.eval()\n","correct = 0\n","total = 0\n","all_outputs = []\n","all_labels = []\n","\n","with torch.no_grad():\n","    for data in val_loader:\n","        data = data.to(device)\n","        output = model(data.x, data.edge_index, data.batch)\n","        all_outputs.append(output.cpu().numpy())\n","        all_labels.append(data.y.cpu().numpy())\n","\n","# Concatenate all batches\n","all_outputs = np.concatenate(all_outputs, axis=0)\n","all_labels = np.concatenate(all_labels, axis=0)\n","\n","# Check the shapes of all_outputs and all_labels\n","print(f'all_outputs shape: {all_outputs.shape}')\n","print(f'all_labels shape: {all_labels.shape}')\n","\n","# Verify that the arrays are 2-dimensional\n","if all_outputs.ndim == 1:\n","    all_outputs = all_outputs.reshape(-1, num_classes)\n","if all_labels.ndim == 1:\n","    all_labels = all_labels.reshape(-1, num_classes)\n","\n","# Calculate accuracy for each class\n","accuracies = []\n","for i in range(num_classes):\n","    predictions = all_outputs[:, i] >= 0.5\n","    correct = (predictions == all_labels[:, i]).sum()\n","    accuracy = correct / all_labels.shape[0]\n","    accuracies.append(accuracy)\n","\n","# Print accuracies for each class\n","for i, accuracy in enumerate(accuracies):\n","    print(f'Class {i} Accuracy: {accuracy}')\n","\n","# Print probabilities for the first validation sample as an example\n","print(\"Example probabilities for the first validation sample:\")\n","print(all_outputs[0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"cfHIJoxAs-xy","executionInfo":{"status":"error","timestamp":1717468253633,"user_tz":-540,"elapsed":7911,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"2ac8c0cd-d001-4f2a-f7e2-d847a6e697c6"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'torch_geometric'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-14140e996e92>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctional\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch_geometric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGCNConv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobal_mean_pool\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch_geometric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataLoader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch_geometric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfrom_networkx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torch_geometric'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","from torch_geometric.nn import GCNConv, global_mean_pool\n","from torch_geometric.data import DataLoader\n","from torch_geometric.utils import from_networkx\n","from sklearn.model_selection import train_test_split\n","import pickle\n","import networkx as nx\n","import base64\n","import pandas as pd\n","import numpy as np\n","\n","# 취약점 클래스 리스트 정의\n","vulnerability_classes = ['BN', 'SE', 'OF', 'RE', 'TP', 'UC']\n","\n","# 바이너리 인코딩 함수 정의\n","def encode_labels(labels, classes):\n","    encoded = [0] * len(classes)\n","    for label in labels:\n","        if label in classes:\n","            encoded[classes.index(label)] = 1\n","    return encoded\n","\n","# 데이터셋 로드 및 DataLoader 설정\n","def load_graph_data(file_path):\n","    with open(file_path, 'rb') as f:\n","        df = pickle.load(f)\n","    return df\n","\n","# 예시 .pkl 파일 경로\n","file_path = '/content/drive/MyDrive/SNA/cfg_data.pkl'\n","\n","# 데이터 로드\n","df = load_graph_data(file_path)\n","\n","# 취약점 컬럼을 리스트로 변환\n","df['Vul'] = df['Vul'].apply(eval)\n","\n","graph_list = []\n","labels = []\n","for _, row in df.iterrows():\n","    cfg_bytes = base64.b64decode(row['CFG'])\n","    cfg = pickle.loads(cfg_bytes)\n","\n","    # NetworkX 그래프 생성\n","    graph = nx.Graph()\n","    graph.add_nodes_from(cfg.nodes(data=True))\n","    graph.add_edges_from(cfg.edges())\n","\n","    # 그래프 객체를 리스트에 추가\n","    graph_list.append(graph)\n","    labels.append(encode_labels(row['Vul'], vulnerability_classes))\n","\n","# 그래프 데이터를 PyTorch Geometric의 Data 객체로 변환\n","graph_data_list = []\n","for graph, label in zip(graph_list, labels):\n","    data = from_networkx(graph)\n","    data.x = torch.ones((data.num_nodes, 1))  # 노드 특징 행렬 설정\n","    data.y = torch.tensor(label, dtype=torch.float32)  # 멀티라벨 설정\n","    graph_data_list.append(data)\n","\n","# 데이터셋을 훈련 데이터와 테스트 데이터로 분리\n","train_data, val_data = train_test_split(graph_data_list, test_size=0.2, random_state=42)\n","\n","train_loader = DataLoader(train_data, batch_size=4, shuffle=True)\n","val_loader = DataLoader(val_data, batch_size=4, shuffle=False)\n","\n","class GRNN(torch.nn.Module):\n","    def __init__(self, num_node_features, num_classes):\n","        super(GRNN, self).__init__()\n","        self.conv1 = GCNConv(num_node_features, 64)\n","        self.conv2 = GCNConv(64, 64)\n","        self.gru = torch.nn.GRU(64, 64, batch_first=True)\n","        self.fc1 = torch.nn.Linear(64, 32)\n","        self.fc2 = torch.nn.Linear(32, num_classes)\n","\n","    def forward(self, x, edge_index, batch):\n","        # Message Passing\n","        x = F.relu(self.conv1(x, edge_index))\n","        x = F.relu(self.conv2(x, edge_index))\n","\n","        # Global Pooling\n","        x = global_mean_pool(x, batch)\n","\n","        # Reshape for GRU\n","        x = x.unsqueeze(1)  # Add sequence dimension\n","        x, _ = self.gru(x)\n","        x = x.squeeze(1)  # Remove sequence dimension\n","\n","        # Classification\n","        x = F.relu(self.fc1(x))\n","        x = torch.sigmoid(self.fc2(x))\n","        return x\n","\n","# Hyperparameters\n","num_node_features = 1  # 노드 특징 수\n","num_classes = 6  # 취약점 클래스 수\n","learning_rate = 0.001\n","num_epochs = 10\n","\n","# Initialize model, loss, and optimizer\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","model = GRNN(num_node_features, num_classes).to(device)\n","criterion = torch.nn.BCELoss()  # 다중 이진 분류\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","\n","# Training and validation loop\n","for epoch in range(num_epochs):\n","    model.train()\n","    train_loss = 0\n","    for data in train_loader:\n","        data = data.to(device)\n","        optimizer.zero_grad()\n","        output = model(data.x, data.edge_index, data.batch)\n","        if output.shape != data.y.shape:\n","            data.y = data.y.view(output.shape)\n","        loss = criterion(output, data.y)\n","        loss.backward()\n","        optimizer.step()\n","        train_loss += loss.item()\n","\n","    train_loss /= len(train_loader)\n","\n","    model.eval()\n","    val_loss = 0\n","    all_outputs = []\n","    all_labels = []\n","    with torch.no_grad():\n","        for data in val_loader:\n","            data = data.to(device)\n","            output = model(data.x, data.edge_index, data.batch)\n","            if output.shape != data.y.shape:\n","              data.y = data.y.view(output.shape)\n","            val_loss += criterion(output, data.y).item()\n","            all_outputs.append(output.cpu().numpy())\n","            all_labels.append(data.y.cpu().numpy())\n","\n","    val_loss /= len(val_loader)\n","\n","    # Concatenate all batches\n","    all_outputs = np.concatenate(all_outputs, axis=0)\n","    all_labels = np.concatenate(all_labels, axis=0)\n","\n","    # Calculate accuracy for each class\n","    accuracies = []\n","    for i in range(num_classes):\n","        predictions = all_outputs[:, i] >= 0.5\n","        correct = (predictions == all_labels[:, i]).sum()\n","        accuracy = correct / all_labels.shape[0]\n","        accuracies.append(accuracy)\n","\n","    # Print training and validation loss and accuracies for each class\n","    print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}')\n","    for i, accuracy in enumerate(accuracies):\n","        print(f'Class {i} Val Accuracy: {accuracy:.4f}')\n","\n","# Save the model\n","torch.save(model.state_dict(), 'grnn_model.pth')\n","\n","# Print probabilities for all validation samples\n","print(\"Probabilities for all validation samples:\")\n","for i, probabilities in enumerate(all_outputs):\n","    print(f'Sample {i} probabilities: {probabilities}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R6caVreLFbIn","executionInfo":{"status":"ok","timestamp":1717479522490,"user_tz":-540,"elapsed":223151,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"5942b2a9-4833-41d3-879c-4ea67aab7e4a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n","  warnings.warn(out)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10, Train Loss: 0.5408, Val Loss: 0.4990\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 2/10, Train Loss: 0.5100, Val Loss: 0.5013\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 3/10, Train Loss: 0.5077, Val Loss: 0.5067\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 4/10, Train Loss: 0.5072, Val Loss: 0.4983\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 5/10, Train Loss: 0.5097, Val Loss: 0.5064\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 6/10, Train Loss: 0.5082, Val Loss: 0.5092\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 7/10, Train Loss: 0.5076, Val Loss: 0.5017\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 8/10, Train Loss: 0.5088, Val Loss: 0.5025\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 9/10, Train Loss: 0.5082, Val Loss: 0.5068\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Epoch 10/10, Train Loss: 0.5079, Val Loss: 0.4996\n","Class 0 Val Accuracy: 0.7476\n","Class 1 Val Accuracy: 0.8476\n","Class 2 Val Accuracy: 0.7095\n","Class 3 Val Accuracy: 0.8143\n","Class 4 Val Accuracy: 0.8476\n","Class 5 Val Accuracy: 0.8143\n","Probabilities for all validation samples:\n","Sample 0 probabilities: [0.2608706  0.11616915 0.27422205 0.25492412 0.13743699 0.25524533]\n","Sample 1 probabilities: [0.26086286 0.11615828 0.2742137  0.25491405 0.13742696 0.2552368 ]\n","Sample 2 probabilities: [0.26101547 0.11637304 0.27437875 0.25511312 0.1376248  0.25540566]\n","Sample 3 probabilities: [0.26086935 0.1161674  0.2742207  0.2549225  0.13743538 0.255244  ]\n","Sample 4 probabilities: [0.26093075 0.11625377 0.2742871  0.25500262 0.13751495 0.2553119 ]\n","Sample 5 probabilities: [0.26086286 0.11615828 0.2742137  0.25491405 0.13742696 0.2552368 ]\n","Sample 6 probabilities: [0.26089898 0.1162091  0.27425277 0.25496116 0.13747379 0.25527677]\n","Sample 7 probabilities: [0.2608202  0.11609829 0.27416754 0.25485831 0.13737169 0.25518963]\n","Sample 8 probabilities: [0.26094264 0.11627053 0.2743     0.25501814 0.13753039 0.2553251 ]\n","Sample 9 probabilities: [0.26080775 0.11608072 0.27415404 0.25484207 0.13735554 0.25517583]\n","Sample 10 probabilities: [0.26087156 0.11617047 0.27422306 0.25492534 0.13743821 0.2552464 ]\n","Sample 11 probabilities: [0.26086935 0.1161674  0.2742207  0.2549225  0.13743538 0.255244  ]\n","Sample 12 probabilities: [0.2609785  0.116321   0.27433878 0.2550649  0.13757688 0.25536478]\n","Sample 13 probabilities: [0.26097775 0.11631993 0.27433792 0.2550639  0.13757588 0.25536394]\n","Sample 14 probabilities: [0.2608237  0.11610316 0.27417132 0.25486287 0.13737616 0.2551934 ]\n","Sample 15 probabilities: [0.26082927 0.11611097 0.27417734 0.25487006 0.13738339 0.2551996 ]\n","Sample 16 probabilities: [0.26084676 0.11613558 0.27419627 0.25489298 0.13740607 0.25521895]\n","Sample 17 probabilities: [0.26086074 0.11615524 0.27421135 0.25491118 0.13742417 0.25523442]\n","Sample 18 probabilities: [0.2608705  0.116169   0.27422193 0.25492397 0.13743685 0.25524527]\n","Sample 19 probabilities: [0.26087776 0.11617923 0.2742298  0.25493348 0.13744628 0.2552533 ]\n","Sample 20 probabilities: [0.26086542 0.11616192 0.2742165  0.2549174  0.13743034 0.25523967]\n","Sample 21 probabilities: [0.2608884  0.11619422 0.2742413  0.25494733 0.13746008 0.25526506]\n","Sample 22 probabilities: [0.2608282  0.11610957 0.2741762  0.25486887 0.13738212 0.2551985 ]\n","Sample 23 probabilities: [0.2608374  0.11612249 0.27418616 0.25488082 0.137394   0.25520864]\n","Sample 24 probabilities: [0.26086244 0.11615769 0.27421322 0.25491345 0.13742642 0.25523636]\n","Sample 25 probabilities: [0.26084834 0.11613786 0.274198   0.2548951  0.13740817 0.25522074]\n","Sample 26 probabilities: [0.260866   0.11616268 0.27421704 0.2549181  0.13743103 0.25524023]\n","Sample 27 probabilities: [0.26085845 0.11615209 0.27420893 0.2549082  0.13742125 0.25523192]\n","Sample 28 probabilities: [0.2608403  0.11612653 0.2741893  0.25488457 0.13739774 0.25521186]\n","Sample 29 probabilities: [0.26080474 0.11607656 0.27415088 0.25483805 0.13735141 0.25517225]\n","Sample 30 probabilities: [0.26093853 0.11626475 0.2742955  0.25501272 0.13752502 0.25532052]\n","Sample 31 probabilities: [0.2608471  0.1161361  0.27419662 0.25489345 0.13740651 0.25521937]\n","Sample 32 probabilities: [0.26086313 0.11615865 0.27421397 0.25491437 0.13742733 0.2552371 ]\n","Sample 33 probabilities: [0.26099467 0.11634375 0.27435625 0.25508595 0.13759781 0.25538263]\n","Sample 34 probabilities: [0.26080352 0.11607489 0.27414957 0.2548365  0.13734986 0.2551709 ]\n","Sample 35 probabilities: [0.2608102  0.11608422 0.27415672 0.2548453  0.13735874 0.2551786 ]\n","Sample 36 probabilities: [0.26082283 0.11610196 0.27417037 0.25486183 0.13737512 0.25519255]\n","Sample 37 probabilities: [0.26080865 0.11608202 0.27415505 0.2548433  0.13735673 0.2551768 ]\n","Sample 38 probabilities: [0.26077294 0.11603186 0.27411643 0.25479674 0.13731052 0.2551373 ]\n","Sample 39 probabilities: [0.26084015 0.11612631 0.2741891  0.25488436 0.13739753 0.25521165]\n","Sample 40 probabilities: [0.26087105 0.11616983 0.27422258 0.25492474 0.13743761 0.25524592]\n","Sample 41 probabilities: [0.26081878 0.11609627 0.274166   0.2548565  0.13736984 0.25518802]\n","Sample 42 probabilities: [0.26104692 0.11641736 0.27441278 0.25515416 0.1376656  0.25544047]\n","Sample 43 probabilities: [0.26086202 0.11615711 0.27421278 0.25491294 0.13742588 0.25523588]\n","Sample 44 probabilities: [0.26090455 0.1162169  0.27425876 0.25496837 0.13748097 0.25528288]\n","Sample 45 probabilities: [0.26091674 0.11623408 0.27427197 0.25498432 0.13749681 0.2552964 ]\n","Sample 46 probabilities: [0.26086044 0.11615482 0.27421102 0.25491074 0.13742375 0.25523412]\n","Sample 47 probabilities: [0.26082513 0.1161052  0.27417287 0.25486472 0.13737804 0.25519502]\n","Sample 48 probabilities: [0.2608754  0.11617588 0.2742272  0.25493038 0.1374432  0.25525063]\n","Sample 49 probabilities: [0.2608514  0.11614217 0.27420127 0.25489905 0.13741215 0.25522414]\n","Sample 50 probabilities: [0.26082402 0.11610366 0.27417168 0.2548634  0.13737667 0.25519383]\n","Sample 51 probabilities: [0.26088193 0.11618506 0.2742343  0.25493887 0.13745165 0.25525787]\n","Sample 52 probabilities: [0.26080716 0.11607993 0.27415344 0.25484133 0.13735479 0.2551752 ]\n","Sample 53 probabilities: [0.26085478 0.11614687 0.27420494 0.2549035  0.1374165  0.25522786]\n","Sample 54 probabilities: [0.26082864 0.11611016 0.27417666 0.25486937 0.13738264 0.25519896]\n","Sample 55 probabilities: [0.2608344  0.11611824 0.2741829  0.2548768  0.13739008 0.2552053 ]\n","Sample 56 probabilities: [0.26095322 0.1162854  0.2743114  0.2550319  0.13754407 0.25533676]\n","Sample 57 probabilities: [0.26090747 0.116221   0.27426195 0.25497222 0.13748476 0.25528613]\n","Sample 58 probabilities: [0.26083428 0.11611801 0.2741827  0.2548766  0.13738988 0.25520515]\n","Sample 59 probabilities: [0.2608714  0.11617031 0.2742229  0.2549252  0.13743806 0.25524628]\n","Sample 60 probabilities: [0.2608048  0.11607672 0.27415103 0.2548382  0.13735162 0.25517246]\n","Sample 61 probabilities: [0.26086286 0.11615828 0.2742137  0.25491405 0.13742696 0.2552368 ]\n","Sample 62 probabilities: [0.26088023 0.11618271 0.27423248 0.25493672 0.13744949 0.25525606]\n","Sample 63 probabilities: [0.26088887 0.11619487 0.2742418  0.25494796 0.13746066 0.2552656 ]\n","Sample 64 probabilities: [0.38921842 0.38374925 0.41555864 0.42755648 0.35581827 0.4026745 ]\n","Sample 65 probabilities: [0.2608936  0.11620154 0.27424693 0.25495413 0.13746683 0.2552708 ]\n","Sample 66 probabilities: [0.26080936 0.11608303 0.27415583 0.25484416 0.13735764 0.25517762]\n","Sample 67 probabilities: [0.2609514  0.11628283 0.27430943 0.2550295  0.1375417  0.25533473]\n","Sample 68 probabilities: [0.26082486 0.11610479 0.27417254 0.25486442 0.13737771 0.25519475]\n","Sample 69 probabilities: [0.26085424 0.11614616 0.2742044  0.25490284 0.13741581 0.25522727]\n","Sample 70 probabilities: [0.26086807 0.11616558 0.2742193  0.2549208  0.13743368 0.25524253]\n","Sample 71 probabilities: [0.2608725  0.11617183 0.27422413 0.25492662 0.13743947 0.25524744]\n","Sample 72 probabilities: [0.2609608  0.11629606 0.27431962 0.25504175 0.13755387 0.25534514]\n","Sample 73 probabilities: [0.26086754 0.11616483 0.27421874 0.2549201  0.13743304 0.25524196]\n","Sample 74 probabilities: [0.2608722  0.11617137 0.27422374 0.25492615 0.13743904 0.25524712]\n","Sample 75 probabilities: [0.2608431  0.11613043 0.27419227 0.25488824 0.13740133 0.25521493]\n","Sample 76 probabilities: [0.26082417 0.11610385 0.27417183 0.25486344 0.1373768  0.255194  ]\n","Sample 77 probabilities: [0.26093075 0.11625377 0.2742871  0.25500262 0.13751495 0.2553119 ]\n","Sample 78 probabilities: [0.2609152  0.11623187 0.27427027 0.2549823  0.13749474 0.25529468]\n","Sample 79 probabilities: [0.26082143 0.11609998 0.27416885 0.25485992 0.13737327 0.25519097]\n","Sample 80 probabilities: [0.26091674 0.11623408 0.27427197 0.25498432 0.13749681 0.2552964 ]\n","Sample 81 probabilities: [0.26087835 0.11618007 0.27423045 0.25493422 0.13744703 0.25525394]\n","Sample 82 probabilities: [0.2608215  0.11610006 0.2741689  0.25486    0.13737331 0.25519097]\n","Sample 83 probabilities: [0.26094264 0.11627053 0.2743     0.25501814 0.13753039 0.2553251 ]\n","Sample 84 probabilities: [0.26086485 0.1161611  0.27421585 0.25491667 0.13742957 0.255239  ]\n","Sample 85 probabilities: [0.26093453 0.11625916 0.27429122 0.2550076  0.13751993 0.25531617]\n","Sample 86 probabilities: [0.2608433  0.11613076 0.27419254 0.25488847 0.13740161 0.25521514]\n","Sample 87 probabilities: [0.26083142 0.11611403 0.27417967 0.254873   0.1373862  0.25520203]\n","Sample 88 probabilities: [0.26096424 0.11630094 0.27432337 0.25504628 0.13755839 0.25534898]\n","Sample 89 probabilities: [0.260956   0.11628934 0.27431443 0.25503555 0.13754772 0.25533986]\n","Sample 90 probabilities: [0.260956   0.11628934 0.27431443 0.25503555 0.13754772 0.25533986]\n","Sample 91 probabilities: [0.26082397 0.1161036  0.27417162 0.25486332 0.13737659 0.2551938 ]\n","Sample 92 probabilities: [0.26084217 0.11612919 0.27419132 0.25488698 0.13740017 0.25521395]\n","Sample 93 probabilities: [0.26093453 0.11625916 0.27429122 0.2550076  0.13751993 0.25531617]\n","Sample 94 probabilities: [0.26083967 0.11612564 0.2741886  0.25488377 0.13739695 0.25521117]\n","Sample 95 probabilities: [0.2609928  0.11634114 0.27435428 0.25508356 0.13759543 0.2553806 ]\n","Sample 96 probabilities: [0.26087806 0.11617965 0.27423012 0.25493386 0.13744666 0.25525358]\n","Sample 97 probabilities: [0.2608622  0.11615732 0.27421293 0.25491306 0.13742608 0.25523606]\n","Sample 98 probabilities: [0.26092702 0.11624858 0.2742831  0.25499776 0.13751017 0.25530782]\n","Sample 99 probabilities: [0.26083523 0.11611942 0.2741838  0.25487798 0.13739116 0.2552062 ]\n","Sample 100 probabilities: [0.2608133  0.11608861 0.27416003 0.2548492  0.13736251 0.25518176]\n","Sample 101 probabilities: [0.26096088 0.11629615 0.27431965 0.25504187 0.13755397 0.25534523]\n","Sample 102 probabilities: [0.26083097 0.1161134  0.2741792  0.25487238 0.13738562 0.25520146]\n","Sample 103 probabilities: [0.26081795 0.11609515 0.27416512 0.2548554  0.13736878 0.25518718]\n","Sample 104 probabilities: [0.26087177 0.11617082 0.27422333 0.25492564 0.13743855 0.2552467 ]\n","Sample 105 probabilities: [0.26091045 0.11622521 0.27426514 0.25497612 0.13748863 0.25528947]\n","Sample 106 probabilities: [0.26084396 0.11613168 0.27419323 0.25488934 0.13740246 0.2552159 ]\n","Sample 107 probabilities: [0.26092005 0.11623873 0.27427557 0.25498864 0.13750109 0.2553001 ]\n","Sample 108 probabilities: [0.26092702 0.11624858 0.2742831  0.25499776 0.13751018 0.25530782]\n","Sample 109 probabilities: [0.2608084  0.11608168 0.27415475 0.25484294 0.1373564  0.25517654]\n","Sample 110 probabilities: [0.2607427  0.11598934 0.27408373 0.25475723 0.13727124 0.2551038 ]\n","Sample 111 probabilities: [0.26086482 0.1161611  0.27421585 0.25491667 0.13742957 0.255239  ]\n","Sample 112 probabilities: [0.26090455 0.1162169  0.27425876 0.25496837 0.13748097 0.25528288]\n","Sample 113 probabilities: [0.2608346  0.11611853 0.2741831  0.25487718 0.13739033 0.25520554]\n","Sample 114 probabilities: [0.26087072 0.11616933 0.2742222  0.25492433 0.13743716 0.2552455 ]\n","Sample 115 probabilities: [0.2608233  0.11610265 0.2741709  0.2548624  0.13737571 0.255193  ]\n","Sample 116 probabilities: [0.26084784 0.11613708 0.27419737 0.25489435 0.13740745 0.25522014]\n","Sample 117 probabilities: [0.26116616 0.11658538 0.27454174 0.2553097  0.13782027 0.2555724 ]\n","Sample 118 probabilities: [0.2608114  0.11608584 0.27415797 0.2548468  0.13736023 0.25517985]\n","Sample 119 probabilities: [0.26106843 0.11644769 0.2744361  0.25518227 0.13769354 0.2554643 ]\n","Sample 120 probabilities: [0.2608714  0.11617031 0.27422294 0.2549252  0.13743806 0.25524628]\n","Sample 121 probabilities: [0.26081795 0.11609515 0.27416515 0.25485548 0.13736881 0.25518718]\n","Sample 122 probabilities: [0.26082453 0.11610439 0.27417225 0.25486407 0.13737735 0.25519446]\n","Sample 123 probabilities: [0.26082218 0.11610106 0.27416968 0.25486085 0.13737424 0.25519183]\n","Sample 124 probabilities: [0.26096934 0.11630814 0.2743289  0.25505298 0.137565   0.25535464]\n","Sample 125 probabilities: [0.26082036 0.11609852 0.27416775 0.25485858 0.13737194 0.25518984]\n","Sample 126 probabilities: [0.26092142 0.11624067 0.27427703 0.25499043 0.13750288 0.2553016 ]\n","Sample 127 probabilities: [0.2608117  0.11608627 0.2741583  0.25484723 0.1373606  0.2551801 ]\n","Sample 128 probabilities: [0.26091674 0.11623408 0.274272   0.25498432 0.13749681 0.2552964 ]\n","Sample 129 probabilities: [0.2608717  0.11617068 0.27422324 0.25492555 0.13743842 0.25524658]\n","Sample 130 probabilities: [0.2608405  0.11612688 0.27418953 0.2548849  0.13739806 0.25521216]\n","Sample 131 probabilities: [0.26089898 0.1162091  0.27425277 0.25496116 0.13747379 0.25527677]\n","Sample 132 probabilities: [0.26086372 0.11615945 0.2742146  0.25491512 0.13742806 0.25523773]\n","Sample 133 probabilities: [0.26093614 0.11626136 0.27429295 0.25500962 0.13752195 0.25531787]\n","Sample 134 probabilities: [0.26094264 0.11627053 0.2743     0.25501814 0.13753039 0.2553251 ]\n","Sample 135 probabilities: [0.26094842 0.11627864 0.2743062  0.25502563 0.13753784 0.25533143]\n","Sample 136 probabilities: [0.2608719  0.11617091 0.27422342 0.25492573 0.13743861 0.25524676]\n","Sample 137 probabilities: [0.26082844 0.11610989 0.27417648 0.25486904 0.13738239 0.25519878]\n","Sample 138 probabilities: [0.26093853 0.11626475 0.2742955  0.25501272 0.13752502 0.25532052]\n","Sample 139 probabilities: [0.26083362 0.11611716 0.27418208 0.2548758  0.13738906 0.25520444]\n","Sample 140 probabilities: [0.2609904  0.11633779 0.2743517  0.25508043 0.13759233 0.25537795]\n","Sample 141 probabilities: [0.26084745 0.11613664 0.27419704 0.25489393 0.13740703 0.2552198 ]\n","Sample 142 probabilities: [0.26086107 0.11615576 0.27421173 0.2549116  0.1374246  0.25523487]\n","Sample 143 probabilities: [0.26093853 0.11626475 0.2742955  0.25501275 0.13752502 0.25532052]\n","Sample 144 probabilities: [0.2608275  0.11610859 0.27417547 0.2548679  0.1373812  0.25519773]\n","Sample 145 probabilities: [0.26094693 0.11627655 0.27430463 0.25502372 0.13753594 0.25532985]\n","Sample 146 probabilities: [0.26082346 0.11610282 0.27417105 0.25486258 0.13737588 0.2551932 ]\n","Sample 147 probabilities: [0.26086542 0.11616192 0.2742165  0.2549174  0.13743034 0.25523967]\n","Sample 148 probabilities: [0.26080787 0.11608095 0.2741542  0.2548423  0.13735573 0.25517598]\n","Sample 149 probabilities: [0.2608722  0.11617142 0.2742238  0.2549262  0.13743909 0.25524712]\n","Sample 150 probabilities: [0.26083335 0.11611679 0.27418178 0.2548756  0.13738877 0.25520417]\n","Sample 151 probabilities: [0.26086175 0.11615676 0.2742125  0.25491267 0.13742557 0.25523564]\n","Sample 152 probabilities: [0.2608393  0.11612511 0.2741882  0.25488317 0.13739641 0.25521076]\n","Sample 153 probabilities: [0.26107922 0.11646287 0.2744477  0.2551963  0.1377075  0.2554762 ]\n","Sample 154 probabilities: [0.26079673 0.11606527 0.27414215 0.25482774 0.13734129 0.25516367]\n","Sample 155 probabilities: [0.26081795 0.11609515 0.27416512 0.25485536 0.13736871 0.25518703]\n","Sample 156 probabilities: [0.26087347 0.11617323 0.27422518 0.25492787 0.13744074 0.25524855]\n","Sample 157 probabilities: [0.26083663 0.11612134 0.27418527 0.25487977 0.13739297 0.25520778]\n","Sample 158 probabilities: [0.26086652 0.11616346 0.27421767 0.25491875 0.13743176 0.2552409 ]\n","Sample 159 probabilities: [0.26088244 0.11618584 0.2742349  0.25493962 0.13745236 0.25525847]\n","Sample 160 probabilities: [0.26081526 0.11609134 0.27416223 0.25485197 0.13736533 0.25518417]\n","Sample 161 probabilities: [0.26077324 0.1160322  0.27411672 0.25479707 0.13731083 0.2551376 ]\n","Sample 162 probabilities: [0.2609608  0.11629606 0.27431962 0.25504178 0.13755387 0.25534514]\n","Sample 163 probabilities: [0.2608722  0.11617142 0.27422377 0.2549262  0.13743909 0.25524715]\n","Sample 164 probabilities: [0.26098236 0.11632642 0.27434292 0.25506988 0.13758186 0.255369  ]\n","Sample 165 probabilities: [0.26086524 0.11616165 0.2742163  0.25491714 0.13743009 0.2552395 ]\n","Sample 166 probabilities: [0.26081964 0.11609751 0.27416694 0.25485766 0.13737099 0.255189  ]\n","Sample 167 probabilities: [0.26085657 0.11614944 0.2742069  0.25490588 0.13741885 0.25522986]\n","Sample 168 probabilities: [0.26083937 0.11612523 0.27418828 0.25488338 0.13739656 0.25521082]\n","Sample 169 probabilities: [0.26091355 0.11622959 0.2742685  0.25498015 0.13749267 0.25529292]\n","Sample 170 probabilities: [0.26086313 0.11615866 0.27421397 0.25491437 0.13742733 0.2552371 ]\n","Sample 171 probabilities: [0.26082563 0.11610582 0.27417335 0.25486535 0.13737863 0.25519553]\n","Sample 172 probabilities: [0.26082185 0.11610057 0.2741693  0.2548604  0.13737379 0.25519142]\n","Sample 173 probabilities: [0.26083505 0.11611911 0.27418357 0.25487763 0.13739088 0.25520602]\n","Sample 174 probabilities: [0.26083225 0.11611523 0.2741806  0.25487405 0.1373873  0.25520298]\n","Sample 175 probabilities: [0.26081023 0.11608427 0.27415678 0.25484538 0.1373588  0.25517863]\n","Sample 176 probabilities: [0.26086202 0.11615711 0.27421278 0.25491294 0.13742588 0.25523588]\n","Sample 177 probabilities: [0.2608752  0.11617559 0.274227   0.25493008 0.1374429  0.25525042]\n","Sample 178 probabilities: [0.2609162  0.1162333  0.27427134 0.25498357 0.13749607 0.2552958 ]\n","Sample 179 probabilities: [0.260933   0.11625698 0.27428955 0.25500554 0.1375179  0.25531444]\n","Sample 180 probabilities: [0.26092005 0.11623873 0.2742756  0.25498864 0.13750109 0.2553001 ]\n","Sample 181 probabilities: [0.26086342 0.11615907 0.2742143  0.2549148  0.1374277  0.25523743]\n","Sample 182 probabilities: [0.26086956 0.11616767 0.27422094 0.2549227  0.1374356  0.2552442 ]\n","Sample 183 probabilities: [0.2608612  0.11615592 0.27421188 0.2549118  0.1374248  0.255235  ]\n","Sample 184 probabilities: [0.26097864 0.11632117 0.2743389  0.25506505 0.137577   0.25536487]\n","Sample 185 probabilities: [0.26083198 0.11611482 0.27418023 0.25487363 0.13738689 0.25520262]\n","Sample 186 probabilities: [0.26093453 0.11625916 0.27429122 0.2550076  0.13751993 0.25531617]\n","Sample 187 probabilities: [0.26083285 0.11611608 0.27418125 0.25487483 0.1373881  0.25520363]\n","Sample 188 probabilities: [0.26091045 0.11622521 0.27426514 0.25497612 0.13748863 0.25528947]\n","Sample 189 probabilities: [0.2608032  0.11607438 0.27414912 0.254836   0.13734935 0.25517046]\n","Sample 190 probabilities: [0.26081157 0.11608611 0.2741582  0.25484708 0.13736048 0.25518   ]\n","Sample 191 probabilities: [0.26082268 0.11610175 0.27417022 0.25486162 0.13737491 0.25519237]\n","Sample 192 probabilities: [0.26092005 0.11623873 0.2742756  0.25498864 0.13750109 0.2553001 ]\n","Sample 193 probabilities: [0.26087293 0.1161724  0.27422452 0.25492713 0.13744    0.2552479 ]\n","Sample 194 probabilities: [0.26093075 0.11625377 0.2742871  0.25500262 0.13751495 0.2553119 ]\n","Sample 195 probabilities: [0.26094693 0.11627656 0.27430463 0.25502372 0.13753594 0.25532985]\n","Sample 196 probabilities: [0.26080582 0.11607801 0.27415195 0.25483957 0.13735305 0.25517365]\n","Sample 197 probabilities: [0.2609235  0.11624359 0.27427927 0.25499314 0.13750558 0.2553039 ]\n","Sample 198 probabilities: [0.26086456 0.11616068 0.27421552 0.25491625 0.13742918 0.2552387 ]\n","Sample 199 probabilities: [0.26080668 0.11607929 0.27415293 0.25484073 0.13735418 0.25517467]\n","Sample 200 probabilities: [0.2608683  0.11616599 0.2742196  0.25492117 0.13743405 0.25524288]\n","Sample 201 probabilities: [0.2608114  0.11608579 0.27415794 0.25484678 0.13736019 0.25517976]\n","Sample 202 probabilities: [0.26086274 0.11615808 0.27421352 0.25491384 0.13742678 0.25523663]\n","Sample 203 probabilities: [0.26087347 0.11617323 0.27422518 0.2549279  0.13744074 0.25524855]\n","Sample 204 probabilities: [0.26084554 0.1161339  0.27419496 0.25489146 0.13740455 0.25521767]\n","Sample 205 probabilities: [0.2608841  0.11618814 0.27423665 0.25494173 0.13745448 0.2552603 ]\n","Sample 206 probabilities: [0.26081386 0.11608931 0.27416065 0.25485003 0.13736343 0.25518256]\n","Sample 207 probabilities: [0.2608855  0.11619015 0.2742382  0.2549436  0.13745634 0.25526187]\n","Sample 208 probabilities: [0.26084664 0.11613542 0.2741961  0.25489283 0.13740592 0.2552188 ]\n","Sample 209 probabilities: [0.26091045 0.11622521 0.27426514 0.25497612 0.13748863 0.25528947]\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# 데이터 정의\n","data = {\n","    'BN': [0, 0, 0, 1, 0],\n","    'SE': [0, 0, 0, 0, 0],\n","    'OF': [1, 0, 1, 0, 1],\n","    'RE': [0, 1, 0, 0, 0],\n","    'TP': [0, 0, 0, 0, 0],\n","    'UC': [0, 1, 0, 0, 0]\n","}\n","\n","# DataFrame 생성\n","df = pd.DataFrame(data, index=['CFG 1', 'CFG 2', 'CFG 3', 'CFG 4', 'CFG 5'])\n","\n","# 테이블 이미지 생성\n","fig, ax = plt.subplots(figsize=(10, 3))  # 이미지 크기 조정\n","ax.axis('tight')\n","ax.axis('off')\n","\n","table = ax.table(cellText=df.values, colLabels=df.columns, rowLabels=df.index, cellLoc='center', loc='center')\n","\n","# 셀 위아래 간격 조정\n","table.auto_set_font_size(False)\n","table.set_fontsize(12)\n","table.scale(1, 2)  # 열의 너비, 행의 높이\n","\n","# 타이틀 설정\n","plt.title(\"Multi-label Example\", fontsize=16)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":292},"id":"8Y_bmL5u_H8f","executionInfo":{"status":"ok","timestamp":1718104373574,"user_tz":-540,"elapsed":967,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"70b56ab6-776e-40b8-e222-bdc67379fb05"},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.patches as patches"],"metadata":{"id":"ui71JkSbEUV3","executionInfo":{"status":"ok","timestamp":1718105493311,"user_tz":-540,"elapsed":426,"user":{"displayName":"장경빈","userId":"09746380719001299806"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.patches as patches\n","\n","# Create a figure and axis\n","fig, ax = plt.subplots(figsize=(10, 12))\n","\n","# Define the layers, their parameters, and corresponding colors\n","layers = [\n","    (\"Input: x, edge_index, batch\", \"cyan\", \"\"),\n","    (\"GATConv\", \"lightblue\", \"(1, 64)\"),\n","    (\"Batch Norm1\", \"yellow\", \"(64)\"),\n","    (\"GATConv\", \"lightblue\", \"(64, 64)\"),\n","    (\"Batch Norm2\", \"yellow\", \"(64)\"),\n","    (\"GATConv\", \"lightblue\", \"(64, 64)\"),\n","    (\"Batch Norm1\", \"yellow\", \"(64)\"),\n","    (\"Global Mean Pool\", \"orange\", \"\"),\n","    (\"LSTM\", \"salmon\", \"(64, 64, num_layers=3)\"),\n","    (\"Dropout\", \"lightgreen\", \"(0.2)\"),\n","    (\"Linear\", \"lightgreen\", \"(64, 6)\"),\n","    (\"Output\", \"cyan\", \"\")\n","]\n","\n","# Define the y positions for the layers with spacing\n","y_positions = list(range(len(layers) * 2, 0, -2))\n","\n","# Draw the layers as rectangles\n","for (layer, color, params), y in zip(layers, y_positions):\n","    ax.add_patch(patches.Rectangle((0, y - 0.5), 1, 1, edgecolor='black', facecolor=color, linewidth=2))\n","    ax.text(0.5, y, f\"{layer}\\n{params}\", ha='center', va='center', fontsize=10, fontweight='bold')\n","\n","# Draw arrows between layers\n","for y in y_positions[:-1]:\n","    ax.annotate('', xy=(0.5, y - 1.5), xytext=(0.5, y - 0.5), arrowprops=dict(arrowstyle=\"->\", color='black'))\n","\n","# Remove the axes\n","ax.set_xlim(-0.1, 1.1)\n","ax.set_ylim(0, max(y_positions) + 1)\n","ax.axis('off')\n","\n","# Show the diagram\n","plt.title(\"Updated Model Architecture Diagram\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":983},"id":"hd048AnpEEEn","executionInfo":{"status":"ok","timestamp":1718105656537,"user_tz":-540,"elapsed":1745,"user":{"displayName":"장경빈","userId":"09746380719001299806"}},"outputId":"c9c74c1b-a932-4e07-ec06-15d90579e1e5"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1200 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAxoAAAPGCAYAAABkvOwGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACoKklEQVR4nOzdd3gU1dvG8TuFFAJJ6AmJht5BFBBEmiigIChFQEEBFcEGFrCgUuyKBbHgKyr4Q1SqigqKiqDSpEnvECAhoUMCaSSZ94/D7mZJCAkObEK+n+vKNbtnZmee2USce885s16WZVkCAAAAABt5e7oAAAAAAJcfggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBoD/pE2bNmrTpo2ny3AzefJkeXl5KTo62tOl5Cg6OlpeXl6aPHlyvl+7cOFCeXl5aeHChbbXdaFGjx4tLy8vHT58+LzbVqpUSf3797/4RV3mHO85ABRkBA3gMnK+C7569eoVmFCQlJSk0aNHe/SC2fF+eXt7a9++fdnWJyQkKDAwUF5eXnrkkUc8UKE9PvroI3l5ealp06aeLiWbTZs2afTo0Rc9FC5ZskSjR4/W8ePHL+pxLoQjGDt+AgICVLFiRXXo0EHjx49XYmKip0sEgAtC0ADgEUlJSRozZkyB+GTe399fX3/9dbb22bNne6Aa+02dOlWVKlXSP//8ox07dni0lq1bt2rixInO55s2bdKYMWMuSdAYM2ZMgQwaDi+++KKmTJmiCRMm6NFHH5UkPfbYY6pfv77WrVvntu3zzz+v5ORkT5QJAHlG0ABQ5HXs2DHHoPHVV1+pU6dOHqjIPrt379aSJUv0zjvvqFy5cpo6dWqeXpeenq60tDTb6/H391exYsVs36+nnDp1yrZ93XLLLerbt68GDBigZ599Vr/88ot+++03HTx4UF26dHELFr6+vgoICLDt2Hll5/kCuPwRNIAizDHef9q0aRoxYoTCwsIUFBSkLl265DiU6JNPPlHVqlUVGBioa6+9Vn/99Ve2bdLS0jRy5Eg1atRIISEhCgoKUsuWLfXHH384t4mOjla5cuUkSWPGjHEOGRk9erRzmy1btqhHjx4qXbq0AgIC1LhxY82ZMyfb8TZu3Ki2bdsqMDBQkZGRevnll5WZmZmv9+Guu+7Sv//+qy1btjjb4uPjtWDBAt111105vubgwYO67777VKFCBQUEBOiqq67SF198kW2748ePq3///goJCVFoaKj69et3zk/V83rO+TF16lSVKlVKnTp1Uo8ePXIMGo45I2+99ZbGjRunqlWryt/fX5s2bXLW1bNnT5UrV06BgYGqWbOmnnvuuXOea2hoqEJCQjRgwAAlJSW5bZN1jsbkyZN1xx13SJJuuOEG599B1l6uefPmqWXLlgoKClLJkiXVqVMnbdy4Mduxc6tx9OjRGj58uCSpcuXKzuNER0fnOl/m7L9Jx1C7TZs26a677lKpUqXUokUL5/ovv/xSjRo1UmBgoEqXLq3evXvn+N9RfrRt21YvvPCC9uzZoy+//DJbLVlNmjRJbdu2Vfny5eXv7686depowoQJ2faZmZmp0aNHq2LFiipevLhuuOEGbdq0Kdv8GceQrkWLFumhhx5S+fLlFRkZKUnas2ePHnroIdWsWVOBgYEqU6aM7rjjjmw9U459/P333xoyZIjKlSun0NBQDRo0SGlpaTp+/LjuuecelSpVSqVKldJTTz0ly7L+03sGoODw9XQBADzvlVdekZeXl55++mkdPHhQ48aN00033aR///1XgYGBkqTPPvtMgwYNUvPmzfXYY49p165d6tKli0qXLq0rrrjCua+EhAR9+umnuvPOOzVw4EAlJibqs88+U4cOHfTPP/+oYcOGKleunCZMmKAHH3xQXbt2Vbdu3SRJDRo0kGTCw/XXX6+IiAg988wzCgoK0vTp03X77bdr1qxZ6tq1qyQTBm644Qalp6c7t/vkk0+cNedVq1atFBkZqa+++kovvviiJGnatGkqUaJEjj0aycnJatOmjXbs2KFHHnlElStX1owZM9S/f38dP35cQ4cOlSRZlqXbbrtNf//9twYPHqzatWvr22+/Vb9+/bLtM6/nnF9Tp05Vt27d5OfnpzvvvFMTJkzQihUr1KRJk2zbTpo0SSkpKXrggQfk7++v0qVLa926dWrZsqWKFSumBx54QJUqVdLOnTv1ww8/6JVXXnF7fc+ePVW5cmW99tprWr16tT799FOVL19eb7zxRo61tWrVSkOGDNH48eM1YsQI1a5dW5KcyylTpqhfv37q0KGD3njjDSUlJWnChAlq0aKF1qxZo0qVKknSeWvs1q2btm3bpq+//lrvvvuuypYtK0kqV66cDh06lO/39I477lD16tX16quvOi+KX3nlFb3wwgvq2bOn7r//fh06dEjvv/++WrVqpTVr1ig0NDTfx3G4++67NWLECM2fP18DBw4853YTJkxQ3bp11aVLF/n6+uqHH37QQw89pMzMTD388MPO7Z599lm9+eab6ty5szp06KC1a9eqQ4cOSklJyXG/Dz30kMqVK6eRI0c6ezRWrFihJUuWqHfv3oqMjFR0dLQmTJigNm3aaNOmTSpevLjbPh599FGFhYVpzJgxWrZsmT755BOFhoZqyZIluvLKK/Xqq69q7ty5Gjt2rOrVq6d77rnngt8vAAWIBeCyMWrUKEuSdejQoRzX161b12rdurXz+R9//GFJsiIiIqyEhARn+/Tp0y1J1nvvvWdZlmWlpaVZ5cuXtxo2bGilpqY6t/vkk08sSW77TE9Pd9vGsizr2LFjVoUKFax7773X2Xbo0CFLkjVq1Khsdd54441W/fr1rZSUFGdbZmam1bx5c6t69erOtscee8ySZC1fvtzZdvDgQSskJMSSZO3evTvnN+qMrO/XsGHDrGrVqjnXNWnSxBowYIBlWZYlyXr44Yed68aNG2dJsr788ktnW1pamnXddddZJUqUcL6X3333nSXJevPNN93en5YtW1qSrEmTJuX7nB2/sz/++CPXc7Msy1q5cqUlyfr111+d+4uMjLSGDh3qtt3u3bstSVZwcLB18OBBt3WtWrWySpYsae3Zs8etPTMz0/nY8T5m/f1almV17drVKlOmjFtbVFSU1a9fP+fzGTNm5Hg+iYmJVmhoqDVw4EC39vj4eCskJMStPS81jh07Nse/Cce5Z/1dOJz99+k4zzvvvNNtu+joaMvHx8d65ZVX3NrXr19v+fr6Zms/26RJkyxJ1ooVK865TUhIiHX11VdnqyWrpKSkbK/r0KGDVaVKFefz+Ph4y9fX17r99tvdths9erQlye1346irRYsWVnp6+nmPtXTpUkuS9b///S/bPjp06OD2+7juuussLy8va/Dgwc629PR0KzIy0u3fEwCFG0OnAOiee+5RyZIlnc979Oih8PBwzZ07V5K0cuVKHTx4UIMHD5afn59zO8eQoKx8fHyc22RmZuro0aNKT09X48aNtXr16vPWcvToUS1YsEA9e/ZUYmKiDh8+rMOHD+vIkSPq0KGDtm/frtjYWEnS3Llz1axZM1177bXO15crV059+vTJ93tw1113aceOHVqxYoVzea5hU3PnzlVYWJjuvPNOZ1uxYsU0ZMgQnTx5UosWLXJu5+vrqwcffNDt/XFM9L2Qc86PqVOnqkKFCrrhhhskmaFAvXr10jfffKOMjIxs23fv3t05pE2SDh06pD///FP33nuvrrzySrdtc7q16uDBg92et2zZUkeOHFFCQkK+a//11191/Phx3Xnnnc734/Dhw/Lx8VHTpk2dQ/HyW6Mdzj7P2bNnKzMzUz179nSrNSwsTNWrV3cbNnihSpQocd67T2XtyTtx4oQOHz6s1q1ba9euXTpx4oQk6ffff1d6eroeeught9ee/TeZ1cCBA+Xj43POY50+fVpHjhxRtWrVFBoamuN/5/fdd5/b76Np06ayLEv33Xefs83Hx0eNGzfWrl27cj1PAIUHQ6eAIiani6/q1atn26ZatWrO8dZ79uzJcbtixYqpSpUq2fb3xRdf6O2339aWLVt0+vRpZ3vlypXPW9+OHTtkWZZeeOEFvfDCCzluc/DgQUVERGjPnj053rK1Zs2a5z3O2a6++mrVqlVLX331lUJDQxUWFqa2bdvmuO2ePXtUvXp1eXu7f1bjGPLjeL/27Nmj8PBwlShRItf68nPOeZWRkaFvvvlGN9xwg3bv3u1sb9q0qd5++239/vvvat++vdtrzv79OC746tWrl6djnn2hX6pUKUnSsWPHFBwcnOfaJWn79u2SdM7fgWN/+a3RDme/T9u3b5dlWdn++3CwY/L7yZMnVb58+Vy3Wbx4sUaNGqWlS5dmmxtz4sQJhYSEOP82q1Wr5ra+dOnSzt/X2XL67zY5OVmvvfaaJk2apNjYWLd5FY5Qk9XZfxuODyiyDrt0tB87duxcpwigkCFoAJcRx11oznXby6SkpIt+p5ovv/xS/fv31+23367hw4erfPny8vHx0WuvvaadO3ee9/WOidzDhg1Thw4dctzm7Isku9x1112aMGGCSpYsqV69emULEhfLxTjnBQsWKC4uTt98842++eabbOunTp2aLWjkd27L2c7+1NvBuoDJvY73ZMqUKQoLC8u23tfXnv99navXI6ceH4ez36fMzEx5eXlp3rx5Ob4HZwfN/IqJidGJEydy/RvYuXOnbrzxRtWqVUvvvPOOrrjiCvn5+Wnu3Ll69913832DhKxy+rt49NFHNWnSJD322GO67rrrFBISIi8vL/Xu3TvHY53rbyOn9gv5ewFQMBE0gMtIVFSUJPNdBWd/UpiUlKR9+/Zlu7iUXJ8eO1iWpR07djgnZzv2u337drdPmE+fPq3du3frqquucrbNnDlTVapU0ezZs90u4kaNGuV2jHNd4Dl6SIoVK6abbrrpvOd7du2SOf8Lcdddd2nkyJGKi4vTlClTcj3uunXrlJmZ6RZGHHetcrxfUVFR+v3333Xy5Em3i82z68vPOefV1KlTVb58eX344YfZ1s2ePVvffvutPv7441zDhaOuDRs22FJTTs71d1C1alVJUvny5XN9T/Ja47mO4/gU/+w7gTk++c+LqlWryrIsVa5cWTVq1Mjz6/LK8bd4rhAqST/88INSU1M1Z84ct96Ds4dtOf42d+zY4dZTceTIkXz1JMycOVP9+vXT22+/7WxLSUkp0N9TAuDSY44GcBm58cYb5efnpwkTJmT7VPGTTz5Renq6brnllmyv+9///uc2/nvmzJmKi4tzbtu4cWOVK1dOH3/8sdt3K0yePDnbhYXjE8qsn0ouX75cS5cuddvOcVeas19fvnx5tWnTRv/3f/+nuLi4bLVmvUtQx44dtWzZMv3zzz9u6/P6XRFnq1q1qsaNG6fXXnvNbd7H2Tp27Kj4+HhNmzbN2Zaenq73339fJUqUUOvWrZ3bpaenu91iNCMjQ++//77b/vJzznmRnJys2bNn69Zbb1WPHj2y/TzyyCNKTEw8761zy5Urp1atWunzzz/X3r173dbZ9alzUFCQpOx/Bx06dFBwcLBeffVVt+F3Do73JK81nus4wcHBKlu2rP7880+39o8++ijP59CtWzf5+PhozJgx2d4Xy7J05MiRPO/rbAsWLNBLL72kypUr5zr3KKf/7k6cOKFJkya5bXfjjTfK19c3221vP/jgg3zV5ePjk+1c33///Vx7ggAUPfRoAJeR8uXLa+TIkXr++efVqlUrdenSRcWLF9eSJUv09ddfq3379urcuXO215UuXVotWrTQgAEDdODAAY0bN07VqlVz3kqzWLFievnllzVo0CC1bdtWvXr10u7duzVp0qRsczRuvfVWzZ49W127dlWnTp20e/duffzxx6pTp45Onjzp3C4wMFB16tTRtGnTVKNGDZUuXVr16tVTvXr19OGHH6pFixaqX7++Bg4cqCpVqujAgQNaunSpYmJitHbtWknSU089pSlTpujmm2/W0KFDnbe3dfQ4XAjHrWlz88ADD+j//u//1L9/f61atUqVKlXSzJkztXjxYo0bN845sb5z5866/vrr9cwzzyg6Olp16tTR7NmzcxzDntdzzos5c+YoMTFRXbp0yXF9s2bNnF/e16tXr1z3NX78eLVo0ULXXHONHnjgAVWuXFnR0dH66aef9O+//+a5pnNp2LChfHx89MYbb+jEiRPy9/d3fhfEhAkTdPfdd+uaa65R7969Va5cOe3du1c//fSTrr/+eufFcV5qbNSokSTpueeeU+/evVWsWDF17txZQUFBuv/++/X666/r/vvvV+PGjfXnn39q27ZteT6HqlWr6uWXX9azzz6r6Oho3X777SpZsqR2796tb7/9Vg888ICGDRt23v3MmzdPW7ZsUXp6ug4cOKAFCxbo119/VVRUlObMmZPrsMf27dvLz89PnTt31qBBg3Ty5ElNnDhR5cuXdwuvFSpU0NChQ/X222+rS5cuuvnmm7V27VrNmzdPZcuWzfME+ltvvVVTpkxRSEiI6tSpo6VLl+q3335TmTJl8vR6AEXEpb/RFYCL7csvv7SaNWtmBQUFWf7+/latWrWsMWPGuN061bJct0r9+uuvrWeffdYqX768FRgYaHXq1CnbrUIty7I++ugjq3Llypa/v7/VuHFj688//7Rat27tdjvKzMxM69VXX7WioqIsf39/6+qrr7Z+/PFHq1+/flZUVJTb/pYsWWI1atTI8vPzy3Yr0Z07d1r33HOPFRYWZhUrVsyKiIiwbr31VmvmzJlu+1i3bp3VunVrKyAgwIqIiLBeeukl67PPPsv37W1zo7Nub2tZlnXgwAFrwIABVtmyZS0/Pz+rfv36Od4i9ciRI9bdd99tBQcHWyEhIdbdd99trVmzJsdbqublnPNye9vOnTtbAQEB1qlTp865Tf/+/a1ixYpZhw8fdt7idezYsTluu2HDBqtr165WaGioFRAQYNWsWdN64YUXnOvP9T46bm2a9fdw9u1tLcuyJk6caFWpUsXy8fHJdm5//PGH1aFDByskJMQKCAiwqlatavXv399auXJlvmq0LMt66aWXrIiICMvb29utrqSkJOu+++6zQkJCrJIlS1o9e/a0Dh48eM7b257r72XWrFlWixYtrKCgICsoKMiqVauW9fDDD1tbt27Ncfuz3yfHj5+fnxUWFma1a9fOeu+999xuPX12LVnNmTPHatCggRUQEGBVqlTJeuONN6zPP/882+8gPT3deuGFF6ywsDArMDDQatu2rbV582arTJkybrebze22u8eOHXP+/ZcoUcLq0KGDtWXLlmy/33Pt41zvZb9+/aygoKBc3y8AhYeXZTHrCiiqFi5cqBtuuEEzZsxQjx49PF0OAA85fvy4SpUqpZdffjnHb30HgAvBHA0AAIqQnO5KN27cOElSmzZtLm0xAC5rzNEAAKAImTZtmiZPnqyOHTuqRIkS+vvvv51zuK6//npPlwfgMkLQAACgCGnQoIF8fX315ptvKiEhwTlB/OWXX/Z0aQAuM8zRAAAAAGA75mgAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO19PF1BYNG7cWPHx8Z4uAwAAAAVAWFiYVq5c6ekyCjSCRh7Fx8crNjbW02UAAAAAhQJBI7+8vaXwcE9XAQAAAE+Ii5MyMz1dRaFA0Miv8HApJsbTVQAAAMATIiMlRrnkCZPBAQAAANiOoAEAl7PJkyUvL/MTHX1pj71wob3H7t/f7KtSpf++rwtl9zn9F446Jk/2bB0AcA4EDQAFR5s2nr+QdKhUydQyerSnKym8goOlpk3Nj7+/p6spmBzhqU0bT1cCALZjjgYA4OK45hpp2TJPVwEA8BB6NAAUbI5ejnvukUaNMjdkKFVK6ttXSkx0befogXjmGemRR6TSpaWQEOmhh6TUVNd2OQ03cRyjf38zHMbLS9qzx6wbM8b1Gsm1/nxDVp54wmxTvrx0+LBpGzbM1XbgQP7eh9RUc/7Vq0t+fmYf997r2rfD++9LERFSUJDUp4904kT2fVmW9MILUtmyUmioeb9GjHA/T4cvv5SaNJGKF5dKlpRuvln699+81ZzTMKOsn+B/+KH5vZUsKd16q5T1u4pSU6VBg0yvSPny5vdgWdmPkZkpvfeeVK+eFBBg/jbuuEPavdusT0+Xrr3WHPPGG01bRobpZfHykm644cLvHrNlizmPgACpWjVp5kzXupgYqWNH6YorpMBA81OvnjRunOs8KlWSvvjCPF60yPVeLVxo2uLjpQceMPvw85MqVJDuuit7HSdOSAMGmPcqIkJ6+eULOx8AsJuFPImIiLAkWYqIsGRZ/PDDz8X4ad3a/HcWFZW9rVgxSyVLWqpc2TyXLI0Y4douKsq0+ftbKlPGfbvHH3dt52ibNCn7Mfr1s7R/v6WmTS35+bn+m2/a1PxYlqXdu3Pex9k/KSmW6tUz2911l6Vlyyx5e5vn33+f//emY0fzWh8fSw0aWAoONs/r1LGUlGS2mTPHVVu5cpauuMJSUJCrbfdus9348a62iAhL5cu7b+c45htvuNpq1LBUsaJ5HBRkadOm89f8xx/Zj92vn+v3GRBgqXp11zZ33eV67RNPuNqrVLEUGuqqMevfx4MPurarW9f87iVLYWGWDhww22zdaql4cdP+ySeW3nzTPA4NtbRnT/5+D1nPKSjIvC+O34W3t6XVq812a9aYtshIS1dfbd5jx+s++MBsc/vtlsqWNW0lS7r+zlatsnT4sOtvWjLv05VXmprP/lsODLQUHu7al2Rp/nzP//fMDz+X68+Za8KIiAgLuZOnCygsCBr88HMJfnILGiVLWoqJsZSRYalRI9PmuPi3LNdFWfXqlhISTNudd5o2Pz9Lx4+btvMFjbP3N2qUe40xMZZq1jQ/s2fnfj7//usKLBUqmOXAgfl/XxYudNW9aJFp27/fXGBKlj791LS1aGGeV61qKTHRUnq6pTZtsl/sR0aa59ddZyktzdLJk+Z8sgaNU6dcF+djxpi206ctNW5s2vr2PX/duQUNb2/z/liWpa5dXe+RZZl6/P1NW+/epu3gQUulS7v/fezaZcnLy7R98YVpS0x0nd/zz7tqmTDBtAUHu963qVPz/7vIek7PPGPa4uJMAJAs9epl2o4fd52zZZm/21atzDYtWrjaHe9H69buxxkzxnWc6dNd7Y4gk/Vv+brrLKWmWjp0yAQ4ydLTT3v+v2d++LlcfwgaecbQKQCFQ9u2ZliIt7dUq5Zpy2n40a23mqE4ktS7t1mmpUnbttlTR0SEGTKzZYvUtWvu2151lfTSS65aq1SR3n03/8f85x/X49atzfCaihWl5GTT5pgHsXGjWXboIJUoIfn4SN26ue8rIcH1XUBdu0rFiplhVp06uW+3caOUlGQejxpljlmsmLRypfsxL1T9+ub9kaQ6dczS8fvcudM13M1Rf7ly2SdMr1zpGobUr5+psWRJ1/llrXHwYOmWW8z5JydLvXrlPAwpP+680yzDwswQLElav94sfX2lN9+UoqLM++bjI/35p1m3f//59718uVlWq2aGgjlcfXX2bXv2NEOrypY1w8yk/A/NA4CLgMngAAqH0FDXY98z/3Q5LjIvREaG63FO8xjskvUWqEePSseOmQv7C9W0afa2sLAL319e1K5txv9nVabMf9tnTr/P/6Jhw+x3toqKcj1OSzPf5usQHW3+Bnx8/vuxc/LYY9Knn5rH1aubOUM7d5o5NVn/9uxg938bAGATejQAXF5++kk6edI8nj7dLP38pBo1zGPHJ76OHo4tW1yfQmdVvLhZnjrl3h4ba3pUatWSvv0291rmzpUmTDAXs/XqScePm8nQWS8CHZPY+/c/936aNHE9fvZZ80n9smXS33+b2+/ed59ZV7euWc6fb+rOyMheY3CwmVwsST/+aCZLJyWZ9y2runXNBGbJTABfutR13AkTpOeey/3c/4uqVV2h4bvvzPLwYdckaYdGjVyT1/v3d9W3dKk0dqw0ZIhr2xdeMJPYIyPNJ//Ll0uvvOJan9dJ/llNm2aWBw+6aqtf3ywdvSnt25u/tYULTW/Y2c71d+YIlDt2SLNnu9rzOhEfAAoAggaAy0tsrFS5srlYnTrVtD34oLkDleS689Dbb5vhLtddl/Onv47hWePHmwv9AQPM89Onpa1bzU9uPSGHD7sCwPDh0vffm56M3383d0nKjzZtzHAoSbr9dlNb3brmk+xbbnH1mgwbZpY7dphhWlWqSEuWZN/f8OFm+eefZpvKlaV9+9y3KV7cXJxLZrhXZKTpNShTxty2dv78/J1DfgQFmd+ZJH31lRk+VKNG9ovxKlWkgQPN48ceM88bNDDvS6tW0urVZt2ff0pvvWUeT5woffCBefzSS66hYBfivffM76JGDdNT5e0tPfWUWdeggVnOny/VrGnC3dnvseT6O1u50oSUZs3M0K6HH3b1yHTvbvZRubJriBYAFAIEDQCXl6FDza1vjx0z4/UHDZJef921/p13zHyEwEAzlGXECKlFi+z7efllc9Hn7W0uAnPq9cjNAw+Y25PWqWN6HapUMWP2JdMrsWmTCTiOsOL4JPxcvvtOGjnSDMPZtcvsu3Zt6fnnTW+JJN12mwkFYWHm1r+NG+d8q9NHHjGvK13aHL9rV1coCghwbffss+b2q02amPdzxw7TIzR4cPa5H3Z77TXp/vvNXJPjx8372bNn9u0mTDDnXL++mfuwZ4/pJXriCRPQEhLMrZEzM83tgG++2czPuOMO05vTt6+5sD92zOzPy8v1fp7PzJnmlrMpKeb3+/XXJoRJ5u/stttM/YmJJtx17px9H/fea4JESIi0YYPpacnIMIFu2TITpCIizO88KcnUDwCFhJdlMZAzLyIjIxUbG2v+wXdMNARQcFSqZC4yR40qPN/mvW6dmRBdr5759L1YsUtz3BMnzGRrxzCylBQTJjZsMOFq6dJLU0dBMn68CamDBkkff+zpagAUZJGRUmysIiIiFMM1Ya6YDA4AnuL4krZPPrl0IUMyX2bXrJn5IrvQUGnVKtMb4ONjvhgvr376yXVXrbN16uQaelUYLFpkeoKy9n4BAP4TggYAeMqjj5qfS61cOTOHYc0aMywpJMR8i/Uzz0gtW+Z9P4cOuW7DejbH3IPCYtYsT1cAAJcdhk7lEUOnAAAAwNCpvGMyOAAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2/l6uoBCJy5Oioz0dBUAAADwhLg4T1dQaBA08iszU4qN9XQVAAAAQIFG0MijsLAwT5cAAACAAoJrw/PzsizL8nQRAICCLzMzU9OmTVOvXr3k7c0UPwBA7vg/BQAgT9avX6+77rpL69ev93QpAIBCgKABAMiTjIwMtyUAALkhaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAC5SkhIkGVZbm2WZSkhIcFDFQEACgOCBgAgV40aNdIbb7zh1vb666+rUaNGHqoIAFAYEDQAALnq1KmT3njjDSUmJkqSEhMT9eabb6pTp04ergwAUJARNAAAuXr66aeVkpKib775RpL09ddfKyUlRU8//bSHKwMAFGQEDQBArsLDwzVo0CBNnTpVkvTVV19p0KBBCg8P93BlAICCzMs6e4YfAABniYuLU+XKlZWamip/f3/t3r2boAEAyBU9GgCA8woPD1e3bt0kSd26dSNkAADOix4NAECe7Nq1S+3bt9f8+fNVpUoVT5cDACjgCBoAAAAAbMfQKQAAAAC28/V0AYVF48aNFR8f7+kyAAAAUACEhYVp5cqVni6jQCNo5FF8fLxiY2M9XQYAAABQKBA08snb21uh5Sp4ugwAAAB4wPFDB5SZmenpMgoFgkY+hZaroImLVnm6DAAAAHjAwNaNdPRAnKfLKBSYDA4AAADAdgQNAAAAALZj6BQAFDJpqSn65ev/aenPP2jfzu1KS0lRaNmyCq9URde0ulFdBgxybpt86pTub3mVUpKSJEl3Dn1KPR58TJI0uO21OrQ/Jtdj9Xz4CfV6dJgkaX/0Ls35/GOtW/qXjh6Il39gcYVXqqxrb+ygbg88enFOFgBQaBE0AKAQSTx2VKMH9FT0lk2SJP/AQFWsVEXJp05q04plWr/0b7egsfSXH50hQ5L++G6GM2hUrlNPoeXKS5KOxMc5xxxXrl1Xvn7+kqQyYeGSpFWLftfbjz2g1ORkZ7t/YHHt2rhO29euJmgAALIhaABAITLxpeecIaPTPfer75Mj5OcfIEk6lZig5b/Oc9t+4bfTJUlV612lnRvWKn7Pbm1etVy1GzXV0x987txu2vtvafqH70iSnnr/c5WPvMK5LuHYEY178iGlJierREioho//VPWaNpckpSYn6feZXzu3TU1J1swJ72nJvDk6HBergOJBqt24qe4c8pSiataWJC2YPU0fjnhckjR68gx98eYYxe7coYiq1fTAyNdUo2Ejbft3lZ7t3VmS9PZ3v6pSrbqSpN9mfqUJzw+Tn3+APv1rjYKCQ2x6ZwEAdmOOBgAUEqcSTmjpLz9KkirVqqP+z4x2hgxJCioZrLbdejmfH4jZq00rl0mSej06TFXq1Jck/XEmfOTV4rlzlHQyUZLU48HHnCFDkvwDi6vj3fc5n7/+UH/N/r/xOrBvjypcEaX006e14vdfNOLOLorZtT3bvl95oK9Sk5OVkZGu3Zs26J0nHlRGerpqNGykipWqSJL+/ul75/ZL5s6RJDW5sT0hAwAKOIIGABQS+6N3KTMjQ5JUu1FTeXubf8Jff3iAuteq6PxZMHuaJNObYVmWQsqUVcPrW6tVl+6SpKU//6jU5KScD5KDmJ3bnI/rNG52zu3WL1usdUv+kiT1f2a0xs/9U+PnLlJA8SClJJ3St//3QbbX3DP8eb0/7y/1e2qkJOnQ/hjF7d0tSWpze09J0pKff5AknTh6ROuXL3ZbBwAouAgaAFAIeXm7/vmOqFxVlWrVcVtvWZYWfj9TktSi0+3y8fVVi063y9vHR0knE7XsrCFWubGsLMf1Ovd2Ozf863zc8taukqQyYRVVu3FTSdKOjWuzvab1bT0kSZHVajjbThw+fGZdd3l7e+vAvj3avm6Nls3/SZkZGSpVroKuur51nusHAHgGQQMAComKlavK28dHkrR1zUpn+93Dntfj70xw23bjP0t1MGavJOm3GVN1d5NaGtKxlawz32b7x7fT8nzcK7KEgE2r/rng+nPiGP7k4+OaMmidSTZlwyNU98wwrcVz52jxmWFTrbp0k8+Z9wEAUHARNACgkAgqGazmN5sJ0js3rNU348cq48xQqrNlnYeRmpyspMQEJSUmOC/iNy5fosNxsXk67vUdu6h4iZKSpBkfvquNK5Y516UkJen7z0zIqVqvobP9rx+/lSQdid+vzSuXS5Kq1b0qT8fLyjFEatGcmdp8Zr7JDV175fYSAEABQdAAgELk/udfVlRNM0xqxkfvqn/TOhrWtZ1G3dPDuU1K0iktm28mjXe5d7Bmbdnv/Jm8dIN8fH2VmZmphd/NyNMxg0uV0WNvfSj/wECdPHFMI+/upkE3NNbQTq3Vr2kd/W/sS5Kk+s2uV4PmLSVJk18fraGdWmtopzZKSTqlgOJB6jrokXyfb7N2HRVQPEgJR48oMzNTVetd5dbDAgAouAgaAFCIlCxVWq9N+0F3D3tOVes2UGZmpmJ37ZSff4AatmijQaPfUGZGhvO7M5q165jt9Y4J3X/kMWhIUqM2N+mt2fN10x19VD7ySh0/fFjHDh1UVI1a6vP4s87tnvlosroNGqLykVcqbs9u+fj6qsmNHfTq13MUWaV6vs83oHhxXdehk/P5DV2ZBA4AhYWXZWWd5odziYyMVGxsrEpXCNfERas8XQ4AAAA8YGDrRjp6IE4RERGKiYnxdDkFGj0aAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAJeZxGNH1bdRDfVtVEOnEhM8Xc55nUpMcNabeOyop8sBANiEoAEAl5nvPp+g5FMndWOPOxVUMliSlJaaovFPD9Gjt7RUj9oR6l6rop7pdet/Ok5Gerq+++wjPd65rXo3qKy7G9fU8G4dtGrhb9m3zcjQiN6d1b1WRXWvVVFT3n7FuS6oZLBuuqOPkk+d1HefT8j2WgBA4UTQAIDLyOm0NP0+4ytJUqvO3V3tqala9P1MpSQlKfDMt3z/F5ZlaeyQ+zVl7Mvau32LyoSFq3zkFToYu0+7N2/Itv2MD9/R1n/PfWvwlrd2lSQtmPm10k+f/s/1AQA8z9fTBQAA7LNuyZ9KPH5MpcpVUNV6DZztAUEl9Omfa1SqfAWNvLu7Nq5Y+p+Os3ju91qxYL4CihfXC59+rVrXNJFkAojjywIdtqxeoVn/N17Nb+msJfN+yHF/Ves1UKlyFXTs0AGtXfKnGrW+8T/VBwDwPHo0AOAysnnVP5KkavWvcmv38fFRqfIVbDvO4nlzJEnlI6P01bg31Oea6nqo3XWa9v5b8i1WzLld0slEvffUoypdvoIGj3kz1306at68crltdQIAPIceDQC4jMTt2S1JKhdxxUU9zv7dOyVJe7dtVvESJVW6Qpj2796pGR+9q8TjxzRw5KuSpIkvjtDh/TEa/cVMBQWH5LrPchUjJUnxe6Mvau0AgEuDHg0AuIwknTR3mQoMKnFRj5ORniFJ8vbx0dvf/ab35/2ltt17S5J+mzFV6adPa/mv8/TnnFnqNmiI6jZpdt59OuaOJBWCO2UBAM6PoAEAl5HAIHOxnpJ06qIep3SFMElScOkyKh9pek+q179akpR++rSOHohX9JaNkqQfJv+f+lxTTX2uqeZ8/Y+TP9HA1o3c9pl8MtGcgw2T1QEAnkfQAIDLSHilypKkQ/tjLuj1095/y3kL2tw0aN5SkpRw9IgOxppj7dy4VpIUULy4SpUv79w2NTlZKUlJbpPE00+fzhaGHDWHR1W+oNoBAAULczQA4DJSp1FTfTfxQ+3auC7buofbN5ckHT0QL0mK3rzR2fbilFkqUyE8z8e55a7++m36VB3aH6Mnb79JpcqVV+yuHZKk2+9/WMX8/NXr0WHq9egwt9c5AsztAx/W3U8+57Zux3oTVGo3bprnOgAABRc9GgBwGWnQvJVKhpbS4bj92b7PIn5vtOL3RistNUWSdDot1dmWcTpdknQy4YQk6crqtXI9TlBwiF6e+q1adLpd3t4+OhK/X1Xq1NeQN9/XHQ89nu+6d25Yp2OHDii4VGld1bxVvl8PACh46NEAgMtIMT8/3XjHXfpu4oda9P0sVa5dz7lu1pb953395lXL5eXlpcEv5n4rWkkqGx6hx9/+KF/1nauGP3+YLUm6scddbrfHBQAUXvRoAMBl5vZ7H1RgUAn9PvMrncrHHZxOJSZoz5ZNatezr2pe3fgiVpj9uL/P/EqBQSV0272DL9lxAQAXFz0aAHCZKVmqtL5ctS3frwsqGawZmy5sEvl/EVQy+ILqBQAUbPRoAAAAALAdQQMAAACA7Rg6lU/HDx3I9iVTAAAAKBqOHzrg6RIKDYJGPmVmZurogThPlwEAAAAUaASNPAoLC/N0CQAAACgguDY8Py/LsixPFwEAKPjS09M1YcIEPfjgg/L15XMqAEDuCBoAgDxZs2aNrrnmGq1evVpXX321p8sBABRw3HUKAJAnjs+l+HwKAJAXBA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAgVzExMcrMzHRry8jIUExMjIcqAgAUBgQNAECuWrdureeff96t7YUXXlDr1q09VBEAoDAgaAAActWrVy+NHz9ex44dkyQdO3ZM48ePV+/evT1cGQCgICNoAABy9cQTT8jLy0tTpkyRJE2ZMkVeXl564oknPFwZAKAgI2gAAHJVtmxZPfroo5o+fbokafr06RoyZIjKlCnj4coAAAWZl2VZlqeLAAAUbIcPH1ZUVJSSkpJUvHhx7d27l6ABAMgVPRoAgPMqW7asevXqJUnq3bs3IQMAcF70aAAA8mT//v267bbbNGfOHIWHh3u6HABAAUfQAAAAAGA7hk4BAAAAsJ2vpwsoLBo3bqz4+HhPlwEAAIACICwsTCtXrvR0GQUaQSOP4uPjFRsb6+kyAAAAgEKBoJFP3t4ScyABAACKprg4KTPT01UUDgSNfAoPl2JiPF0FAAAAPCEyUmKQS94wGRwAAACA7QgaAFDEVKokeXlJo0d7uhIAwOWMoAEAl0CbNubi3vFTrJgZitmzp7R7d/73N3q02U+lSjYXeh5Zz2HxYlf7xx+72qOjL21NOYmLk3r1kipXdtXVu7enqwKAooWgAQCXkJ+f1LSpVLu2FB8vzZghde7s6aouzLPPXrx9p6X9t9cfOCBNn24CRkCAPTUBAPKHoAEAl1B4uLRsmbRunXTffaZt40bpyBHzODlZuv1280l8UJDk7y9Vry6NHOm6+G7TRhozxjzes8f1if3kyaYtMVEaNkyqWtUEmzJlpJtvNvvOKi1NeuIJs758eWnoUCk9Pe/n8tdf0rx5uW/z999Shw5SSIg5l9q1pbFjpYwM1zaOoVzDh0v33iuFhprXSK5zGz5c6tfPvCfVqklz50pbtkgtWpi25s2lzZtd+6xZUzp8WNq1S6pQIe/nBACwD3edAgAPSEpy3bWkXDkpONg8Tk2Vvv/eXBzXqGEulnfskF56yQSFsWOlOnVMW2ysCRJXX+3aT1qaCSKrV5u2qCgzTGv+fLPvwEBXDePGmeeBgWZf48dL9epJAweev/6rr5bWrJFGjDAhJicLF0rt2pnwUqqUqWXLFumpp6Rt26SJE923Hz9e8vExQSJrnZL0/vtS2bImrOzcaYZBhYSYc5OkpUtNSFm61Dx3nBcAwHPo0QCAS8jRAxEUJP38swkKX37pumAOCjI9HPHx5kJ+3z6pb1+z7ptvzPKjj6T77zePHT0ky5ZJnTqZbRwh4803zXyJ7dul9eul4sXdawkLM5/479ghVaxo2n7/PW/n0b691Lq19O+/0rRpOW8zapQJGVFR5jjbtpleE0n67DPTllVwsLR1q+nt+eEH93XVqpmAMX26eZ6YaALXzp0moEjmPTi71wYA4DkEDQC4hBxzNBo1Mp+4p6VJAwa4vp/H29sEjxo1zKf3Xl7muSTt33/+/S9fbpb+/mZYlEPduubYWXXpYnoFAgLMUC3JzG3Iq1dfNcuRI3MecrVihVl27GiGQ0nSXXeZpWVJq1a5b9+9u3TFFeaxj4/7uvbtzTllnfzeqZN5f6pUcbUdPJj3+gEAFxdBAwAuIUcPxMqV5kcyAeLjj83j11+XXnvN9EKEh5tQEhFh1uX3m2i9vHJf77j4lyTfMwNpLSvv+2/e3Exk375dmjQpf7XlJLe5FI6hZb6+2duynmd+6gcAXFwEDQAoAFJSzHLZMrOsUcMMe1q8WLrqquzbO4ZBJSW5X1w3bWqWqalmDobD5s3//U5OOXn1VdML4xiulVWTJmY5d650/Lh5/PXXZunlZXp1sjpfMAIAFC4EDQC4hOLipGbNpMaNzY9kLtQdt7ht0MAst20zw5miolzhI6tatczy0CFzh6Vmzcych969pWuuMeuefNLso0YNM8k7Kcn+86lXzzUc6mxjxpgeiD17zPCmGjVc4ee++9yHPNktNtbM66hWzTXp/qefXG0AgIuPoAEAl1BamplHsWqVuQi/7jozmbp1a7N+xAhzG9fQUCkhwQSHhx7Kvp9bbzV3hypTxgxdWr7cBAk/P+mPP1whIzbW3Dr3ppvMHIeL4cUXXZPZs2rTxtTSrp25nW10tAlIb7zhGip2sZw+bSaK79zpmj9y8qSrDQBw8XlZFiNa8yIyMlKxsbGKiHBN2gQAAEDREhlpPsSJiIhQDBeFuaJHAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AKCIOnLEfOldcLB04oS9+87IMLev9fWVtmyxd98AgMKBoAEARdTYsVJiovlOi5AQV/unn5ov2wsKkkqUMN+Vca5v/u7Z03zRnpeXuRWvg4+P9PjjJnCMHn1RTwMAUEARNACgCEpLM4FCkvr2dbU/+qj5fo6VK6WyZaXq1c2XAi5enH0fkyZJM2ac+xi9epnAMWuWdPCgvfUDAAo+ggYAFEG//mqGToWHS40ambalS6UPPjDfVD57tvlG7zVrpAMHpHffdX/9zp3SkCHmCwcjI3M+RvnypmckPV2aOfPing8AoOAhaABAEfT332bZpImrbfp0s4yIkD7/3AynuvJK08uR9atd09OlPn1MIJk61fRanMu115rlX3/ZWz8AoODz9XQBAIBLb/t2s6xUydW2datZ7tsnHT5sJnNv2mR6OaKjpR9+MOvHjJGWL5e+/FKqXDn340RFmeWOHXZWDwAoDOjRAIAiyHGXqZIlXW3p6a7H8+dLGzaYUCFJP/5owsbKldJrr5l5HX36nP84wcHuxwMAFB0EDQAoghwB4ORJV1tEhOuxY0iVY+iTZILGhg3mTlIzZ5o7UpUoIe3da9bPmmWeZw0VCQnuxwMAFB0EDQAogqpXN8s9e1xtN93kerxypfvSy0uqVs21PiVFOnXK/Djmb6Snuz/Pun/H8QAARQdBAwCKoJYtzXLVKldbz55S48bmcfv2Uv360gsvmOcDBpi7S/Xvb4JE1h/HPIxevczz0FDXPv/5x/14AICig6ABAEVQu3ZSmTJm4ve//5q2YsXM3IxBg8xQpx07pLp1pXHjpE8+yf8xDh6UVqww3w7eo4ed1QMACgPuOgUARZCfn3T//dIbb0hTpkgNG5r2UqWkjz82P3kVHZ1z+zffmPkcvXub79QAABQt9GgAQBE1fLi569Snn9p/V6iMDNMT4u0tjRpl774BAIUDPRoAUESVKeO6K5TdfHykXbsuzr4BAIUDPRoAAAAAbEfQAAAAAGA7hk7lU1ycucUjAAAAip64OE9XUHgQNPIpM1OKjfV0FQAAAEDBRtDIo7CwME+XAAAAgAKCa8Pz87Isy/J0EQCAgi8tLU0vv/yynn/+efn5+Xm6HABAAUfQAADkyerVq9WoUSOtWrVK11xzjafLAQAUcNx1CgAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQBArtavX6/U1FS3ttTUVK1fv95DFQEACgOCBgAgV127dtXw4cPd2oYPH66uXbt6qCIAQGFA0AAA5Kp///765JNPdPDgQUnSwYMH9cknn2jAgAEergwAUJB5WZZleboIAEDBdeLECVWuXFnt27fXtGnT1KtXL82fP1/R0dEKDg72dHkAgAKKHg0AQK5CQkL0xBNP6Ntvv5Ukffvtt3ryyScJGQCAXNGjAQA4rxMnTujKK69UQkKCgoODtW/fPoIGACBX9GgAAM4rJCREffr0kST17duXkAEAOC96NAAAeXLs2DH16dNHU6dOValSpTxdDgCggCNoAAAAALAdQ6cAAAAA2M7X0wUUFo0bN1Z8fLynywAAAEABEBYWppUrV3q6jAKNoJFH8fHxio2N9XQZAAAAQKFA0Mgnb29vhZar4OkyAAAA4AHHDx1QZmamp8soFAga+RRaroImLlrl6TIAAADgAQNbN9LRA3GeLqNQYDI4AAAAANsRNAAAAADYjqFTAFDIpKWm6Jev/6elP/+gfTu3Ky0lRaFlyyq8UhVd0+pGdRkwyLlt8qlTur/lVUpJSpIk3Tn0KfV48DFJ0uC21+rQ/phcj9Xz4SfU69FhkqT90bs05/OPtW7pXzp6IF7+gcUVXqmyrr2xg7o98OjFOVkAQKFF0ACAQiTx2FGNHtBT0Vs2SZL8AwNVsVIVJZ86qU0rlmn90r/dgsbSX350hgxJ+uO7Gc6gUblOPYWWKy9JOhIf5xxzXLl2Xfn6+UuSyoSFS5JWLfpdbz/2gFKTk53t/oHFtWvjOm1fu5qgAQDIhqABAIXIxJeec4aMTvfcr75PjpCff4Ak6VRigpb/Os9t+4XfTpckVa13lXZuWKv4Pbu1edVy1W7UVE9/8Llzu2nvv6XpH74jSXrq/c9VPvIK57qEY0c07smHlJqcrBIhoRo+/lPVa9pckpSanKTfZ37t3DY1JVkzJ7ynJfPm6HBcrAKKB6l246a6c8hTiqpZW5K0YPY0fTjicUnS6Mkz9MWbYxS7c4ciqlbTAyNfU42GjbTt31V6tndnSdLb3/2qSrXqSpJ+m/mVJjw/TH7+Afr0rzUKCg6x6Z0FANiNORoAUEicSjihpb/8KEmqVKuO+j8z2hkyJCmoZLDaduvlfH4gZq82rVwmSer16DBVqVNfkvTHmfCRV4vnzlHSyURJUo8HH3OGDEnyDyyujnff53z++kP9Nfv/xuvAvj2qcEWU0k+f1orff9GIO7soZtf2bPt+5YG+Sk1OVkZGunZv2qB3nnhQGenpqtGwkSpWqiJJ+vun753bL5k7R5LU5Mb2hAwAKOAIGgBQSOyP3qXMjAxJUu1GTeXtbf4Jf/3hAepeq6LzZ8HsaZJMb4ZlWQopU1YNr2+tVl26S5KW/vyjUpOTcj5IDmJ2bnM+rtO42Tm3W79ssdYt+UuS1P+Z0Ro/90+Nn7tIAcWDlJJ0St/+3wfZXnPP8Of1/ry/1O+pkZKkQ/tjFLd3tySpze09JUlLfv5BknTi6BGtX77YbR0AoOAiaABAIeTl7frnO6JyVVWqVcdtvWVZWvj9TElSi063y8fXVy063S5vHx8lnUzUsrOGWOXGsrIc1+vc2+3c8K/zcctbu0qSyoRVVO3GTSVJOzauzfaa1rf1kCRFVqvhbDtx+PCZdd3l7e2tA/v2aPu6NVo2/ydlZmSoVLkKuur61nmuHwDgGQQNACgkKlauKm8fH0nS1jUrne13D3tej78zwW3bjf8s1cGYvZKk32ZM1d1NamlIx1ayznyb7R/fTsvzca/IEgI2rfrnguvPiWP4k4+Pa8qgdSbZlA2PUN0zw7QWz52jxWeGTbXq0k0+Z94HAEDBRdAAgEIiqGSwmt9sJkjv3LBW34wfq4wzQ6nOlnUeRmpyspISE5SUmOC8iN+4fIkOx8Xm6bjXd+yi4iVKSpJmfPiuNq5Y5lyXkpSk7z8zIadqvYbO9r9+/FaSdCR+vzavXC5Jqlb3qjwdLyvHEKlFc2Zq85n5Jjd07ZXbSwAABQRBAwAKkfuff1lRNc0wqRkfvav+TetoWNd2GnVPD+c2KUmntGy+mTTe5d7BmrVlv/Nn8tIN8vH1VWZmphZ+NyNPxwwuVUaPvfWh/AMDdfLEMY28u5sG3dBYQzu1Vr+mdfS/sS9Jkuo3u14NmreUJE1+fbSGdmqtoZ3aKCXplAKKB6nroEfyfb7N2nVUQPEgJRw9oszMTFWtd5VbDwsAoOAiaABAIVKyVGm9Nu0H3T3sOVWt20CZmZmK3bVTfv4BatiijQaNfkOZGRnO785o1q5jttc7JnT/kcegIUmN2tykt2bP10139FH5yCt1/PBhHTt0UFE1aqnP4886t3vmo8nqNmiIykdeqbg9u+Xj66smN3bQq1/PUWSV6vk+34DixXVdh07O5zd0ZRI4ABQWXpaVdZofziUyMlKxsbEqXSFcExet8nQ5AAAA8ICBrRvp6IE4RUREKCYmxtPlFGj0aAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAUYonHjqpvoxrq26iGTiUmeLoc2yyY9Y2616qod598yNOlAAAuEEEDAAqx7z6foORTJ3VjjzsVVDLYbd1vM6bqqR636K6rq6rPNdX0WOcbtGDWNznu563HBql7rYrqXqui3nli8AXXcyBmr95/5jHd17KhetWP0r3XN9Arg+7OMQTt2rRevepXch43Ztd257qWnbsptFx5LZk3R/t2bLvgegAAnkPQAIBC6nRamn6f8ZUkqVXn7m7rPn3pOU14Ybh2blirkqVKKzyqshKOHtGWNSuy7WfBrG+09Ocf/nM9+3fv1NM9btHC76Yr+WSiIqpUV4mQUK1b8qdSTp102zY1JVnjhj2s9NNpOe6rmJ+frmvfSZmZmZo/bcp/rg0AcOn5eroAAMCFWbfkTyUeP6ZS5Sqoar0Gzvata1Zq3tRJ8vb21rD3Jqppu1uc65JPul/wx++N1mevvKCaDRvpcPx+HYmPu+B6PnvlBSUeP6Z6Ta/XU+9/qqDgEEkmVPj6FnPbdvLrYxS7a4euu7nzOUNOozbtNG/qJC2e+73ue+6lC64LAOAZ9GgAQCG1edU/kqRq9a9ya19y5sK9dIUw/T7ra93duKYG3dBYn770nCy5vqM1Iz1d44Y/Im9vbw1960N5e/tccC0nTxzX2sWLJElBwSF6qsct6nNNdT3T61ZtWfWPfHxdn2utWDBf87/5nzr2vVfXtGp7zn06zuvEkcOK3bXjgmsDAHgGQQMACqm4PbslSeUirnBrj929U5J0OG6/1i/7W2XCK+pIfJzmTZ2kccMedm43/cN3tH3tag0c9ZoqRF75n2uxLBNilv86V5mZmfLz99f2tav18gN9tW3taknSsUMH9dHzT+rKGrV19/Dnc91nydBSCgwqIcn0vAAACheCBgAUUkknzQRrx8W4Q2Z6uvPxyM++1rgf/lCvR4dJklYt/E0HY/Zpx/q1mv3J+2rVpbtade72n2vJyHLMBs1b6qNfl+qD+UtUIqSUMjMy9MvX/5Mk/d+op5Ry6pQef+tD+fkHnHe/gSVKSpKSLqM7agFAUcEcDQAopAKDzEV4StIpt/bSFcKcj6vVb3hmebWz7WDsPh2M3afMjAwt++Un/fPbPElSanKyJGnZ/Lnqc001fbJodbY7WZ1L6QrhzsdV614lLy8vBZUMVsVKVbRt7Sodit0nSYresknpp9P0bO9bJUkZ6RnO1z3V/Wbd0meA7h7m6ulIPplozvVM4AAAFB70aABAIRVeqbIk6dD+GLf2Bs1bOR/v3LDWLDeapZeXl8KjKjnXp6WmKCUpSSlJSc6hTxnp6UpJSpLOPB/c9lp1r1VR7z/z2DlrKR8RqfCoKpKkXRvXybIsJZ1M1P7oXW61SlJmZqbzmKfTUp3tqcnJOp3mugtV4vFjSj5zt6rwKNfrAQCFAz0aAFBI1WnUVN9N/FC7Nq5za29+c2f9+MVE7dywVi/ed6cqREZp346tkqQbuvVSmbCKatutl9p26+X2usFtr9Wh/TG6vmMXPfHOx/mup++TI/TW0IFau+RPPdy+uZJPndTJE8cUULy4OvcfJEn6eME/bq9ZMHuaPhzxuCTpvbmLFFmlunPdjvUmHIWUKauIKtXyXQ8AwLPo0QCAQqpB81YqGVpKh+P2a/fmDc5232LFNPKzr9W+190KLFFS8XujdUW1mhow4kUNfnFsvo7h6JmQpKgatXLdtln7jnr6w89VrX5DHTt4QN7e3rr2ppv1xsx5iqxaPdfX5mTVwl8lSdd3vC3frwUAeJ6X5egrR64iIyMVGxur0hXCNXHRKk+XAwCSpClvv6LvJn6ozv0Hqf8zo2zff/TWTXrytpt0ZfVaGjv7F/kWK3b+F9ngdFqaBrdtooSjR/TOnAW6olqNS3JcADifga0b6eiBOEVERCgmJub8LyjC6NEAgELs9nsfVGBQCf0+8yudugh3Ztr0z1J5eXlp8ItvXrKQIUl//jBLxw8f0vUdbyNkAEAhRY9GHtGjAQAAAHo08o4eDQAAAAC2I2gAAAAAsB23t82n44cOaGDrRp4uAwAAAB5w/NABT5dQaBA08ikzM1NHD8R5ugwAAACgQCNo5FFYWJinSwAAAEABwbXh+XHXKQBAniQlJWnYsGF66623VLx4cU+XAwAo4JgMDgDIky1btmjChAnasmWLp0sBABQCBA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAALlatGiREhIS3NoSEhK0aNEiD1UEACgMCBoAgFw98MADeuKJJ9zaHn/8cT3wwAMeqggAUBgQNAAAuRo0aJC++OILxcTESJJiYmL0xRdfaPDgwR6uDABQkHlZlmV5uggAQMGVlJSkypUr67rrrtP333+v2267TcuWLdOuXbtUvHhxT5cHACig6NEAAOSqePHievrpp/Xjjz9Kkn788Uc9/fTThAwAQK7o0QAAnFdSUpKuuOIKHT16VGXKlNHevXsJGgCAXNGjAQA4r+LFi6t///6SpP79+xMyAADnRY8GACBPTp06pUceeUQffvghQQMAcF4EDQAAAAC2Y+gUAAAAANv5erqAwqJx48aKj4/3dBkAAAAoAMLCwrRy5UpPl1GgETTyKD4+XrGxsZ4uAwAAACgUCBr55O0thYd7ugoAAAB4QlyclJnp6SoKB4JGPoWHSzExnq4CAAAAnhAZKTHIJW+YDA4AAADAdgQNAChiKlWSvLyk0aM9XQkA4HJG0ACAS6BNG3Nx7/gpVswMxezZU9q9O//7Gz3a7KdSJZsLPY+s57B4sav9449d7dHRl7amnPzwg3T77eb9CQyUKlSQ2reXFi3ydGUAUHQQNADgEvLzk5o2lWrXluLjpRkzpM6dPV3VhXn22Yu377S0//b6WbOk77+XMjKkatWkQ4ekX3+VbrxRWrrUnhoBALkjaADAJRQeLi1bJq1bJ913n2nbuFE6csQ8Tk42n8RXriwFBUn+/lL16tLIka6L7zZtpDFjzOM9e1w9CZMnm7bERGnYMKlqVRNsypSRbr7Z7DurtDTpiSfM+vLlpaFDpfT0vJ/LX39J8+blvs3ff0sdOkghIeZcateWxo41AcDBMZRr+HDp3nul0FDzGsl1bsOHS/36mfekWjVp7lxpyxapRQvT1ry5tHmza58tW0rLl0v79knr10vffmvaMzKkb77J+zkCAC4cd50CAA9ISnLdtaRcOSk42DxOTTWfxFeoINWoIR0+LO3YIb30kgkKY8dKdeqYtthYEySuvtq1n7Q0E0RWrzZtUVFmmNb8+WbfgYGuGsaNM88DA82+xo+X6tWTBg48f/1XXy2tWSONGGFCTE4WLpTatTPhpVQpU8uWLdJTT0nbtkkTJ7pvP3685ONjgkTWOiXp/felsmVNWNm5U+rd24SXYsXM+qVLTUhx9FY4QpxDy5aux/7+5z8/AMB/R48GAFxCjh6IoCDp559NUPjyS9cFc1CQ6eGIjzcX8vv2SX37mnWOT+I/+ki6/37z2NFDsmyZ1KmT2cYRMt5808yX2L7dfKpfvLh7LWFh0q5dJrRUrGjafv89b+fRvr3UurX077/StGk5bzNqlAkZUVHmONu2mV4TSfrsM9OWVXCwtHWr6e354Qf3ddWqmYAxfbp5nphoAtfOnSagSOY9OLvXxuGjj8zS31+65568nSMA4L8haADAJeSYo9GokfnUPi1NGjDA9f083t4meNSoYS6KvbzMc0nav//8+1++3Cz9/c2wKIe6dc2xs+rSxfQKBASYoVqSdOBA3s/l1VfNcuTInIdcrVhhlh07muFQknTXXWZpWdKqVe7bd+8uXXGFeezj476ufXtzTlknv3fqZN6fKlVcbQcPZq/jxRelF14wYe5//zO9NgCAi4+gAQCXkKMHYuVK8yOZAPHxx+bx669Lr71meiHCw00oiYgw6/L7TbReXrmvd1z8S5LvmYG0lpX3/Tdvbiayb98uTZqUv9pyUqHCudc5hpb5+mZvy3qeWes/fdqEuFGjpBIlzJC0nj3/e50AgLwhaABAAZCSYpbLlplljRpm2NPixdJVV2Xf3jEMKinJ/eK6aVOzTE01czAcNm/+73dyysmrr5peGMdwrayaNDHLuXOl48fN46+/NksvL9Ork9X5glF+nDgh3XKLmSAfEWEmrt9yi337BwCcH0EDAC6huDipWTOpcWPzI5kLdcctbhs0MMtt28xwpqgoV/jIqlYtszx0SKpZ0+xz1y4zSfqaa8y6J580+6hRwwwXSkqy/3zq1XMNhzrbmDGmB2LPHjO8qUYNV/i57z73IU92e+op13wTf39p8GDzHjVrJj300MU7LgDAhaABAJdQWpqZR7FqlbkIv+46M5m6dWuzfsQIcxvX0FApIcEEh5wujG+91dwdqkwZM3Rp+XITJPz8pD/+cIWM2Fhz69ybbrp4d1t68UXXZPas2rQxtbRrZ24rGx1tAtIbb7iGil0sqamux7t2mffH8bNp08U9NgDA8LKs/IzILboiIyMVGxuriAjXpE0AAAAULZGR5kOciIgIxXBRmCt6NAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwCKqCNHzJfeBQeb752wU0aGuX2tr6+0ZYu9+wYAFA4EDQAoosaOlRITzXdahIS42j/91HzZXlCQ+UbtevXO/c3fPXuaL9rz8jK34nXw8ZEef9wEjtGjL+ppAAAKKIIGABRBaWkmUEhS376u9kcfNd/PsXKlVLasVL26+VLAxYuz72PSJGnGjHMfo1cvEzhmzZIOHrS3fgBAwUfQAIAi6NdfzdCp8HCpUSPTtnSp9MEH5pvKZ8823+i9Zo104ID07rvur9+5UxoyxHzhYGRkzscoX970jKSnSzNnXtzzAQAUPAQNACiC/v7bLJs0cbVNn26WERHS55+b4VRXXml6ObJ+tWt6utSnjwkkU6eaXotzufZas/zrL3vrBwAUfL6eLgAAcOlt326WlSq52rZuNct9+6TDh81k7k2bTC9HdLT0ww9m/Zgx0vLl0pdfSpUr536cqCiz3LHDzuoBAIUBPRoAUAQ57jJVsqSrLT3d9Xj+fGnDBhMqJOnHH03YWLlSeu01M6+jT5/zHyc42P14AICig6ABAEWQIwCcPOlqi4hwPXYMqXIMfZJM0NiwwdxJauZMc0eqEiWkvXvN+lmzzPOsoSIhwf14AICig6ABAEVQ9epmuWePq+2mm1yPV650X3p5SdWqudanpEinTpkfx/yN9HT351n37zgeAKDoIGgAQBHUsqVZrlrlauvZU2rc2Dxu316qX1964QXzfMAAc3ep/v1NkMj645iH0auXeR4a6trnP/+4Hw8AUHQQNACgCGrXTipTxkz8/vdf01asmJmbMWiQGeq0Y4dUt640bpz0ySf5P8bBg9KKFebbwXv0sLN6AEBhwF2nAKAI8vOT7r9feuMNacoUqWFD016qlPTxx+Ynr6Kjc27/5hszn6N3b/OdGgCAooUeDQAoooYPN3ed+vRT++8KlZFhekK8vaVRo+zdNwCgcKBHAwCKqDJlXHeFspuPj7Rr18XZNwCgcKBHAwAAAIDtCBoAAAAAbMfQqXyKizO3eAQAAEDRExfn6QoKD4JGPmVmSrGxnq4CAAAAKNgIGnkUFhbm6RIAAABQQHBteH5elmVZni4CAFDwJSQk6L777tNnn32m4OBgT5cDACjgmAwOAMiTHTt2aObMmdqxY4enSwEAFAIEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAufruu+906NAht7ZDhw7pu+++80xBAIBCgaABAMjVc889p6FDh7q1DRkyRM8995yHKgIAFAYEDQBAroYMGaJvvvlGu3fvliTt2rVL06ZN05AhQzxcGQCgIPOyLMvydBEAgIIrLS1N1apVU506dfTLL7+oQ4cO2rRpk3bs2CE/Pz9PlwcAKKDo0QAA5MrPz0/PPfec5s+fL0maP3++nnvuOUIGACBX9GgAAM4rLS1NV155pQ4cOKAKFSpo7969BA0AQK7o0QAAnJefn58GDhwoSRo4cCAhAwBwXr6eLgAAUDiMHDlSmZmZGjlypKdLAQAUAgydAgAAAGA7hk4BAAAAsB1Dp/KocePGio+P93QZAAAAKADCwsK0cuVKT5dRoBE08ig+Pl6xsbGeLgMAAAAoFAga+eTt7a3QchU8XQYAAAA84PihA8rMzPR0GYUCQSOfQstV0MRFqzxdBgAAADxgYOtGOnogztNlFApMBgcAAABgO4IGAAAAANsxdAoACpm01BT98vX/tPTnH7Rv53alpaQotGxZhVeqomta3aguAwY5t00+dUr3t7xKKUlJkqQ7hz6lHg8+Jkka3PZaHdofk+uxej78hHo9OkyStD96l+Z8/rHWLf1LRw/Eyz+wuMIrVda1N3ZQtwcevTgnCwAotAgaAFCIJB47qtEDeip6yyZJkn9goCpWqqLkUye1acUyrV/6t1vQWPrLj86QIUl/fDfDGTQq16mn0HLlJUlH4uOcY44r164rXz9/SVKZsHBJ0qpFv+vtxx5QanKys90/sLh2bVyn7WtXEzQAANkQNACgEJn40nPOkNHpnvvV98kR8vMPkCSdSkzQ8l/nuW2/8NvpkqSq9a7Szg1rFb9ntzavWq7ajZrq6Q8+d2437f23NP3DdyRJT73/ucpHXuFcl3DsiMY9+ZBSk5NVIiRUw8d/qnpNm0uSUpOT9PvMr53bpqYka+aE97Rk3hwdjotVQPEg1W7cVHcOeUpRNWtLkhbMnqYPRzwuSRo9eYa+eHOMYnfuUETVanpg5Guq0bCRtv27Ss/27ixJevu7X1WpVl1J0m8zv9KE54fJzz9An/61RkHBITa9swAAuzFHAwAKiVMJJ7T0lx8lSZVq1VH/Z0Y7Q4YkBZUMVttuvZzPD8Ts1aaVyyRJvR4dpip16kuS/jgTPvJq8dw5SjqZKEnq8eBjzpAhSf6BxdXx7vucz19/qL9m/994Hdi3RxWuiFL66dNa8fsvGnFnF8Xs2p5t36880FepycnKyEjX7k0b9M4TDyojPV01GjZSxUpVJEl///S9c/slc+dIkprc2J6QAQAFHEEDAAqJ/dG7lJmRIUmq3aipvL3NP+GvPzxA3WtVdP4smD1NkunNsCxLIWXKquH1rdWqS3dJ0tKff1RqclLOB8lBzM5tzsd1Gjc753brly3WuiV/SZL6PzNa4+f+qfFzFymgeJBSkk7p2//7INtr7hn+vN6f95f6PTVSknRof4zi9u6WJLW5vackacnPP0iSThw9ovXLF7utAwAUXAQNACiEvLxd/3xHVK6qSrXquK23LEsLv58pSWrR6Xb5+PqqRafb5e3jo6STiVp21hCr3FhWluN6nXu7nRv+dT5ueWtXSVKZsIqq3bipJGnHxrXZXtP6th6SpMhqNZxtJw4fPrOuu7y9vXVg3x5tX7dGy+b/pMyMDJUqV0FXXd86z/UDADyDoAEAhUTFylXl7eMjSdq6ZqWz/e5hz+vxdya4bbvxn6U6GLNXkvTbjKm6u0ktDenYStaZb7P949tpeT7uFVlCwKZV/1xw/TlxDH/y8XFNGbTOJJuy4RGqe2aY1uK5c7T4zLCpVl26yefM+wAAKLgIGgBQSASVDFbzm80E6Z0b1uqb8WOVcWYo1dmyzsNITU5WUmKCkhITnBfxG5cv0eG42Dwd9/qOXVS8RElJ0owP39XGFcuc61KSkvT9ZybkVK3X0Nn+14/fSpKOxO/X5pXLJUnV6l6Vp+Nl5RgitWjOTG0+M9/khq69cnsJAKCAIGgAQCFy//MvK6qmGSY146N31b9pHQ3r2k6j7unh3CYl6ZSWzTeTxrvcO1iztux3/kxeukE+vr7KzMzUwu9m5OmYwaXK6LG3PpR/YKBOnjimkXd306AbGmtop9bq17SO/jf2JUlS/WbXq0HzlpKkya+P1tBOrTW0UxulJJ1SQPEgdR30SL7Pt1m7jgooHqSEo0eUmZmpqvWucuthAQAUXAQNAChESpYqrdem/aC7hz2nqnUbKDMzU7G7dsrPP0ANW7TRoNFvKDMjw/ndGc3adcz2eseE7j/yGDQkqVGbm/TW7Pm66Y4+Kh95pY4fPqxjhw4qqkYt9Xn8Wed2z3w0Wd0GDVH5yCsVt2e3fHx91eTGDnr16zmKrFI93+cbULy4ruvQyfn8hq5MAgeAwsLLsrJO88O5REZGKjY2VqUrhGviolWeLgcAAAAeMLB1Ix09EKeIiAjFxMR4upwCjR4NAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAgEIs8dhR9W1UQ30b1dCpxARPl2ObBbO+UfdaFfXukw95uhQAwAUiaABAIfbd5xOUfOqkbuxxp4JKBrut+23GVD3V4xbddXVV9bmmmh7rfIMWzPomx/289dggda9VUd1rVdQ7Twy+4HoOxOzV+888pvtaNlSv+lG69/oGemXQ3TmGoF2b1qtX/UrO48bs2u5c17JzN4WWK68l8+Zo345tF1wPAMBzCBoAUEidTkvT7zO+kiS16tzdbd2nLz2nCS8M184Na1WyVGmFR1VWwtEj2rJmRbb9LJj1jZb+/MN/rmf/7p16usctWvjddCWfTFREleoqERKqdUv+VMqpk27bpqYka9ywh5V+Oi3HfRXz89N17TspMzNT86dN+c+1AQAuPV9PFwAAuDDrlvypxOPHVKpcBVWt18DZvnXNSs2bOkne3t4a9t5ENW13i3Nd8kn3C/74vdH67JUXVLNhIx2O368j8XEXXM9nr7ygxOPHVK/p9Xrq/U8VFBwiyYQKX99ibttOfn2MYnft0HU3dz5nyGnUpp3mTZ2kxXO/133PvXTBdQEAPIMeDQAopDav+keSVK3+VW7tS85cuJeuEKbfZ32tuxvX1KAbGuvTl56TJdd3tGakp2vc8Efk7e2toW99KG9vnwuu5eSJ41q7eJEkKSg4RE/1uEV9rqmuZ3rdqi2r/pGPr+tzrRUL5mv+N/9Tx7736ppWbc+5T8d5nThyWLG7dlxwbQAAzyBoAEAhFbdntySpXMQVbu2xu3dKkg7H7df6ZX+rTHhFHYmP07ypkzRu2MPO7aZ/+I62r12tgaNeU4XIK/9zLZZlQszyX+cqMzNTfv7+2r52tV5+oK+2rV0tSTp26KA+ev5JXVmjtu4e/nyu+ywZWkqBQSUkmZ4XAEDhQtAAgEIq6aSZYO24GHfITE93Ph752dca98Mf6vXoMEnSqoW/6WDMPu1Yv1azP3lfrbp0V6vO3f5zLRlZjtmgeUt99OtSfTB/iUqElFJmRoZ++fp/kqT/G/WUUk6d0uNvfSg//4Dz7jewRElJUtJldEctACgqmKMBAIVUYJC5CE9JOuXWXrpCmPNxtfoNzyyvdrYdjN2ng7H7lJmRoWW//KR/fpsnSUpNTpYkLZs/V32uqaZPFq3OdiercyldIdz5uGrdq+Tl5aWgksGqWKmKtq1dpUOx+yRJ0Vs2Kf10mp7tfaskKSM9w/m6p7rfrFv6DNDdw1w9HcknE825ngkcAIDCgx4NACikwitVliQd2h/j1t6geSvn450b1prlRrP08vJSeFQl5/q01BSlJCUpJSnJOfQpIz1dKUlJ0pnng9teq+61Kur9Zx47Zy3lIyIVHlVFkrRr4zpZlqWkk4naH73LrVZJyszMdB7zdFqqsz01OVmn01x3oUo8fkzJZ+5WFR7lej0AoHCgRwMACqk6jZrqu4kfatfGdW7tzW/urB+/mKidG9bqxfvuVIXIKO3bsVWSdEO3XioTVlFtu/VS22693F43uO21OrQ/Rtd37KIn3vk43/X0fXKE3ho6UGuX/KmH2zdX8qmTOnnimAKKF1fn/oMkSR8v+MftNQtmT9OHIx6XJL03d5Eiq1R3rtux3oSjkDJlFVGlWr7rAQB4Fj0aAFBINWjeSiVDS+lw3H7t3rzB2e5brJhGfva12ve6W4ElSip+b7SuqFZTA0a8qMEvjs3XMRw9E5IUVaNWrts2a99RT3/4uarVb6hjBw/I29tb1950s96YOU+RVavn+tqcrFr4qyTp+o635fu1AADP87IcfeXIVWRkpGJjY1W6QrgmLlrl6XIAQJI05e1X9N3ED9W5/yD1f2aU7fuP3rpJT952k66sXktjZ/8i32LFzv8iG5xOS9Pgtk2UcPSI3pmzQFdUq3FJjgsA5zOwdSMdPRCniIgIxcTEnP8FRRg9GgBQiN1+74MKDCqh32d+pVMX4c5Mm/5ZKi8vLw1+8c1LFjIk6c8fZun44UO6vuNthAwAKKTo0cgjejQAAABAj0be0aMBAAAAwHYEDQAAAAC24/a2+XT80AENbN3I02UAAADAA44fOuDpEgoNgkY+ZWZm6uiBOE+XAQAAABRoBI08CgsL83QJAAAAKCC4Njw/7joFAMiTo0ePqnv37po1a5ZKly7t6XIAAAUck8EBAHkSHR2thQsXKjo62tOlAAAKAYIGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAIBcff7559q7d69b2969e/X55597qCIAQGFA0AAA5Gr8+PEaMmSIW9ujjz6q8ePHe6giAEBhQNAAAOTqySef1Pfff68tW7ZIkjZv3qw5c+Zo2LBhHq4MAFCQeVmWZXm6CABAwZWenq46deqoYsWKWrRokVq3bq24uDht3LhRvr6+ni4PAFBAETQAAOc1ZcoU3XPPPW7P+/bt68GKAAAFHUEDAHBe6enpqlq1qvbu3auoqCjt2LGD3gwAQK6YowEAOC9fX18NHjxYkjR48GBCBgDgvOjRAADkSWZmpiZOnKiBAwfK25vPqQAAuSNoAAAAALAdH0kBAAAAsB2DbPOocePGio+P93QZAAAAKADCwsK0cuVKT5dRoBE08ig+Pl6xsbGeLgMAAAAoFAga+eTtLYWHe7oKAAAAeEJcnJSZ6ekqCgeCRj6Fh0sxMZ6uAgAAAJ4QGSkxyCVvmAwOAAAAwHYEDQAoYipVkry8pNGjPV0JAOByRtAAgEugTRtzce/4KVbMDMXs2VPavTv/+xs92uynUiWbCz2PrOeweLGr/eOPXe3R0Ze2ppzExUm9ekmVK7vq6t3b01UBQNFC0ACAS8jPT2raVKpdW4qPl2bMkDp39nRVF+bZZy/evtPS/tvrDxyQpk83ASMgwJ6aAAD5Q9AAgEsoPFxatkxat0667z7TtnGjdOSIeZycLN1+u/kkPihI8veXqleXRo50XXy3aSONGWMe79nj+sR+8mTTlpgoDRsmVa1qgk2ZMtLNN5t9Z5WWJj3xhFlfvrw0dKiUnp73c/nrL2nevNy3+ftvqUMHKSTEnEvt2tLYsVJGhmsbx1Cu4cOle++VQkPNayTXuQ0fLvXrZ96TatWkuXOlLVukFi1MW/Pm0ubNrn3WrCkdPizt2iVVqJD3cwIA2Ie7TgGAByQlue5aUq6cFBxsHqemSt9/by6Oa9QwF8s7dkgvvWSCwtixUp06pi021gSJq6927SctzQSR1atNW1SUGaY1f77Zd2Cgq4Zx48zzwECzr/HjpXr1pIEDz1//1VdLa9ZII0aYEJOThQuldu1MeClVytSyZYv01FPStm3SxInu248fL/n4mCCRtU5Jev99qWxZE1Z27jTDoEJCzLlJ0tKlJqQsXWqeO84LAOA59GgAwCXk6IEICpJ+/tkEhS+/dF0wBwWZHo74eHMhv2+f1LevWffNN2b50UfS/febx44ekmXLpE6dzDaOkPHmm2a+xPbt0vr1UvHi7rWEhZlP/HfskCpWNG2//56382jfXmrdWvr3X2natJy3GTXKhIyoKHOcbdtMr4kkffaZacsqOFjautX09vzwg/u6atVMwJg+3TxPTDSBa+dOE1Ak8x6c3WsDAPAcggYAXEKOORqNGplP3NPSpAEDXN/P4+1tgkeNGubTey8v81yS9u8///6XLzdLf38zLMqhbl1z7Ky6dDG9AgEBZqiWZOY25NWrr5rlyJE5D7lascIsO3Y0w6Ek6a67zNKypFWr3Lfv3l264grz2MfHfV379uacsk5+79TJvD9VqrjaDh7Me/0AgIuLoAEAl5CjB2LlSvMjmQDx8cfm8euvS6+9ZnohwsNNKImIMOvy+020Xl65r3dc/EuS75mBtJaV9/03b24msm/fLk2alL/acpLbXArH0DJf3+xtWc8zP/UDAC4uggYAFAApKWa5bJlZ1qhhhj0tXixddVX27R3DoJKS3C+umzY1y9RUMwfDYfPm/34np5y8+qrphXEM18qqSROznDtXOn7cPP76a7P08jK9OlmdLxgBAAoXggYAXEJxcVKzZlLjxuZHMhfqjlvcNmhgltu2meFMUVGu8JFVrVpmeeiQucNSs2ZmzkPv3tI115h1Tz5p9lGjhpnknZRk//nUq+caDnW2MWNMD8SePWZ4U40arvBz333uQ57sFhtr5nVUq+aadP/TT642AMDFR9AAgEsoLc3Mo1i1ylyEX3edmUzdurVZP2KEuY1raKiUkGCCw0MPZd/Prbeau0OVKWOGLi1fboKEn5/0xx+ukBEba26de9NNZo7DxfDii67J7Fm1aWNqadfO3M42OtoEpDfecA0Vu1hOnzYTxXfudM0fOXnS1QYAuPi8LIsRrXkRGRmp2NhYRUS4Jm0CAACgaImMNB/iREREKIaLwlzRowEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgBQRB05Yr70LjhYOnHC3n1nZJjb1/r6Slu22LtvAEDhQNAAgCJq7FgpMdF8p0VIiKv900/Nl+0FBUklSpjvyjjXN3/37Gm+aM/Ly9yK18HHR3r8cRM4Ro++qKcBACigCBoAUASlpZlAIUl9+7raH33UfD/HypVS2bJS9ermSwEXL86+j0mTpBkzzn2MXr1M4Jg1Szp40N76AQAFH0EDAIqgX381Q6fCw6VGjUzb0qXSBx+YbyqfPdt8o/eaNdKBA9K777q/fudOacgQ84WDkZE5H6N8edMzkp4uzZx5cc8HAFDwEDQAoAj6+2+zbNLE1TZ9ullGREiff26GU115penlyPrVrunpUp8+JpBMnWp6Lc7l2mvN8q+/7K0fAFDw+Xq6AADApbd9u1lWquRq27rVLPftkw4fNpO5N20yvRzR0dIPP5j1Y8ZIy5dLX34pVa6c+3Giosxyxw47qwcAFAb0aABAEeS4y1TJkq629HTX4/nzpQ0bTKiQpB9/NGFj5UrptdfMvI4+fc5/nOBg9+MBAIoOggYAFEGOAHDypKstIsL12DGkyjH0STJBY8MGcyepmTPNHalKlJD27jXrZ80yz7OGioQE9+MBAIoOggYAFEHVq5vlnj2utptucj1eudJ96eUlVavmWp+SIp06ZX4c8zfS092fZ92/43gAgKKDoAEARVDLlma5apWrrWdPqXFj87h9e6l+femFF8zzAQPM3aX69zdBIuuPYx5Gr17meWioa5///ON+PABA0UHQAIAiqF07qUwZM/H7339NW7FiZm7GoEFmqNOOHVLdutK4cdInn+T/GAcPSitWmG8H79HDzuoBAIUBd50CgCLIz0+6/37pjTekKVOkhg1Ne6lS0scfm5+8io7Ouf2bb8x8jt69zXdqAACKFno0AKCIGj7c3HXq00/tvytURobpCfH2lkaNsnffAIDCgR4NACiiypRx3RXKbj4+0q5dF2ffAIDCgR4NAAAAALYjaAAAAACwHUOn8ikuztziEQAAAEVPXJynKyg8CBr5lJkpxcZ6ugoAAACgYCNo5FFYWJinSwAAAEABwbXh+XlZlmV5uggAQMF38OBBtW3bVgsWLFB5vhgDAHAeTAYHAORJTEyMNm7cqJiYGE+XAgAoBAgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgAAAABsR9AAAAAAYDuCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAABy9dZbb2nr1q1ubVu3btVbb73loYoAAIUBQQMAkKtp06bpkUcecWt75JFHNH36dA9VBAAoDHw9XQAAoGB75pln1KNHD61Zs0aStGbNGv3222+aNWuWhysDABRkXpZlWZ4uAgBQcGVmZqphw4YqXry4li9frqZNmyo5OVlr1qyRtzcd4wCAnBE0AADnNWvWLPXo0cPtebdu3TxYEQCgoCNoAADOKzMzUzVr1tSOHTtUvXp1bdmyhd4MAECu+L8EAOC8vL29NWTIEEnS0KFDCRkAgPOiRwMAkGfz589X+/btPV0GAKAQIGgAAAAAsB193wAAAABsx/do5FHjxo0VHx/v6TIAAABQAISFhWnlypWeLqNAI2jkUXx8vGJjYz1dBgAAAFAoEDTyydtLCg/1dBUAAADwhLjjUiYznPOEoJFP4aFSzAeergIAAACeEPmIFHvM01UUDkwGBwAAAGA7ggYA2Gj0LMmrj1RpaP5et3CTeZ1XHyn60H+vo9JQs6/Rs/77vuAyeZHr9wQAyB1DpwAgD1LSpAm/SzOWS5tipeQ0qUKIVCNM6thQeqKjpyvMv4WbpBtecT2f9ZjUrYnr+VNfSWN/cj1PniQF+F2y8s6rzcvSos2u595eUliodE0l6dkuUvManqoMACDRowEA53UkUWo2SnriS2npdul0hgkY3l7Soi3Sk1M9XaE9PpjvepycJn22yHO15Iefr9S0qtTgSulggvTjGqn1y9I/Oz1dGQAUbfRoAMB5PPKFtHaveTz0Zun1Xq5P9k8kSd+uyP31GZnSuHnSZwulnQelgGLStVWlkV2llrWyb79lv9T//6RlO6TI0uZ4PZqadTFHpAc+k9bvkw4nmraqFaT725javLwu7ByL+Uh/bJI27JPqXSFNXSwdPWnaT2dk337ev9LrP0iro6X0DKlxFenF7tINdV3b9PtYWrJNij8hpZ42N9O4rZH08h1ScHGzTf+PpS/+klrXlu641vSgHDkpta4lfTrQ9FCcT3iotOxF8/inNdKtb5mavlpi3mdJmrNKevNH6d89UnqmVLui9Eh76b42rv0kp0kvfydNWybtPSyVCJBa1ZJe6iHVvzKfbygAgB4NAMjN8VNmuJQkXXWl9E4f9+FDIcWl/q1z38egz6RhX0mb90tXlpF8faTfNkhtX3Uf+uPQ4z1z+0R/X2nnAanX+9KaaLPucKI0b615XDtCCg6UNsZIj38pffTrhZ9n92vN0tGr8f58E1oc7VlNWyp1ekv6c4tUpoS50P97q9TudemPja7tvl8lHTslVS0vXVFG2nvE7Pe+idn3uWSbeY/8fKWTKdJP/9rXU/Tl39Jt70iLt5nwEBZiAsf9E6VXvnNt1+Vt6dXvpV0HTXg7nWHOofkYE/4AAPlD0ACAXGyLNz0Skul98D7zr+bt77gmBXv1MZOEc7LzgPT5mXVDb5a2vyPteleKKms+dR85M/trHm0vbX3L/IQWN/drf+MHs65yeWn3OGnf+9LqV6S4D82n7pL0zbILP8/ezaRywdKXi82n/+v2Su3qSTXDs2/7zDTJsqR7W5tadr4rdW1s3qeRWSafL3peOvx/0r+vmW2eu820f7fKzHnJKiNTWjZG2va22Zck/b5ReRJ3XGo2Urp6hHT7u6bN10e68zrz+LnpZtm0qrTnPVOz4xivfC8lpZqA9NsG0/ZOH2nzWGnzmyaYnEyRXpuTt1oAAC4EDQDII+8sw5JqhpsejvNZtdtclEvSXc3NMqS4mUAuSSt3Z3/NnWe2CwuVbqhjHq/fZ5a+3mYIUNQQqdg9ks/dpmdBkvb/h/u6+xeTBt4gnUqV7p5g2h5tn327Qwmuu2J9vkjy7mt+vl1p2pbvcG372wap3tNSYH8Txl753rSnZ0iHEt33W/8K6aoo87hOhFkeOJG32tPSpeU7TTgqV1Lq1NCEnKbVpIMnTE+KZCa6+xczPTW9z4SQ5DTTI7Ril2t/jt9TZBmpZU3zeGWW9QCAvGGOBgDkoma45ONtPnFfst3V/sad0oDWUu3hl7aex6ZIny40j6uHSaWDzLyPw4munpcL9eCNJsQkJEtVypswlFMQcqhS3lzYny0t3Qw3G/aVeR4eaoZOHU40w5Kk7LWGBrke+/rkr+6oslL0e/l7DQDg4qNHAwByEVJc6nlmIvbKXdKomfm7oG9U2TVB+6slZnkiSZr7r3ncuHL210w7MwTq4Alp4Zk5HPWvMMtlZ3oM2tc3w4wWPi9FlMp7PbmJLCPd3sg8frida5hYVuWCzYW9ZG4j+/coMxF72YvS/x6UXrrDzLNw1FkywAxVWv6iqflSKx9i5sVI0uwVZlK6ZUnfLDVtgX5S3UipSRXXaxy/p5gj0l9bzePGWdYDAPKGHg0AOI/3+0kbY83QnBe/lcb9bD7Njzt+/tdWrWDmMny2UHrvZ3NXpKOnzB2dfH2kMd2zv+a9n6VZ/5i7NZ1IMkO2nrrVrGtwpbQhRpq/Xqo5zOwn07LvXKc8KE2418wNOZdXe0p9PpJm/iMtesQEnbjjZqhTv5ZSu/pSgzPBKDFFqvK4mdh+Itm+OvPjlZ5mONjynVLUUHPXrz2HzbrnbpOK+5u7Zd1Uzwz3emKq9MkCKeaomZ9RIsB8LwcAIH/o0QCA8yhT0kxUfqO36aHItMxdiAL9pA4NpI/vlW5vfO7X/9990ti7zC1V9x6RTqebi9oFI6Q2dbJvP3Oo+TLAlNMm0Hz9iHTNmZ6Pd/qaW8SWCJASk6XhnaTOV9t3rgF+UtmSuQ9fuut66cdh5pa0yWnS1jjTc3FPS+n+G8w297WRnrjF7Csx2ZznizmEqkuhbwvp+yek62uY4BN/QmoYZW6f+9ztru3mPCmNuE2qXE7afsC8B7c1kpaMkmpV9EztAFCYeVmWZeNnYZevyMhIxcbGKqKUFPOBp6sBAACAJ0Q+IsUekyIiIhQTE+Ppcgo0ejQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwna+nCyhs4o5LkY94ugoAAAB4QtxxT1dQeBA08inTkmKPeboKAAAAoGAjaORRWFiYp0sAAABAAcG14fl5WZZleboIAEDBt3//fl1zzTVavXq1Klas6OlyAAAFHJPBAQB5Eh8frwMHDig+Pt7TpQAACgGCBgAAAADbETQAAAAA2I6gAQAAAMB2BA0AAAAAtiNoAAAAALAdQQMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNAAAAADYjqABAAAAwHYEDQAAAAC2I2gAAAAAsB1BAwAAAIDtCBoAAAAAbEfQAAAAAGA7ggYAAAAA2xE0AAAAANiOoAEAAADAdgQNAAAAALYjaAAAAACwHUEDAAAAgO0IGgCAXI0YMUKrV692a1u9erVGjBjhoYoAAIUBQQMAkKs///xTjz76qCzLkiRZlqVHHnlEf/31l4crAwAUZL6eLgAAULA999xz6tixo5YvXy5JWrZsmZYuXap58+Z5uDIAQEHmZTk+ogIAIAeWZalZs2ZKTU3V2rVr1aBBAwUGBmrp0qXy8vLydHkAgAKKoAEAOK958+apY8eObs9vvvlmD1YEACjoCBoAgPOyLEv169fXxo0bVa9ePa1bt47eDABArpgMDgA4Ly8vLw0bNkySNGzYMEIGAOC86NEAAOTZli1bVKtWLU+XAQAoBAgaAAAAAGzH0CkAAAAAtuN7NPKocePGio+P93QZAAAAKADCwsK0cuVKT5dRoBE08ig+Pl6xsbGeLgMAAAAoFAga+eTt5aXwEkGeLgMAAAAeEHfylDKZ4pwnBI18Ci8RpN1PPuDpMgAAAOABld/+RLGJJz1dRqHAZHAAAAAAtiNoAAAAALAdQ6cA4DJ306Tp+nNPjKJCgrX98fuzrT+RkqrX/lyuOVt2KCYhUQG+vqpQIkj1K5TVm+1bKzKkpPxGv3Pe43x6WwdFhQar3RcznG3TenZW1zrVnc+fmf+n3lniuktLwnNDFFCM/xUBwOWIf90BoIgb8O3P+nHrTnlJqlWujCRpz/ET2nr4qJ5s3liRISV1bUSYc/tdx07ocFKyJLm1lw0KzLbvCf/86wwayadPa/KaDRfxTAAABQlBAwCKsFNppzV32y5J0ie3tVe/q+tJktIzMvXH7r2KCC4pSfp74F3O19z37c+asnZTtnZJWrR7n/NxMW9vLYzepw0HDqtehbL6et0WHU1OUTFvb53OzLyo5wUA8DzmaABAEWeduU3jt5u267ede3QsOUW+Pt5qV62Swkpe+O28HT0ZE/75V5L04T9r5JWlHQBweaNHAwCKsCC/Yup7VR1NWbtJc7fv1tztu+UlqUFYOQ24up4GNblKPt4X9plUz3o19ceuvfpq3WbdXL2y1h84rHZVo1SjTCl7TwIAUCDRowEARdzE2zpo4m3tdWOVKxXo6ytL0tr4Q3ps3h96ZdGyC96vv4+P7m1UX6dOn9aAb+dJkh669mqbqgYAFHQEDQAo4ry9vdTv6nqad08PHXn2Ef3a7w5FlCwhSZqzZed/2vegxlfJ19tbCalpqlIqRLdUr2xHyQCAQoCgAQBFhCVLKafT3X5S09P17K9/atvhY5IkXx9vtYiKUMVgEzRCAvz+0zEjQ0qqS62qkqTBTRrK29vrv50EAKDQYI4GABQRe08kKviV8W5tL9/YQm8vXqm3F69UxZJBCitRQjEJiTp4KkmS1Lt+7f983Mldb9EHnW5SaID/f94XAKDwIGgAQBHm5+Oj19q11B+79mrzoaPadOiwJKlBhXLqf3VdDWzc4D8fI6CYL1/KBwBFkJfluK8hchUZGanY2FhFlCyh3U8+4OlyAAAA4AGV3/5EsYknFRERoZiYGE+XU6AxRwMAAACA7QgaAAAAAGxH0AAAAABgO4IGAAAAANsRNABcVo4kJavMqx+ozKsf6ERKqqfLQQ7+t2aj/Ea/I7/R73i6lAJjzB9L5Df6HT3/29+eLgUAbMP9BgFcVt5evFKJaWka0uwahZz1vQ2fr1qviavWafOhI/KSl6JCg/V480bqd3W9bPu5c/qPmrVpmyTpjro1NfWOThdUz+5jJ/TywqX6deceHUlKVqnAADWqWEH/694xW31r4g6q5adfKy0jQ5K07uH+qlWu9AUdFwVDbEKiHvrhN62LP6RDSckK9PXVlaEldVeD2nr8usbOLzB86NqGeuvvFfpw+Ro9dl0jlQ0K9HDlAPDf0aMB4LKRlp6hSavXS5LuauD+RXOPzV2gwT/8qlX7D6hs8UBVKxOqw0nJWrJ3f7b9fLFmgzNk/BfbDh9T80+masraTUpITVWtcqVVKjBAv+3co8TUNLdtk0+f1j2z5jpDBi69tHT73/tDp5L1x+69CvIrpnrly8rX20vrDxzWs7/+pbcWr3BuVy6ouG6sGqVTp09r6rpNttcBAJ5AjwaAy8Zvu/boSHKKwksE6ZqKFZzty/bt10f//CtvLy990/NW3V67unPd2Rf8O48e1+Pz/lCzyHDFJCQqJuHkBdfzxLwFOpKcojaVrtD0Xp0VGhggyYSKYt4+btsO/2WRth4+qu51avynkPPiH0v08qJligoJ1mvtW2n0gsWKSUjUNeEVNKFLO9Usa3pI7vv2Z01Zu0mtoiL124CeksyQpvu//0WSlDb6CUnSTZOm6889MWoVFakO1Stp3JJVyrQsPda8sR5scpWGzF2g7zfvUHjJIL3WrpVuq13tgur+at1mfbBstXYfO6ETqWkq4VdMTSLCNPqG5moSGa5Jq9dr0JxfVbyYr/Y+OUjBZ3qDnvplkcYtXaUaZUppw6MDJEk/b9+tsX//ozVxB5WemalGFcM06obr1KbylZKk6GMnVOO9zyRJH3dup2kbtmjJ3v0a3qKJnmvdTCMXLNbMDdu0P/GkihfzVeVSobqjXg09eX2TfJ9XvfJldfTZR+XrYz7XS0xN0xVvfayk0+lass895HaqUUVzt+3StPVbNPS6Rhf0PgJAQULQAHDZWLw3VpLUKCLMrX3mRnPhHlGyhCav2aj7v/tFIf7+6lyrql5se71zu/SMTPWbNVfeXl76ontHtZ8844JrOZacol937pEkhQb667pPpurAqSTVKVdGo9ter5uqRjm3/XHrTn2ycp0evrahrg6vYEtvSmziSfWbNVdVSocq+XS6/t4bqwe+n69F9/W+oP0tj4nTv/EHFRrgr70nEvXC739r6tpNOpKUrBJ+xbTj6HH1nz1POx6/X2WK53/Yz6rYeG04eFhXhAQrIrikth4+ql937tGyfXHa+OgA9apXS0/98qdOpKZq+oatuv/MN5Z/t3m7JOnuhnUlSdM3bNXdM3+SJSkqJFjeXl5avDdWt/xvlubd090ZNhyGzF2gkn7FVKV0qHy8vTXhn3819u8V8vHyUp3yZZT8/+3dd3yV5d3H8e/JIIRAJpCdQBAiI8ywUSKjqIU6oSqgotZRR6E+BRfLan3qU1etg7ZaKipSFYogiKCFIhKGBJBhAoTsQRKyd3LO88eBE46sBG84J4fP+/XylXte1+8cecH9zXVf913foH3HCtU+xdMWNE6GtHM5GdROBowbPlih/IoqpZeUqqq+QZI0MirM7pz4E39ud+cVqLKuXj5tPFv8PQKAMyFoAHAZh4tKJEld/H3ttqcUHpckZZaVq7CqWl0D/HSwoEhvbt+ttJIy/fuOGyVJv9+0Vduz87T45uvUNcDvJ9ZSLMuJ5X8fPKyu/n5q6+Gh7dl5mvT+cm269zYNiQhVXnmlHlj5pfp07qgXxl+tf+1L/kn9ntRgNmv57TdoYmw3/e6LjXotcZe2Zuaour5e3p4tv4A1Wyza+eB0dfJpp+A/vqm6xkYVVVVr/6MzVFRdo55/fleV9fXamZ2nCd27trj9B4f01+/HjlK7ExfXh4uK1ev1f6i8rk5rD6VqxsA4Te/fS3/ZlqTFSft0X3xf7crJV1pJmdxMJtutcs9s2CyLpLsH9NaiX/xMkjRl2Sqt/OGwFv5n62lBY1hEqFZPu1ltPT3UaDbr8S82SpLuGtBbb584v6K2Tj+c+DMkSTGB/hryozB7Prty8pVfWWVbf3xkvP7nRyMk0X4dJFn/36WVlKp3544t6gMAnA1BA4DLKKu1PmWqfZs2dtsbzBbb8prpt2hkdLie35Sohf/5VmtSUpVWXKqiqmq9uHm77ujb87T5HRfi1D7HxkRpzfRbVFZbp9jX3tHx6hot2rFHQyJC9evVG1ReV6d1t0xWW0/j/kr28/LSxNhukqSenYJs249VVivav+VBo3fnjupyInx1auet7PIKjYgKl793W7tJ7adeTLdESXWNHvv8K+3KyVdJTa0sp+zLKa+UJN0f309/2Zak7dl5OnCsSMsPWEczErpEKtKvgwoqq5RWUiZJWpy0X4uT9tv1sT0r97R+fxXf1/a9u7u56foeMXpr+269u2ufvjh0VN2DAjQ4PFT3DoqznfP06GF6evSwFn2+zN89qKq6em1My9S0Tz7XK99+p+6BAbrnlHZ9vZq+x7KaujM1AwCtCkEDgMvo4GUNGJV19hdpYb7tbcvx4da5G4NP+Y10ekmZ0kvK1GixaPmBFK08eFiSVFVfL0lacfCQAp5/XWmP33/ak6LO5tQ+B4YFy2Qyya+tl7oHBWhbVq7ST1wQf59XoLpGs676+1JJ1t9mnzTsr+/roSH99cL4q5v3BZzC/5Q6PdyanvthsVgv4U0m69OOGi1Nl/SltWd/HLCvV1N4O9neyW0n27J20OJSVVFbp5+/v1wlNbVq6+Gu/qGd5enmpu3ZedYaT3wnV3YKVEKXSG1My9R7u/dpVXKqJGla/16ntRkT4KeOZ7iF68cTvoPbt7Nb/9kVXbTtgWn69ECKvs8r0O68Y9qUlqUlu/fr4GP3qL1XGz2/KVFrU1LP+Zm++dUdp21r18ZT1/eI0diY6BMjLN/aBY2yU77/Dl5tTjsfAFobggYAl3FFYIAkKb20zG77mJgovbfb+tvt73LyNSIqXN/l5EuSTJK6BfrbLvxrGhol2V+MNpjNajCbbRfp3V/5u9JLyzS9Xy+9c9O1Z6wl2t9XVwT66/DxEiXlHJPFYlF5bZ0OFRVbaw3ytx1rtlhUeSLUnKqqvsF2YXzqRO2U39xrG124UJ1OPD41rbhUDY1mmUyyBaxLLaWoWCUn3nny1xsm6La4K7UtM0dXvfPRacfeP7ifNqZlatGOvaqsr1f7Np666cTk/k4+7RTt56v00jL1D+2s92/5uW2OREphsTJKy9TGw34Svkkmu/W9eQXq5OOt348dJUnKK69U1EuLlF9ZpZSiYg0MC1bq8RJbCDqflQcPq2enIPXoaP2zeayiSrtO/Nn78f/z9NJySdYg91Nv3QMAZ0DQAOAyRkWH609bdigp55jd9sm9e+j1xF36Lidf1y/5VF0D/HTgWJEk6734EX4ddOeA3rpzQG+7804Gigt9j8bz467Sbf9apQ2p6er553dVXlun49U18vH0tD1V6NCs++zOOTVQXMz3aIzpGqWXtuxUdnmF4t9eIrPFopQTIehS6xrgJx9PT1XW1+uBlV/qxc3bVXCWW7BuuLKbQtv7KLfCejvVTT27202afnbsSN21fK2WHzik6LRFCvNtr7zySuVXVml6v152k/DP5JP9Kfrj5m2K8O2gjj7eyjxx8d/O00MxJy7+37np2rMGzB/77IfDmrzsM4V18FFQO28dKio+EWal6f3sR2J2nggv/UM6MREcgEvgPRoAXMa4mGgFebdVZlm5duc2hQ1Pd3etmX6LfjWor3y9vHTkeIl6dQ7SS9cm6K1J41vUh8Visd1i1Cf43JN1b+rVXZ/cdoPiw4KVU14hN5NJv7iym7beP9Vu3kRzFNfUSJJC2vuok0+78xx9fuOv6KKFY0YqrIOP0kvK1LtzRy085Qlcl1KAd1stnTJRPTsFyWyxqI27u1acmKD/Y57u7poxsOkFi9N+dLF+e9+e+vcdN+rq6AhVNzQopbBYHbzaaFq/XrpnYNyPmzvNVdHhmnBFF5ktFu0/ViSLxaJrukZq1dSbbY8nbokxMVEaHhmm2oZGHThWJE83dw0OD9HL1ybopWuvsTv28xO3Y/0y7soW9wMAzshksVgu4I7ay09ERISys7MV3qG9jj5+v6PLAXAWT514EdrM4YP04oTRhre/N69A8W8vUe/OQdr+wDR5uruf/yQDTP7oM6384bCW3HL9ZX8huuz7HzT90zWK9vNVysx77eeItFIFlVWKeflv8nR306GZF/aIYACXRteX/qrs8gqFh4crKyvL0eU4NW6dAuBSHh8Zr0U79ujdXd/r6dHDmj15u7k2p2fJJOmtSeMvWciwWCzakpGtCVd0aRUh493vvte7J97Q/mP3DIyzmwDdEt+kZ+mt7Xv0Var1/SQzRwxyiZAhSW9sS1JtY6NmjhhEyADgMggaAFxKUDtvFT31yEVr/+GhA/Tw0AEXrf0zMZlMypn90CXt86fIKis/62Tpn13R5YLbTT1eqo/3J8u/rZceHtJfDw3uf8FtOZsFY0ZqgYNuXQOAi4WgAQAw1LxrRmjeNSMMb/dME/YBAM6LyeAAAAAADMeIRgvlVlSq60t/dXQZAAAAcICTj9fG+RE0WshssSi7vMLRZQAAAABOjaDRTCEhIY4uAQAczmKxuMyTngDgp+Da8Px4jwYAoFkyMjLUo0cPpaSkKCoqytHlAACcHJPBAQDNUlhYqNraWhUWFjq6FABAK0DQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAAABgOIIGAAAAAMMRNAAAAAAYjqABAAAAwHAEDQAAAACGI2gAAAAAMBxBAwBwTg8++KA2b95st23z5s168MEHHVQRAKA1IGgAAM7p8OHDeuyxx2SxWCRJFotFjz32mA4fPuzgygAAzszD0QUAAJzb3LlzlZCQoE2bNkmSNm7cqN27d2vjxo2OLQwA4NRMlpO/ogIA4CzGjBmjnJwcJScnKzY2VmFhYfr6668dXRYAwIkRNAAA57Vp0yYlJCTY1jdu3KjRo0c7riAAgNMjaAAAmmXw4MHauXOn4uPjtWPHDkeXAwBwckwGBwA0y5w5c+x+AgBwLoxoAACaraysTL6+vo4uAwDQChA0AAAAABiOW6cAAAAAGI73aDRTfHy88vLyHF0GAAAAnEBISIh27tzp6DKcGkGjmfLy8pSdne3oMgAAAIBWgaDRQiY3k3yDmQgJAABwOSrLL5PFzBTn5iBotJBvsK8W7l/o6DIAAADgAPN7z1dpbqmjy2gVmAwOAAAAwHCMaABAK/T6pNd1ZMsRSdZbOtu0ayPfEF91HdxVV91/lSL7RTq4wp/m0DeH9MYv3pAkzd09V0FRQQ6uCADQUoxoAEAr5t7GXVEDotS2Q1sVHinU9qXb9cr4V7T1va1nPcdisaixvvESVgkAuBwxogEArZhvsK9mrZ8lScpIytA/7v6HijOL9fH/fKyYYTFK25mmpY8slSQ98K8HtHLuSh07fEwPrXhI3Ud1V2piqtb93zql70xXfW29gqKDNGzqMCU8nCA3d+vvohb2W6jizGKN/c1Y1VbWatcnu2RuNGvQ5EG66fmb5OFl/aekrrpO619ar6QVSSrOKpaXj5diRsTo+qeuV1ivMEnStg+32ep59firkqSijCL9vv/vJUkPf/awDn9zWOteXGf7jCf3Db59sKa+MfUif6MAAKMwogEALiJqQJRufuFmSZK5wazE9xPt9v992t9VV10n/3B/Sdbbk/7yi78o+T/JcnN3U2BkoI4dOqbPFnymf/32X6e1v+ntTUpaniRvP2/VlNdoy7tbtOrZVU3t3/F3rX95vYrSihTUJUiNDY3at2afXrv2NeWn5Df7c/iH+Su4R7BtPTwuXNGDotWxS8eWfB0AAAcjaACAC4kZHmNbzk+2v7hPeChB83bP07zd89RteDd98b9fyNxgVkBkgJ5JekZP73haVz9wtSRp2/vbVJhWaHd+QESA5ibN1dykuRp4y0BJ0jfvfKPqsmod2nxIKZtSJEk3PHeDntr2lJ7c+qS82nuptqJWG17d0OzPMPzO4br1T7fa1u9Zco9mrZ+lCb+b0LIvAwDgUAQNAHAh53q2++gHR9uW3dzdlJGUIUnqNb6X2vm1kyQNunWQtR2LRVm7s+zO7/WzXmrboa0kaeDN1qDRWNeogsMFtrZObcM/3F8xw6zBJzMp8yd9LgBA60PQAAAXkro11bYcHBtst69D5w6XupzTmEwm27K50SxJqimrcVQ5AICLiKABAC4iIylDK55eIck6YjH0jqF2+0+9yJesczok6cD6A6oqrZIk7fp0l+3YiP4RdscfWH9AtRW1kqSkfydJsj71qtMVnWxtSdJ3n3wnSSrJLlFqojX4RA6wPm63fcf2tuOOHT4mSdq9cvdpn6WNdxvbcl1l3bk/OADAKfHUKQBoxcryy/TK+FdUmluq0txSWSwWuXm4afKfJivkyhCl70o/67nXPnGt3rr5LRVnFuu5Ac/JJ8hHBUcKJElDpw09bfJ1aW6pnh3wrNp2aKuitCJJ0sgZI+Xt663uV3VXj9E9lLIpRSufWamt/9yqkpwS1VbUyqu9l8bNHCdJio6Pts3bePPGNxXUJUjpO0+vsWPXjnL3dFdjfaPeuvktBUQE6JpHrlH/G/ob9M0BAC42RjQAoBVrrGtUxq4MVZdVq2NMRw2+fbBmrZ+l4XcOP++53Ud11yOfPaLYhFiZG806nnFcnbt31qQFkzTl5SmnHT/6gdGKnxyv6pJqebX30oi7R2jS/Em2/fd9eJ/G/3a8AqMDVZBaIHcPd/W5vo9+88VvbE+R8gnw0Z1/u1Odu3dWVUmVZJGmLZp2Wl8+gT66+X9vln+4v8qPlSv9u3SVHyv/Cd8UAOBSM1kslrPPHIRNRESEsrOz5Rfqp4X7Fzq6HAC4ZE6+R2PC7Am67onrHF0OADjU/N7zVZpbqvDwcGVlZZ3/hMsYIxoAAAAADEfQAAAAAGA4JoMDAM5p/p75ji4BANAKMaIBAAAAwHAEDQAAAACGI2gAwGWk8nil5kTN0ZyoOaouq74kfX7w6w80M3Cmvl387SXpDwDgHJijAQCXka9f/1q1FbUa/eBoeft6S5IKUgu0euFqHdp8SPU19QruEawxj43RwJsHnrOtfV/sU+L7icr+PlsVBRXy6uCl8N7hGv/4eF0x8grbcdc8fI12fLRDX770pYZOHSp3T/eL+hkBAM6BEQ0AuEw01DUocUmiJCl+SrwkqTSvVK9d95r2rNojc6NZvsG+ytqbpffue0+J7yees709q/Zo35p9sjRa1LFrR1UWVip5Y7LevPFNHd1+1HZcWO8whfYMVUl2ifav23/xPiAAwKkQNADgMpG8MVmVxyvlG+KryP6RkqQNr26wjka099KTiU9qbtJc9ZvUT5K0auEqNdQ1nLW9bsO6adb6WVqwb4HmbJmje5bcI0kyN5qVtDzJ7theE3pJknZ9uutifDQAgBMiaADAZSI1MVWSFDUgyrbt4IaDkqQug7vIL9RPktR3Ul9JUmVRpTKTMs/a3rDpwxQ9KNq2HjM8xrbs4WV/Z270wGi7GgAAro+gAQCXicIjhZKkwMhA27aS7BJJUodOHWzbTl0uzipudvtb3tkiyRoyBv9ysN2+gMgASVJZfplqK2tbVjgAoFUiaADAZeLkU6a8Onid8ziLxdLitr948Qut+cMauXu6a+qbUxXaK9Ruf9sObW3LNWU1LW4fAND68NQpALhMnLzYr61oGlHwD/dXYWqhygvKbdsqCitsywERAedss7G+UctmLtP2pdvl1d5Ld71zl3qN73XacTXlTeHi1NABAHBdjGgAwGWiU7dOkuxvh+o5tqckKW1HmkpzSyVJe1ftlST5BPkocoB10viqZ1fpD0P/oDdufMN2bnVZtRZNWaTtS7fLL9RPj37+6BlDhiQVZ1r79A32lVf7c4+oAABcAyMaAHCZiBkeo69e+0qZu5smeI/9zVjtWr5LlUWVemHYC/IJ9FFRepEkaeIzE+XRxvrPRFl+mY4dOqb6mnrbuZ/N/0wpm1IkWedlfPzbj237IvpFaPKfJtvW03elW2sY1jRhHADg2ggaAHCZiE2IlU+gj0qyS5T1fZYi4iLkH+av36z9jVY/u1op/01RaV6pwuPCNebRMRp066Bztnfqo2+L0opUlFZkW/doa//Py4F1ByRJA28590sAAQCug6ABAJcJjzYeGjZ9mL567SvtXLZTEXERkqTOV3TWPe/dc85zp74xVVPfmHrebWeSsz9HuQdz5R/ur94Tel/4BwAAtCrM0QCAy8iYR8fIq72XEpck2p5CdbF9/ZevJUkT/meC3D3dL0mfAADHY0QDAC4jPoE++mPGHy9pn9PemqZpb027pH0CAByPEQ0AAAAAhiNoAAAAADAct061UFl+meb3nu/oMgAAAOAAZfllji6h1SBotJDFbLG91AoAAADAmRE0mikkJMTRJQCAwzU2NsrdnSdHAQDXhudnslgsFkcXAQBwfqmpqerevbsOHTqkmBje8A0AODcmgwMAmqWkpERms1klJSWOLgUA0AoQNAAAAAAYjqABAAAAwHAEDQAAAACGI2gAAAAAMBxBAwAAAIDhCBoAAAAADEfQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAnNPkyZO1du1au21r167VlClTHFQRAKA1IGgAAM6ppqZGv/3tb9XY2ChJamxs1KxZs1RdXe3gygAAzszD0QUAAJzbvHnzNGTIEK1fv16S9OWXXyo5OVnvv/++gysDADgzk8VisTi6CACAc5s4caL279+vtLQ0RUdHKy4uTqtWrXJ0WQAAJ0bQAACc144dOzRkyBC79fj4eAdWBABwdszRAACc1+DBgzVq1ChJ0lVXXUXIAACcF0EDANAszzzzjNzc3PT00087uhQAQCvArVMAgGazWCwymUyOLgMA0AowogEAaDZCBgCguQgaAAAAAAzHezSaKT4+Xnl5eY4uAwAAAE4gJCREO3fudHQZTo2g0Ux5eXnKzs52dBkAAABAq0DQaCGTm0m+wb6OLgMAAAAOUJZfJouZZyk1B0GjhXyDfbVw/0JHlwEAAAAHmN97vkpzSx1dRqvAZHAAuMzMDJypmYEzte3DbY4uBQDgwhjRAAAX8/qk13VkyxEFRAZo/p75p+2PHhQtSWrfsf2lLg0AcBkhaADAZWbW+lmOLuGMzI1mSZKbO4PtAOAKCBoAcJmZGThTknT7X27X0DuGatuH27T0kaWSpIdXPqyVc1cqPyVfwT2Cdev/3aoug7vYzk3bmaZ1L67T0e1H1VDboJDYEI2bNU79b+hvO2bVwlXa/8V+leSWqK6qTu07tldsQqwmzpsovxA/SdLa/12rdS+uU0BkgK578jqte3Gdjmcc1zO7nlFQVNCl+ioAABcRvzYCANgsmrJIddV1amxoVNbeLP3zvn+qsaFRkpSamKrXf/66Dm44qDbebRQYFaisvVlaPGOxtn+03dbGwa8OqiS3RAHhAerYtaPK88u146MdemfaO6f1V5ZXpqUPL5Wbh5s6dO5wyT4nAODiY0QDAGDzi4W/0NX3X61NizZpxZMrVJxZrMLUQgX3CNaaP6xRY32jYhNidf+/7pe7h7tWPLVCm97epDXPrdGQ24ZIkqa9PU0hV4bIzc36u6yt723VspnLlLErQ4VHC9Wxa0dbf431jZr80mSNnDFSFotFFguPjAQAV0HQAADYxP8yXpIUEhti21ZeUK7gHsHK2JUhSUremKzHOz9ud15JTolKckrkH+av7O+z9eHDH+rY4WOqq6yzO640r9QuaHh6e2r4XcMlSSaTSSaT6aJ8LgDApUfQAADYtPNrJ0ly82i6s/bHowx+oX7yD/M/7Vxzo1mpian68NcfymKxyCfQRyGxIaqtqFV+Sr7tmFO1D2pvG/kAALgWggYAuCqLVF9Tb7fJ3dP9gpuLHBCpI1uOKDAyUA+teEhtvNtIkkqyS5S5J1OBkYHas3KPLZjM/ma2/EL8tOHVDVr97OozN8oABgC4LIIGALio4qxi/S7sd3bbbnz+xgtu7/onr9cbN76ho9uPal7PeQqKDlJFYYXK8soUMyJGcdfHKax3mO34F0e9KJ8gH1UUVlxwnwCA1ovxagBAs3Qb0U2Prn5UPcf1lMlkUl5yntw93dV3Ul+NeWSMJCn2mlhNWjBJfqF+qq+pV3CPYE3+02QHVw4AcASThUd8NEtERISys7PlF+qnhfsXOrocAAAAOMD83vNVmluq8PBwZWVlObocp8aIBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAXEzl8UrNiZqjOVFzVF1W7ehyzqsgtUCzOs7Ss/2fVUNdg6PLAQAYhBf2AYCL+fr1r1VbUavRD46Wt6+33b6t723Vt//8VvnJ+ZJJCowM1DUPX6OhU4ee1s7iGYu1e+VuSdKAmwbornfuuqB6itKL9MWLXyj562RVHq+Ut7+3ovpHafrfpsvb11udYjop7vo47V29V9s+2KaRM0ZeUD8AAOfCiAYAuJCGugYlLkmUJMVPibfb9+mcT7Vs5jJlJmXKJ9BHnWI6qaKoQke3HT2tnW0fbLOFjJ/i2OFjennsy9qxdIdqymsU3CNY7fzbKXljsmrLa23HDbp1kCRpy7tbfnKfAADnwIgGALiQ5I3WUQPfEF9F9o+0bT+6/ag2/22zTG4mzVg8Q30n9rXtqymvsWuj8Gihlj+5XF0Gd1FJdolKckouuJ7lTyxX5fFKdb+qu2a8N0Pt/NpJkuqq6+Tu6W47rue4nnJzd1PO/hzl/ZCnkCtDLrhPAIBzYEQDAFxIamKqJClqQJTd9t3/3i1J8gv107YPtumJ6Ce0IG6BPp3zqWRpOq6xoVFL7l8ik8mk6X+dLpO76YJrqSqpUvJ/kiVJ3n7eennMy5oTNUevjH9FRxOPyt2jKWi0adfGFi6OJB654D4BAM6DoAEALqTwSKEk69yLUx07fEySVJJdopT/psg/3F+lOaXa/LfNWvLAEttx6/64TunfpevWP92qoOign1RLwZECWSzWFLN39V5ZzBZ5eHko/bt0LZqySGk70+yOD4gMsH6G1MKf1C8AwDkQNADAhZx8ypRXBy+77eYGs235oU8f0hPfPqFrn7hWkrR/3X4VZRQpIylDG17doPgp8YqfbD+/40Kc2meP0T30zK5n9Mx3z6hdQDuZG83a8g/7+RhtO7SVJNWU2d/KBQBonZijAQAu5OTFem1Frd12v1A/2/LJ26qiBjbdXnU847iOZxyXudGsPZ/t0d7P90qS6qvqJUl7Vu3R7MjZWrh/4WlPsjobv7CmPiMHRMpkMlmfMtWtk9J3put4xnG740/OFTn5GQAArRsjGgDgQjp16yRJKs4qttveI6GHbTkjKUOSlLk7U5JkMpnUqWsn2/76mnrVVdaprrLOduuTucFst76w30LNDJypDx7+4Ky1BEYG2urJ2p0li8WimrIaFRwpsNYa08nu+OJMa80du3Vs4acGADgjRjQAwIXEDI/RV699ZQsRJw24cYA2vb1JmUmZevvWtxUUHaS8H/IkSUPuGCL/cH8NvWOoht5h/z6Nhf0Wqjiz+ILfozFx3kQtvnuxkjcm67lBz6m2olZVxVVq49NGCb9OsB1XV1Vnq6fbsG4t7gcA4HwY0QAAFxKbECufQB+VZJco6/ss23Z3T3c99OlDGnH3CLXt0FaFRwsVcmWIbvrDTfrlq79sUR8nRyYkKaxn2DmP7Tepn+59/15FDYxSWV6ZTG4mxf08To9/9bhCYpseYXtww0GZG80K6x3Go20BwEUwogEALsSjjYeGTR+mr177SjuX7VREXIRtXzv/dpry8hRNeXlKs9ubv2f+adtyD+SqurRaoT1DdfUDV5+3jT7X9VGf6/qc85jvPvlOkjTyXt4KDgCughENAHAxYx4dI6/2Xkpckmh7CpWRDm85LJPJpCmvTLF76d6FKkgt0PdrvldgVKCGTR1mQIUAAGdgspyc2YdzioiIUHZ2tvxC/bRw/0JHlwMAAAAHmN97vkpzSxUeHq6srKzzn3AZY0QDAAAAgOEIGgAAAAAMx2TwFirLL9P83qdPjgQAAIDrK8svc3QJrQZBo4UsZotKc0sdXQYAAADg1AgazRQSwnPdAaC+vl6enp6OLgMAHI5rw/PjqVMAgGZJSUlRbGyskpOT1aNHD0eXAwBwckwGBwA0S0VFhd1PAADOhaABAAAAwHAEDQAAAACGI2gAAAAAMBxBAwAAAIDhCBoAAAAADEfQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAAABgOIIGAOCcxo4dq48//thu28cff6yxY8c6qCIAQGtA0AAAnFNQUJBmz56t+vp6SVJ9fb1mz56toKAgB1cGAHBmHo4uAADg3ObNm6e4uDitXr1akrR69Wqlp6dr1apVDq4MAODMTBaLxeLoIgAAzm3KlCnasmWLcnJyFBYWplGjRmnZsmWOLgsA4MQIGgCA89q3b5/i4uIkSSaTSXv37lWfPn0cXBUAwJkxRwMAcF59+vTRuHHjJEnjxo0jZAAAzougAQBolrlz58rLy0tz5851dCkAgFaAW6cAAAAAGI4RDQAAAACGI2gAAAAAMBzv0Wim+Ph45eXlOboMAAAAOIGQkBDt3LnT0WU4NYJGM+Xl5Sk7O9vRZQAAAACtAkGjpdzcpNBQR1cBAAAAR8jNlcxmR1fRKhA0Wio0VMrKcnQVAAAAcISICIm7XJqFyeAAAAAADEfQAABXcvy49MQTUs+ekre31L691L+/9PzzUlVVy9vr0kUymaQFCwwu9EcWLLD206XLxe0HAHDJcOsUALiKrCxp5EgpI8O63qWLVFcn7dlj/e+TT6T//lfq0MGhZQIALg+MaACAq/j1r5tCxtKl0tGj1vuIX3jBum33bunpp63LJpP1v8WLm85PSLBuu/tuKS3Nupyebt23cGHTOZL9CMQnn0ixsVLbttKIEdL33ze1effd1uMSEpq2LV5s31ZCgrV9ydrfmWoDALQ6BA0AcAXFxdLnn1uXExKk225r2jd7ttS1q3X5gw8ki+X87Xl5SUOHSm3aWNfDw63rQ4faH5eTI02bJnl4WJ/CsnWrdN11LbtNq1cva/uStb+T/XTq1Pw2AABOh6ABAK7g0KGmxy3272+/z81N6tvXunz8uFRQcP72QkOlxMSmx3nfd591PTHR/rj6emnlSmn/fmnVKuu27GzpvfeaX/ubb1rbP7XfxETp5z9vfhsAAKdD0AAAV3PylqRTuV2kv+4DAqQJE6zLEyZY1yX726cAAJclggYAuIIrrmgKE0lJ9vvMZutkcEkKDLS/JamxsWm5tNT4uk6GnovdDwDA6RA0AMAVBAY23Wq0caP00UdN+158UUpNtS5PnWq9+O/c2bqekmL9+cMPZx6FaNfO+rOy8sz9FhdL69dbl9evt65LUlyc9efJfo4elRoarIFjxYqz91NV1bw5JAAAp0fQAABX8cYbUlSUdfn2260TwMPDpSeftG7r31967jnr8tix1p8vvSRdc400fPiZL/CvvNL6889/lgYPlmbMsN/v5SXdcIPUp480caJ1W2iodOed9v1kZ1v7j4uTNm8+ez8FBdYnWA0b1hSOAACtEkEDAFxFZKS0a5f1KVOxsVJurnWEoW9fa8DYskXy9bUe+/LL1hEQb2/pyBHpqaekUaNOb/O556wX/W5u0s6dp496hIRYR09O3ho1bJi0dm3TCMXPfmZtIyzM+sjcPn2aws6pJk6UfvUrKSjIOrF927YLe8EgAMBpmCwWxqibIyIiQtnZ2dbfDmZlObocAHCsBQus776IjrYGCAC4XERESNnZCg8PVxbXhOfEiAYAAAAAwxE0AAAAABiOoAEAaLkFC6yTx7ltCgBwFgQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAAABgOIIGAAAAAMMRNAAAAAAYjqABAAAAwHAEDQAAAACGI2gAAAAAMJyHowtodXJzpYgIR1cBAAAAR8jNdXQFrQZBo6XMZik729FVAAAAAE6NoNFMISEhji4BAAAAToJrw/MzWSwWi6OLAAAAAOBamAwOAAAAwHAEDQAAAACGI2gAAAAAMBxBAwAAAIDhCBoAAAAADEfQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAAABgOIIGAAAAAMMRNAAAAAAYjqABAAAAwHAEDQAAAACGI2gAAAAAMBxBAwAAAIDhCBoAAAAADEfQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYDiCBgAAAADDETQAAAAAGI6gAQAAAMBwBA0AAAAAhiNoAAAAADAcQQMAAACA4QgaAAAAAAxH0AAAAABgOIIGAAAAAMMRNAAAAAAYjqABAAAAwHAEDQAAAACGI2gAAAAAMBxBAwAAAIDhCBoAAAAADEfQAAAAAGA4ggYAAAAAwxE0AAAAABiOoAEAAADAcAQNAAAAAIYjaAAAAAAwHEEDAAAAgOEIGgAAAAAMR9AAAAAAYLj/B2lwSqsKlsUmAAAAAElFTkSuQmCC\n"},"metadata":{}}]}],"metadata":{"colab":{"collapsed_sections":["8Lk_kb_xtPu0","9cpy15xptJej","p8G39odb7E-h","zpSP5u973vQ2","Q-oenkAqk9BL","vIGOBPslHyJp","5s-39EIjlJG7"],"provenance":[],"mount_file_id":"1vwspOtANBG2lnq1v-GbgVIiN0GqiP0tX","authorship_tag":"ABX9TyNi3FczqxX5tsL8J2LhnSxA"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}